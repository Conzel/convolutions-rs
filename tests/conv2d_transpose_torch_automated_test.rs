// This file has been automatically generated by Jinja2 via the
// script /home/shrisha/masters/SS-21/convolutions-rs/scripts/generate_tests.py.
// Please do not change this file by hand.
#[allow(unused_imports)]
use convolutions_rs::convolutions::*;
#[allow(unused_imports)]
use convolutions_rs::transposed_convolutions::*;
#[allow(unused_imports)]
use convolutions_rs::Padding;
#[allow(unused_imports)]
use ndarray::{array, Array, Array3, Array4, Dimension};

fn arr_allclose<D: Dimension>(current: &Array<f32, D>, target: &Array<f32, D>) -> bool {
    assert_eq!(
        current.shape(),
        target.shape(),
        "\ngiven array had shape {:?}, but target had shape {:?}",
        current.shape(),
        target.shape()
    );
    (current - target).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_conv2d_torch_transpose() {
    let test_input1 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.17014849, 0.4305688, 0.5715329, 0.06520256, 0.12669589, 0.7501565, 0.9837982,
            0.55574155, 0.04181346,
        ],
    )
    .unwrap();

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 3),
        vec![
            0.23677547, 0.51154923, 0.02844254, 0.60484785, 0.72306335, 0.22177844, 0.16487044,
            0.46672952, 0.54035133, 0.6922357, 0.27845532, 0.66966337, 0.41083884, 0.4583148,
            0.70402896, 0.6177326, 0.9269775, 0.56033564,
        ],
    )
    .unwrap();
    let conv_layer1 = TransposedConvolutionLayer::new(kernel1, 1, Padding::Valid);
    let target_output1: Array3<f32> = Array::from_shape_vec(
        (2, 5, 5),
        vec![
            0.95008826, 1.0987887, 1.2702229, 1.214415, 0.92605716, 1.0281537, 1.3566108, 1.84884,
            1.8058922, 1.0578914, 1.2102307, 1.8188272, 2.1789007, 2.0169165, 1.3861877, 1.5155995,
            2.0086093, 1.7731574, 1.4818671, 1.3244227, 1.0720005, 1.4605943, 1.7076728, 1.2296126,
            0.9323953, 0.38748935, 0.6151403, 0.8991783, 0.717189, 0.65244114, 0.38474566,
            0.6304419, 1.419868, 1.12851, 1.1744345, 1.0826207, 1.4339896, 2.371901, 1.857576,
            1.1460896, 0.71416676, 1.0876215, 1.8515878, 1.4464989, 0.71948385, 0.8774307,
            1.5249649, 1.3619531, 0.6198684, 0.29313606,
        ],
    )
    .unwrap();
    let current_output1: Array3<f32> = conv_layer1.transposed_convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.24242379, 0.7944849, 0.75231165, 0.9692583, 0.12854727, 0.9148518, 0.3356524,
            0.37189406, 0.55898565,
        ],
    )
    .unwrap();

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 3),
        vec![
            0.5888119, 0.44166553, 0.9034325, 0.2795916, 0.7567664, 0.85028297, 0.96145767,
            0.5566679, 0.84558666, 0.0474241, 0.23985276, 0.07658575, 0.7197864, 0.13313323,
            0.69580543, 0.12692, 0.38484824, 0.775336,
        ],
    )
    .unwrap();
    let conv_layer2 = TransposedConvolutionLayer::new(kernel2, 1, Padding::Valid);
    let target_output2: Array3<f32> = Array::from_shape_vec(
        (2, 5, 5),
        vec![
            0.66388035, 1.0960107, 1.5340185, 1.571172, 1.2008011, 1.1596289, 1.430506, 3.0099568,
            2.2861917, 1.987323, 1.2228513, 2.556616, 3.8655472, 2.9962285, 2.4401717, 1.5468848,
            1.5422752, 3.015004, 1.8783417, 1.7700207, 0.84385395, 1.0655457, 1.5494242, 1.1467764,
            0.99380916, 0.44796044, 0.5322875, 0.681267, 0.6777539, 0.49408007, 0.6569233,
            1.2791734, 1.4008694, 1.3187029, 1.0299909, 1.1808091, 0.9503071, 2.5171056, 1.7157794,
            1.6991272, 0.80108, 1.138167, 2.0389595, 1.2213956, 1.5347265, 0.4790647, 0.61283976,
            0.9107764, 0.9399312, 0.8698654,
        ],
    )
    .unwrap();
    let current_output2: Array3<f32> = conv_layer2.transposed_convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.14352316, 0.8997107, 0.64410555, 0.04471071, 0.767672, 0.43464628, 0.16569944,
            0.18875164, 0.12285258,
        ],
    )
    .unwrap();

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 3),
        vec![
            0.2781115, 0.5390728, 0.5066572, 0.97435564, 0.39133722, 0.7964828, 0.988919,
            0.35985747, 0.00756764, 0.53660643, 0.8659267, 0.8576183, 0.81628793, 0.9480399,
            0.45711017, 0.89837223, 0.8462714, 0.70536447,
        ],
    )
    .unwrap();
    let conv_layer3 = TransposedConvolutionLayer::new(kernel3, 1, Padding::Valid);
    let target_output3: Array3<f32> = Array::from_shape_vec(
        (2, 5, 5),
        vec![
            0.96882874, 1.2565026, 1.6657732, 1.7319779, 1.255254, 1.0811905, 2.0993183, 2.5802693,
            2.5208323, 1.662149, 1.1604931, 2.777603, 2.8701358, 2.1108978, 1.3422201, 1.1345787,
            1.9529238, 1.9608786, 1.2895477, 1.0300525, 1.0927767, 1.1752015, 1.1195822,
            0.97455114, 0.929843, 0.08372705, 0.6137827, 1.2545143, 1.3360682, 0.5591083,
            0.14785987, 1.3278543, 2.3873808, 2.0633576, 0.6738994, 0.261061, 1.8502442, 2.9224868,
            2.2176545, 0.7650826, 0.18213692, 1.0453695, 1.4333519, 1.1187783, 0.3694528,
            0.15557137, 0.31650752, 0.39369255, 0.24381693, 0.09336744,
        ],
    )
    .unwrap();
    let current_output3: Array3<f32> = conv_layer3.transposed_convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.65220493, 0.72789615, 0.00785976, 0.32536873, 0.09833383, 0.1022715, 0.7567798,
            0.23972042, 0.38848338,
        ],
    )
    .unwrap();

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.00744711, 0.8715701, 0.07988323, 0.6283005, 0.8241853, 0.16570753, 0.6487234,
            0.14438818, 0.6286194, 0.34163022, 0.03235205, 0.25922647, 0.59344524, 0.9308157,
            0.22162326, 0.91818297, 0.97700953, 0.18019113, 0.775954, 0.14120784, 0.3426181,
            0.5417864, 0.7768226, 0.34603763, 0.6114103, 0.9716041, 0.5157695, 0.50755495,
            0.6659802, 0.629322, 0.60627973, 0.27978492, 0.28792506, 0.7547703, 0.0509604,
            0.10449678, 0.89887625, 0.6572328, 0.695583, 0.3626411, 0.37613922, 0.9241278,
            0.39898983, 0.6908677, 0.5511301, 0.36253917, 0.36786652, 0.88718724, 0.69587743,
            0.4870034,
        ],
    )
    .unwrap();
    let conv_layer4 = TransposedConvolutionLayer::new(kernel4, 1, Padding::Valid);
    let target_output4: Array3<f32> = Array::from_shape_vec(
        (2, 7, 7),
        vec![
            0.71839434, 1.2874004, 1.4001086, 1.1883149, 1.7090404, 1.3183969, 0.72001517,
            0.8240356, 1.5415697, 1.3936716, 1.5351458, 1.7331717, 1.1124519, 0.8005131,
            0.79418933, 1.7948959, 1.6895275, 2.8729262, 2.5333962, 1.4217141, 1.0704005,
            1.4483111, 2.6372793, 2.1004817, 2.5085409, 2.0615206, 1.2655137, 0.8700305, 1.2602259,
            1.9283929, 2.389665, 2.8264282, 2.132362, 1.6692778, 0.8188813, 1.5198767, 1.8829968,
            1.7818799, 1.9678981, 1.3888216, 1.144345, 0.83092403, 0.97282374, 1.2056828,
            1.5643996, 1.3721068, 1.5609752, 0.9945347, 0.95106006, 1.6199398, 2.029869, 1.7003479,
            1.7941115, 1.8854554, 1.4495704, 0.9912012, 1.697803, 1.8733975, 1.6976881, 2.009646,
            1.8933074, 1.1592755, 1.051017, 1.986963, 2.4224575, 3.1384146, 3.0539248, 2.6875799,
            1.7474732, 1.2387981, 1.724395, 2.5225809, 2.7555192, 2.8663156, 2.436682, 1.8050805,
            1.0474718, 1.4241698, 2.533041, 2.848116, 3.4804676, 2.801951, 1.828218, 1.1873275,
            1.3888683, 1.9311265, 2.0177727, 2.3150232, 2.0415728, 1.50582, 1.2501663, 1.2606173,
            1.3515569, 1.8866858, 1.8684678, 1.8662827, 1.3733363, 1.1754476,
        ],
    )
    .unwrap();
    let current_output4: Array3<f32> = conv_layer4.transposed_convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.22876498, 0.75677496, 0.5617529, 0.5566727, 0.7035832, 0.92333794, 0.85647196,
            0.36252776, 0.9373231,
        ],
    )
    .unwrap();

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.01684272, 0.34317794, 0.921993, 0.36392415, 0.7462054, 0.7556754, 0.31284246,
            0.4031665, 0.7376267, 0.7926341, 0.36348057, 0.84374106, 0.03665259, 0.23846498,
            0.82509995, 0.97324103, 0.96826524, 0.77620417, 0.8427075, 0.42989048, 0.76771307,
            0.54514444, 0.7878393, 0.21897991, 0.975659, 0.73295325, 0.69994044, 0.86701024,
            0.76087946, 0.623545, 0.14890751, 0.8610666, 0.21943341, 0.1644093, 0.6089244,
            0.8612485, 0.02602104, 0.30423534, 0.5087405, 0.16869895, 0.3329467, 0.179494,
            0.33126613, 0.11996287, 0.21606164, 0.87119263, 0.33579683, 0.2313126, 0.2576527,
            0.3748985,
        ],
    )
    .unwrap();
    let conv_layer5 = TransposedConvolutionLayer::new(kernel5, 1, Padding::Valid);
    let target_output5: Array3<f32> = Array::from_shape_vec(
        (2, 7, 7),
        vec![
            0.30498645, 0.39238667, 0.78122306, 1.2749089, 1.26518, 1.0702784, 0.72031647,
            0.4833814, 1.1474651, 1.824872, 2.1188776, 2.789912, 2.1763854, 1.4353976, 0.8193742,
            1.7750843, 3.2243726, 2.8081424, 3.6586616, 2.9099042, 2.1959405, 1.3733313, 2.5264835,
            3.874869, 3.6339962, 3.4583616, 2.8793137, 2.047426, 1.3298469, 3.0850043, 4.0151277,
            4.171338, 3.5090218, 2.7657082, 2.0195322, 1.562052, 2.3268692, 3.7601764, 3.3914247,
            3.1270165, 2.1355197, 1.6049427, 0.9586581, 1.0463517, 1.8931208, 1.2852737, 1.9546041,
            0.8600918, 1.2156411, 0.98197174, 1.5291002, 1.9540753, 2.0376854, 2.019803, 1.7136072,
            1.1645759, 1.2563776, 2.0293005, 3.25165, 3.1815333, 2.8842824, 2.5087385, 1.7321055,
            1.7219678, 2.9213178, 3.9362054, 3.8385599, 3.688613, 2.7472277, 2.0557709, 1.4974328,
            2.5192332, 2.8355145, 2.7420092, 2.6601727, 2.0084872, 1.6621959, 1.9365735, 2.219101,
            3.3061202, 2.272919, 2.3496222, 2.0435445, 1.3825214, 1.5844263, 1.888617, 2.6445997,
            1.8216094, 1.9568973, 1.5067427, 1.3629752, 1.5604497, 1.4177297, 1.9507351, 1.4335773,
            1.4456086, 1.1917126, 1.1656986,
        ],
    )
    .unwrap();
    let current_output5: Array3<f32> = conv_layer5.transposed_convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.423247, 0.8179498, 0.92175007, 0.21606776, 0.19149332, 0.4240341, 0.14780204,
            0.46443272, 0.00207204,
        ],
    )
    .unwrap();

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.359202, 0.9019851, 0.21363449, 0.6390296, 0.5977058, 0.81350476, 0.3685356,
            0.90738845, 0.7828945, 0.9812083, 0.6726924, 0.46724817, 0.17302093, 0.39839587,
            0.78055173, 0.8576361, 0.7335981, 0.52934057, 0.9529279, 0.78965247, 0.46750203,
            0.08403921, 0.73126566, 0.34934825, 0.3459232, 0.54770446, 0.68714255, 0.29283327,
            0.53392637, 0.8850151, 0.6909357, 0.44388366, 0.9043074, 0.9949724, 0.64743847,
            0.36691284, 0.5396585, 0.5372604, 0.47547424, 0.44373918, 0.34716287, 0.21774843,
            0.9437953, 0.51856595, 0.15765554, 0.9350713, 0.86233217, 0.81734437, 0.6566154,
            0.3879487,
        ],
    )
    .unwrap();
    let conv_layer6 = TransposedConvolutionLayer::new(kernel6, 1, Padding::Valid);
    let target_output6: Array3<f32> = Array::from_shape_vec(
        (2, 7, 7),
        vec![
            0.44052112, 0.9640616, 1.447783, 1.5651045, 1.2610788, 1.3664088, 0.83942527,
            0.71041536, 1.3735522, 2.0950284, 2.2631993, 2.5226402, 2.1981292, 1.4463664,
            0.80206794, 1.5720297, 2.426775, 1.7240447, 2.2364674, 2.0929503, 1.4252678, 0.9170667,
            1.9625484, 2.6221676, 2.6562219, 2.7188902, 2.5884786, 1.3493658, 0.7710916, 1.4106715,
            1.9601475, 1.8704935, 2.2730043, 1.8120757, 0.9438015, 0.5162624, 0.90291315,
            1.0815443, 0.92784864, 1.3005922, 0.8715824, 0.43680936, 0.3575877, 0.51803434,
            0.43657172, 0.6799221, 0.5033821, 0.44987184, 0.2892067, 0.81322736, 1.3202388,
            1.7722487, 1.6802924, 1.6626372, 1.7974577, 1.3971758, 0.99219084, 1.5877874,
            2.3912034, 2.6141717, 2.9204602, 2.4239786, 1.5534661, 0.9669486, 1.6940897, 2.525343,
            2.5122511, 2.7466233, 2.3406565, 1.2667994, 0.90974844, 1.5309005, 2.1952298, 2.776,
            2.9166534, 1.7776992, 0.91623414, 1.1064204, 2.0749307, 3.2182314, 3.028749, 2.857169,
            1.9611228, 1.0067756, 0.8347632, 1.1402125, 1.5609915, 1.7608864, 1.403652, 1.0084249,
            0.74624324, 0.71961856, 1.1431453, 1.104651, 1.0598505, 0.94539994, 0.7629497,
            0.5822169,
        ],
    )
    .unwrap();
    let current_output6: Array3<f32> = conv_layer6.transposed_convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.06870039, 0.78543746, 0.47194287, 0.12733267, 0.6111727, 0.25675833, 0.74741316,
            0.45714313, 0.9649919, 0.57969916, 0.5208711, 0.93666834,
        ],
    )
    .unwrap();

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (3, 2, 4, 4),
        vec![
            0.13247305, 0.7087714, 0.17877895, 0.40767, 0.6906785, 0.9675369, 0.224454, 0.28950995,
            0.75431514, 0.99582964, 0.8120864, 0.9536324, 0.7703749, 0.683158, 0.16371861,
            0.42877796, 0.7300311, 0.9456737, 0.05700503, 0.19623296, 0.44457257, 0.5512328,
            0.15101007, 0.25140873, 0.2031063, 0.5537751, 0.3641559, 0.701937, 0.27669305,
            0.85076064, 0.00186597, 0.3316532, 0.15485734, 0.35000807, 0.42372492, 0.03995521,
            0.5067197, 0.38907993, 0.37287286, 0.21294773, 0.8646356, 0.10154326, 0.75313085,
            0.7910046, 0.15368015, 0.25977603, 0.40315583, 0.635939, 0.25689796, 0.13678746,
            0.43744904, 0.6658951, 0.564682, 0.70429957, 0.67241764, 0.15790685, 0.25059524,
            0.6432024, 0.60438925, 0.45131883, 0.96080875, 0.40131757, 0.60942906, 0.7035094,
            0.6473561, 0.05433872, 0.7478619, 0.24740443, 0.35665986, 0.00020906, 0.23741227,
            0.57013196, 0.6398819, 0.7132858, 0.90739846, 0.8246988, 0.1319153, 0.6876462,
            0.846729, 0.18134636, 0.9026019, 0.54676574, 0.33139232, 0.83673465, 0.05539654,
            0.5554673, 0.9149804, 0.9791666, 0.9000323, 0.6329186, 0.30872977, 0.30553624,
            0.04431259, 0.5287215, 0.3358437, 0.72178566,
        ],
    )
    .unwrap();
    let conv_layer7 = TransposedConvolutionLayer::new(kernel7, 1, Padding::Valid);
    let target_output7: Array3<f32> = Array::from_shape_vec(
        (2, 5, 5),
        vec![
            1.4554874, 1.5611751, 2.3980436, 1.7009678, 1.2009267, 1.9438167, 3.229282, 3.1511812,
            3.1050105, 1.6415324, 2.8152564, 4.1324425, 4.15003, 4.443236, 2.8254774, 2.3367255,
            4.3254013, 5.0638156, 4.8115783, 2.5877357, 1.2741948, 1.8937037, 2.3965144, 2.4974253,
            1.2422224, 1.9300785, 2.690698, 2.537825, 2.4290133, 1.6620697, 2.2877114, 4.2717066,
            4.3135524, 4.2760324, 2.7706835, 2.5482647, 4.081961, 4.474117, 4.021328, 2.717592,
            2.2528563, 4.210764, 4.3681355, 3.7933898, 2.2933388, 1.723698, 2.3447342, 2.2702456,
            2.5036113, 1.8918209,
        ],
    )
    .unwrap();
    let current_output7: Array3<f32> = conv_layer7.transposed_convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.07464863, 0.867838, 0.5849202, 0.14913943, 0.18325551, 0.40498126, 0.75359416,
            0.01821492, 0.5917236, 0.91982275, 0.5287654, 0.7151285,
        ],
    )
    .unwrap();

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (3, 2, 4, 4),
        vec![
            0.38420153, 0.517026, 0.5150141, 0.26934662, 0.7356045, 0.97902703, 0.6362754,
            0.27803296, 0.32063982, 0.83432084, 0.78711736, 0.28247103, 0.7812688, 0.5270146,
            0.4719829, 0.47535485, 0.23715672, 0.4404677, 0.90286416, 0.66611385, 0.02649495,
            0.3193976, 0.16608049, 0.5121102, 0.17436478, 0.313714, 0.47244504, 0.9906781,
            0.9064671, 0.29454133, 0.99321055, 0.12515199, 0.17643407, 0.16320723, 0.48754972,
            0.53866875, 0.6358971, 0.8935865, 0.82249755, 0.92702305, 0.10556214, 0.28283548,
            0.14977625, 0.53714937, 0.06378802, 0.4497216, 0.79292244, 0.5300166, 0.687625,
            0.4744624, 0.73655206, 0.42605233, 0.6592577, 0.3237799, 0.42867732, 0.87574345,
            0.70010746, 0.01496939, 0.78416556, 0.61210716, 0.98323476, 0.9316805, 0.05175687,
            0.70876056, 0.52122, 0.68573385, 0.415587, 0.87644994, 0.73337436, 0.5451011,
            0.20423086, 0.5554448, 0.48578474, 0.2764571, 0.9192946, 0.8920509, 0.34320405,
            0.4283556, 0.3897719, 0.06360459, 0.729173, 0.19460331, 0.8634254, 0.6576018,
            0.9657459, 0.22873744, 0.47843248, 0.22157177, 0.9162307, 0.02157675, 0.44649428,
            0.2792192, 0.685827, 0.75294507, 0.7919586, 0.22560763,
        ],
    )
    .unwrap();
    let conv_layer8 = TransposedConvolutionLayer::new(kernel8, 1, Padding::Valid);
    let target_output8: Array3<f32> = Array::from_shape_vec(
        (2, 5, 5),
        vec![
            1.257218, 2.2463632, 2.4070354, 2.5518873, 2.1458657, 2.1264756, 4.2389164, 4.378653,
            3.890038, 2.6921687, 2.5157788, 4.1133676, 4.2629457, 4.5353446, 2.6265562, 1.6848452,
            3.5270212, 3.719115, 3.9665143, 2.2633126, 1.5743117, 2.1245708, 2.3606186, 1.9624524,
            1.013821, 1.3761046, 2.1908994, 2.2676086, 3.1938684, 2.1564205, 2.5376356, 3.4851797,
            3.5468984, 3.712494, 2.3811903, 2.5073543, 3.375832, 2.4325347, 3.7419167, 2.4161732,
            2.5686483, 4.155044, 3.8445375, 4.277447, 1.7626629, 2.4347336, 2.7169986, 2.4389846,
            2.242958, 0.99383473,
        ],
    )
    .unwrap();
    let current_output8: Array3<f32> = conv_layer8.transposed_convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.00003577, 0.9737877, 0.9146247, 0.13869576, 0.7059647, 0.0936791, 0.2647747, 0.52025,
            0.0330946, 0.17754778, 0.41998118, 0.02919354,
        ],
    )
    .unwrap();

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (3, 2, 4, 4),
        vec![
            0.82382417, 0.4156855, 0.49590722, 0.69720376, 0.7155315, 0.40795937, 0.15397236,
            0.02265206, 0.7090415, 0.75877124, 0.67035425, 0.39483562, 0.86222315, 0.9993058,
            0.84902793, 0.26427644, 0.86764544, 0.24274233, 0.69865257, 0.5739991, 0.7620597,
            0.29289714, 0.88402116, 0.8942853, 0.7757528, 0.16431308, 0.48939565, 0.56055367,
            0.46453193, 0.9573795, 0.8899508, 0.16098963, 0.63514715, 0.810474, 0.29953358,
            0.46075395, 0.02808736, 0.59781086, 0.8855644, 0.61877847, 0.9537467, 0.6197168,
            0.3379795, 0.13108306, 0.30692965, 0.33537498, 0.01351478, 0.45529485, 0.6626128,
            0.9497022, 0.7403127, 0.06039312, 0.08292098, 0.80679554, 0.1354166, 0.2560622,
            0.80891573, 0.97702754, 0.4124968, 0.4359102, 0.8733311, 0.1396195, 0.52047473,
            0.88564533, 0.29781443, 0.21130918, 0.83071965, 0.3337948, 0.9783562, 0.42070097,
            0.55396014, 0.16172563, 0.7634967, 0.36205766, 0.48491392, 0.4980414, 0.6001484,
            0.65126085, 0.3691911, 0.11615072, 0.26983073, 0.8690525, 0.7446416, 0.471613,
            0.72900707, 0.842964, 0.21457537, 0.938401, 0.41665936, 0.05351101, 0.43856344,
            0.7253113, 0.8520324, 0.4151233, 0.35101932, 0.7388761,
        ],
    )
    .unwrap();
    let conv_layer9 = TransposedConvolutionLayer::new(kernel9, 1, Padding::Valid);
    let target_output9: Array3<f32> = Array::from_shape_vec(
        (2, 5, 5),
        vec![
            0.8175756, 1.8530788, 1.1165001, 1.3541071, 1.1406546, 1.4582684, 2.805307, 2.8980136,
            2.2814646, 0.8141886, 2.130674, 2.5746822, 2.4630213, 1.989594, 1.1742731, 1.8175617,
            3.219531, 2.8457289, 2.4661293, 0.8174193, 1.4812274, 1.9323918, 1.6265631, 0.90590966,
            0.6362106, 1.1508901, 2.328257, 1.7010963, 1.6143123, 1.3224926, 1.8391776, 3.4623122,
            2.988223, 3.040478, 1.8603895, 2.284154, 3.276501, 2.6604097, 3.0781546, 1.6742663,
            2.4175951, 2.443978, 3.345972, 3.5295575, 1.3707731, 1.6880939, 2.3047554, 1.9908895,
            1.7706604, 1.1788039,
        ],
    )
    .unwrap();
    let current_output9: Array3<f32> = conv_layer9.transposed_convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.9965808, 0.3117034, 0.8605703, 0.94308543, 0.8192489, 0.31478795, 0.750324,
            0.36604244, 0.78454614, 0.039194, 0.23696694, 0.2418382,
        ],
    )
    .unwrap();

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (3, 2, 6, 6),
        vec![
            0.24788351, 0.5622223, 0.15428482, 0.50688076, 0.37682602, 0.44385925, 0.00051633,
            0.53422695, 0.5675659, 0.53845215, 0.2130759, 0.86445093, 0.432881, 0.6255918,
            0.3942565, 0.07226853, 0.09869356, 0.32627374, 0.8543963, 0.85603166, 0.25422713,
            0.24929269, 0.36793318, 0.39957172, 0.9079535, 0.865758, 0.82237726, 0.60374194,
            0.7658025, 0.0215734, 0.473204, 0.6594781, 0.86392707, 0.8566667, 0.48541847,
            0.54855824, 0.5860555, 0.158874, 0.10558709, 0.19664533, 0.39609066, 0.27843866,
            0.49128443, 0.75033015, 0.35650545, 0.4687038, 0.6159849, 0.2547001, 0.17250927,
            0.07203952, 0.8724657, 0.14018923, 0.12091745, 0.4770398, 0.43290496, 0.6356798,
            0.7619444, 0.2383507, 0.95481586, 0.49641547, 0.7066018, 0.10666513, 0.06810815,
            0.79673207, 0.29373887, 0.55241185, 0.23906927, 0.18915932, 0.02753429, 0.1438574,
            0.5419741, 0.71984386, 0.12837073, 0.55637455, 0.14355855, 0.10225686, 0.8755492,
            0.62895286, 0.21388301, 0.30016333, 0.49605927, 0.8245107, 0.4528765, 0.6836941,
            0.28745723, 0.5031258, 0.26911622, 0.92149794, 0.7165893, 0.04745785, 0.55642486,
            0.34654748, 0.83168656, 0.8410765, 0.7668131, 0.84094906, 0.6012723, 0.9256995,
            0.66010624, 0.43380973, 0.62281454, 0.45852852, 0.61445725, 0.524579, 0.06486581,
            0.14233574, 0.13930365, 0.5838787, 0.45914945, 0.30819193, 0.70949817, 0.8803759,
            0.6927248, 0.50569826, 0.7358748, 0.58652496, 0.85065925, 0.3247378, 0.6760192,
            0.4483504, 0.59195757, 0.37883574, 0.7796499, 0.32748002, 0.44507304, 0.7488422,
            0.14428215, 0.8785777, 0.15468395, 0.6638725, 0.30651525, 0.9492515, 0.55669755,
            0.08302987, 0.45890567, 0.05946975, 0.9099885, 0.30235246, 0.24214035, 0.42138377,
            0.38782486, 0.21880285, 0.9182205, 0.85290706, 0.5070326, 0.5272234, 0.71761, 0.560904,
            0.22129431, 0.2624427, 0.6557088, 0.00633, 0.6603214, 0.45500925, 0.6523986,
            0.14666249, 0.32440838, 0.2805719, 0.42671442, 0.74477625, 0.9118973, 0.5335283,
            0.36968935, 0.5693756, 0.36426732, 0.11819325, 0.95361024, 0.13343851, 0.5940242,
            0.7282295, 0.9320007, 0.46956548, 0.5087874, 0.7952918, 0.73709416, 0.3358689,
            0.03185032, 0.27057356, 0.26166973, 0.5843129, 0.5337139, 0.19571388, 0.1192536,
            0.75616854, 0.97167397, 0.71154076, 0.26672947, 0.07128377, 0.3383284, 0.8008563,
            0.9504947, 0.5971434, 0.7847773, 0.92326206, 0.24163638, 0.12968542, 0.5954836,
            0.6734995, 0.08627631, 0.7485715, 0.8782484, 0.6863155, 0.7264353, 0.08944888,
            0.68172634, 0.4284322, 0.48237634, 0.6856524, 0.04009921, 0.0687674, 0.9063645,
            0.42620143, 0.61030614, 0.10040135, 0.50107217, 0.763057,
        ],
    )
    .unwrap();
    let conv_layer10 = TransposedConvolutionLayer::new(kernel10, 1, Padding::Valid);
    let target_output10: Array3<f32> = Array::from_shape_vec(
        (2, 7, 7),
        vec![
            1.0076871, 1.8249818, 1.4631095, 1.4080774, 1.7363088, 1.8229457, 0.6043186, 1.3776557,
            2.5637689, 3.2809448, 3.2031517, 3.4828935, 3.6743798, 1.4604018, 1.4954137, 2.6753988,
            3.202561, 3.9596734, 3.597752, 3.1485496, 1.4962249, 2.5201416, 3.8716507, 3.3607588,
            3.146861, 3.7721033, 2.8617082, 1.1062949, 3.3615446, 5.176237, 4.9400415, 3.5897307,
            3.9629579, 3.5982466, 1.1568514, 3.184228, 4.8102074, 4.3359556, 3.9301968, 3.471942,
            3.570858, 1.0158986, 1.3006275, 2.147861, 1.9525694, 2.0120335, 1.7674056, 1.8783911,
            1.130064, 2.2605438, 1.7941033, 1.8158605, 2.6530077, 2.974249, 2.5112355, 1.1554775,
            3.1586676, 3.8252296, 3.5819912, 4.0323296, 4.8561993, 4.063066, 1.7453182, 3.1923208,
            4.158856, 4.722089, 3.4843996, 4.0029335, 4.4553757, 1.8411613, 2.2775095, 4.140107,
            4.7837076, 4.085807, 3.8269317, 4.1997175, 2.22554, 3.0779648, 3.6798668, 3.8620834,
            4.300324, 4.102832, 4.4623656, 1.9889328, 3.216652, 3.226627, 2.6657476, 2.6791961,
            4.5687933, 4.7123694, 2.0526574, 1.4838095, 1.9948564, 1.7766328, 1.5088985, 2.3957605,
            3.2902775, 2.0572221,
        ],
    )
    .unwrap();
    let current_output10: Array3<f32> = conv_layer10.transposed_convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.7770131, 0.23345616, 0.62762326, 0.15315741, 0.73589575, 0.2752067, 0.85641515,
            0.7439484, 0.6581306, 0.4056261, 0.13899311, 0.26460668,
        ],
    )
    .unwrap();

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (3, 2, 6, 6),
        vec![
            0.9179794, 0.96651816, 0.89336777, 0.18948041, 0.9371178, 0.7124811, 0.9657549,
            0.6203675, 0.32684848, 0.11439406, 0.07654371, 0.95680344, 0.9728639, 0.6055871,
            0.00439729, 0.8525613, 0.3167563, 0.13499211, 0.68338645, 0.7955047, 0.21689218,
            0.2826704, 0.12328367, 0.6890043, 0.5906649, 0.41700745, 0.30266365, 0.5716598,
            0.12726787, 0.35587692, 0.16889893, 0.3114892, 0.1309899, 0.24026695, 0.55435276,
            0.34375766, 0.4225387, 0.37165096, 0.6202945, 0.6069533, 0.05756181, 0.0153275,
            0.8497578, 0.79796964, 0.4071996, 0.19325097, 0.04944435, 0.59729165, 0.39304134,
            0.679002, 0.6126854, 0.67232877, 0.7156292, 0.09058711, 0.33372015, 0.8941644,
            0.30899736, 0.3348802, 0.6412177, 0.26750943, 0.03709449, 0.56803024, 0.8756273,
            0.5771133, 0.56024176, 0.5868575, 0.75167763, 0.36936092, 0.37185487, 0.35425207,
            0.24336162, 0.01027582, 0.2671537, 0.83992416, 0.49819484, 0.7831867, 0.70054483,
            0.8701863, 0.49413827, 0.84670645, 0.8069649, 0.093459, 0.93408287, 0.8206956,
            0.70209366, 0.32817394, 0.744203, 0.39091238, 0.43911496, 0.92919487, 0.29325068,
            0.62813336, 0.8131431, 0.19520658, 0.47931832, 0.42483747, 0.47526902, 0.28184402,
            0.09741595, 0.45691565, 0.44086096, 0.9638409, 0.33859608, 0.26381832, 0.29839757,
            0.68755937, 0.09156765, 0.58584654, 0.04617033, 0.14705709, 0.81179595, 0.16751295,
            0.06864621, 0.6308731, 0.38993102, 0.3644169, 0.68174505, 0.272409, 0.23609333,
            0.21866773, 0.80119157, 0.01742986, 0.49270406, 0.37920174, 0.90869635, 0.8191268,
            0.7636344, 0.7827788, 0.9694966, 0.79533535, 0.00732174, 0.8372113, 0.9449071,
            0.7670253, 0.50964797, 0.7843069, 0.7365313, 0.71123123, 0.89694643, 0.9544987,
            0.16811895, 0.97018677, 0.25394833, 0.5585159, 0.51973414, 0.4357872, 0.29419306,
            0.5180376, 0.80581653, 0.7190028, 0.52249014, 0.5252596, 0.33191478, 0.3388958,
            0.18619475, 0.6839338, 0.72234726, 0.25884646, 0.7980101, 0.36219832, 0.7046317,
            0.9284394, 0.468965, 0.23158234, 0.32747796, 0.9097073, 0.7440483, 0.03255624,
            0.30697423, 0.6246821, 0.1907446, 0.9843364, 0.4038572, 0.5747709, 0.65160054,
            0.6822517, 0.9840877, 0.18341686, 0.5288406, 0.92906404, 0.87780553, 0.9090181,
            0.82569945, 0.20383635, 0.7166643, 0.17061436, 0.91526777, 0.08598401, 0.70100874,
            0.40537685, 0.5971982, 0.92796123, 0.15859716, 0.7859081, 0.8564488, 0.35816404,
            0.79062706, 0.9644883, 0.13154314, 0.31929043, 0.80048305, 0.07180241, 0.52815664,
            0.45786336, 0.91537887, 0.9783313, 0.25753945, 0.42799363, 0.07738555, 0.9294206,
            0.07022415, 0.60058224, 0.6196278, 0.9008346, 0.04155485, 0.82207745,
        ],
    )
    .unwrap();
    let conv_layer11 = TransposedConvolutionLayer::new(kernel11, 1, Padding::Valid);
    let target_output11: Array3<f32> = Array::from_shape_vec(
        (2, 7, 7),
        vec![
            1.6647575, 2.5673723, 2.3007798, 1.9423352, 2.6567419, 2.8184273, 1.1102858, 2.7479098,
            4.300397, 3.9864357, 2.6735065, 3.5209846, 4.731066, 2.0862277, 3.2627602, 3.849853,
            3.632057, 3.0680177, 2.9499724, 4.447485, 2.0147302, 2.7805448, 3.635637, 3.0041945,
            3.4677672, 3.029784, 3.3159416, 1.6614207, 2.1687937, 3.264913, 2.8019738, 3.2117555,
            2.7809289, 3.464909, 1.4245024, 2.0424817, 2.810124, 2.5426564, 2.7942855, 2.7802138,
            3.6746526, 1.9548004, 0.8993769, 1.3792734, 1.3118737, 1.6804029, 1.5095156, 1.5523965,
            1.1471504, 1.9349661, 2.457621, 3.11371, 2.427143, 1.8323412, 1.9064416, 1.2413652,
            2.971293, 3.433587, 4.2020354, 3.6495595, 2.3507152, 3.3726, 2.0878167, 2.9888167,
            3.9164824, 4.2322927, 3.8241384, 3.8024087, 4.0731072, 2.1324615, 2.857672, 4.065869,
            4.2794666, 4.034864, 3.989476, 4.373455, 2.3520122, 3.2032979, 5.214639, 4.899683,
            4.633063, 3.6914995, 4.1428523, 2.489666, 3.2450454, 4.9306874, 4.346266, 4.636256,
            3.8916667, 3.8593884, 2.3494549, 2.2446504, 2.9286928, 2.3840353, 2.519372, 2.3853533,
            1.8311875, 1.6295688,
        ],
    )
    .unwrap();
    let current_output11: Array3<f32> = conv_layer11.transposed_convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.3109271, 0.47614527, 0.7615821, 0.35893062, 0.07713356, 0.6123928, 0.62511915,
            0.88098776, 0.21521498, 0.89468116, 0.1842307, 0.10784956,
        ],
    )
    .unwrap();

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (3, 2, 6, 6),
        vec![
            0.8354833, 0.2630701, 0.7184675, 0.06132602, 0.06056971, 0.71349823, 0.00944792,
            0.07349233, 0.35231608, 0.8533961, 0.17608605, 0.18067755, 0.51991457, 0.19053963,
            0.5045173, 0.7456122, 0.27621788, 0.48649722, 0.39297876, 0.54849166, 0.3746991,
            0.8194284, 0.34880427, 0.79505837, 0.41293454, 0.890512, 0.12076204, 0.20799449,
            0.88948244, 0.24437675, 0.7731474, 0.65954226, 0.4922565, 0.5211581, 0.97382414,
            0.9779564, 0.1754263, 0.4551989, 0.81067127, 0.7095975, 0.5087082, 0.78796804,
            0.03310984, 0.20805901, 0.45704818, 0.9133983, 0.5689028, 0.04247752, 0.55938286,
            0.9835293, 0.04525762, 0.7176199, 0.82096803, 0.5575717, 0.5744108, 0.9780689,
            0.34563604, 0.3324931, 0.8797563, 0.14932355, 0.1134909, 0.5645703, 0.30096474,
            0.4096875, 0.5703153, 0.88738924, 0.6242374, 0.77620894, 0.681929, 0.24701218,
            0.74485576, 0.61556435, 0.63869125, 0.05875124, 0.3210932, 0.96946657, 0.09463912,
            0.6275637, 0.34162354, 0.74390864, 0.8736778, 0.9513908, 0.24045336, 0.7003475,
            0.87750345, 0.16564246, 0.6314963, 0.21785556, 0.7654987, 0.13988015, 0.03287261,
            0.82226163, 0.60896695, 0.13331373, 0.62307173, 0.23316076, 0.9600204, 0.55291533,
            0.29808274, 0.8765127, 0.98263544, 0.27148733, 0.11101003, 0.2754741, 0.4540411,
            0.19701396, 0.08459944, 0.98017716, 0.9800813, 0.62585706, 0.18621969, 0.5836321,
            0.17965508, 0.81336415, 0.94554824, 0.28304926, 0.32718146, 0.46701643, 0.91682273,
            0.6142979, 0.19277428, 0.28408903, 0.25507236, 0.9800453, 0.36125833, 0.96792,
            0.33258557, 0.9508625, 0.8424581, 0.8130291, 0.7774976, 0.17691322, 0.9389267,
            0.22419459, 0.33442205, 0.7614585, 0.37563834, 0.70754576, 0.1499497, 0.9873837,
            0.7166968, 0.40278858, 0.22288306, 0.3279577, 0.07722609, 0.598755, 0.8143903,
            0.87905455, 0.83061284, 0.9923988, 0.6196494, 0.536406, 0.06662867, 0.83588266,
            0.28182983, 0.662181, 0.99850965, 0.60448396, 0.12318801, 0.91713256, 0.8540598,
            0.19103892, 0.5929614, 0.9118344, 0.9381113, 0.3421722, 0.8149188, 0.9595595,
            0.02717085, 0.8916309, 0.9755575, 0.27588442, 0.59208006, 0.00008138, 0.9552037,
            0.12578069, 0.01249961, 0.05413999, 0.5153533, 0.40144867, 0.8698811, 0.6468678,
            0.8840439, 0.34315115, 0.52290094, 0.66408885, 0.98115784, 0.85046166, 0.7979905,
            0.9444794, 0.6930413, 0.90735817, 0.91156703, 0.45996496, 0.9045769, 0.17170428,
            0.43418503, 0.69308424, 0.42869946, 0.9244341, 0.41451567, 0.6224708, 0.00536506,
            0.33826837, 0.47926104, 0.0032256, 0.02230139, 0.35960108, 0.48593593, 0.86064774,
            0.28908366, 0.4153976, 0.3468706, 0.2242362, 0.93169004, 0.3198661,
        ],
    )
    .unwrap();
    let conv_layer12 = TransposedConvolutionLayer::new(kernel12, 1, Padding::Valid);
    let target_output12: Array3<f32> = Array::from_shape_vec(
        (2, 7, 7),
        vec![
            0.8832699, 1.6308331, 1.6779711, 2.1079926, 2.1718717, 1.871372, 2.1695356, 1.7700315,
            2.7396529, 2.828042, 3.281909, 3.6575952, 2.6067796, 2.5809703, 1.3367548, 3.4290154,
            3.089033, 4.042789, 3.7662816, 3.1280265, 1.7990987, 1.9384062, 3.1529675, 3.5846915,
            3.910673, 3.072146, 3.6648433, 2.2559147, 1.1949773, 3.2115555, 4.2469296, 3.4047177,
            3.1737669, 3.8995965, 1.4345701, 1.9317565, 4.2867265, 2.7045894, 2.4384434, 3.6724355,
            3.6049006, 2.309582, 1.3917983, 1.7336063, 1.7116218, 1.6656854, 1.8135519, 2.4687383,
            1.8154495, 0.49099547, 1.9646553, 1.8090765, 1.8041183, 1.4605012, 1.4443703,
            1.6410754, 1.3745581, 3.7931347, 3.2272146, 3.3477142, 3.5382571, 3.5100536, 2.452867,
            1.3556771, 3.243108, 2.5712512, 3.1963043, 3.6209095, 3.24159, 2.3062577, 1.1846195,
            3.091062, 3.3238533, 3.0543709, 3.791985, 3.023494, 1.7833287, 1.1088425, 3.479989,
            2.8615038, 2.592303, 3.527402, 2.9136536, 2.0454068, 1.203184, 2.718556, 2.7043824,
            2.663023, 2.8031945, 3.6486137, 1.988428, 0.7960446, 1.8458897, 2.3981907, 1.5684403,
            1.519581, 1.4705778, 0.71801114,
        ],
    )
    .unwrap();
    let current_output12: Array3<f32> = conv_layer12.transposed_convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );
}
