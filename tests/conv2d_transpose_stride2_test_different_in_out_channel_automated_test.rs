// This file has been automatically generated by Jinja2 via the
// script /Users/almico/projects/convolutions-rs/scripts/generate_tests.py.
// Please do not change this file by hand.
#[allow(unused_imports)]
use convolutions_rs::convolutions::*;
#[allow(unused_imports)]
use convolutions_rs::transposed_convolutions::*;
#[allow(unused_imports)]
use convolutions_rs::Padding;
#[allow(unused_imports)]
use ndarray::{array, Array, Array3, Array4, Dimension};

fn arr_allclose<D: Dimension>(current: &Array<f32, D>, target: &Array<f32, D>) -> bool {
    assert_eq!(
        current.shape(),
        target.shape(),
        "\ngiven array had shape {:?}, but target had shape {:?}",
        current.shape(),
        target.shape()
    );
    (current - target).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_conv2d_transpose_stride2() {
    let test_input1 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.17014849, 0.4305688, 0.5715329, 0.06520256, 0.12669589, 0.7501565, 0.9837982,
            0.55574155, 0.04181346,
        ],
    )
    .unwrap();

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 3),
        vec![
            0.23677547, 0.51154923, 0.02844254, 0.60484785, 0.72306335, 0.22177844, 0.16487044,
            0.46672952, 0.54035133, 0.6922357, 0.27845532, 0.66966337, 0.41083884, 0.4583148,
            0.70402896, 0.6177326, 0.9269775, 0.56033564,
        ],
    )
    .unwrap();
    let conv_layer1 = TransposedConvolutionLayer::new(kernel1, 2, Padding::Same);
    let target_output1: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            0.04028699, 0.08703933, 0.10678759, 0.22025715, 0.14757144, 0.29236722, 0.10291395,
            0.12302814, 0.2981639, 0.31132853, 0.44118133, 0.4132545, 0.04349082, 0.11276765,
            0.19478105, 0.26577038, 0.5081095, 0.65049326, 0.03943763, 0.04714558, 0.09109226,
            0.09160915, 0.48182896, 0.5424107, 0.24368927, 0.5336932, 0.21568838, 0.34342188,
            0.21784605, 0.37150982, 0.59504825, 0.7113484, 0.5543243, 0.40183634, 0.14854227,
            0.03023378, 0.11778286, 0.04737875, 0.41199732, 0.11989418, 0.68397164, 0.15914638,
            0.06990361, 0.07798158, 0.29668385, 0.19733606, 0.53794086, 0.261942, 0.1502418,
            0.17587984, 0.49268386, 0.43440676, 1.1984463, 0.7386832, 0.02678775, 0.0298833,
            0.09795609, 0.0580666, 0.39739102, 0.34380785, 0.721298, 0.33438516, 1.1583172,
            0.27219343, 0.93549293, 0.7070214, 0.40418252, 0.4508893, 0.92094266, 0.2547046,
            0.40843675, 0.01916373,
        ],
    )
    .unwrap();
    let current_output1: Array3<f32> = conv_layer1.transposed_convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.9098013, 0.2697065, 0.24242379, 0.7944849, 0.75231165, 0.9692583, 0.12854727,
            0.9148518, 0.3356524,
        ],
    )
    .unwrap();

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 3),
        vec![
            0.37189406, 0.55898565, 0.5888119, 0.44166553, 0.9034325, 0.2795916, 0.7567664,
            0.85028297, 0.96145767, 0.5566679, 0.84558666, 0.0474241, 0.23985276, 0.07658575,
            0.7197864, 0.13313323, 0.69580543, 0.12692,
        ],
    )
    .unwrap();
    let conv_layer2 = TransposedConvolutionLayer::new(kernel2, 2, Padding::Same);
    let target_output2: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            0.3383497, 0.5085659, 0.63600403, 0.15076205, 0.24896234, 0.13551141, 0.40182787,
            0.82194406, 0.37349287, 0.2436616, 0.18247789, 0.21901353, 0.98397124, 1.2176942,
            1.8264227, 0.64985824, 1.246201, 0.74793035, 0.3508966, 0.7177635, 0.5544014,
            0.67966276, 0.638428, 0.87565947, 0.6490454, 0.7473931, 1.7491059, 1.1510668,
            2.1203206, 1.0117687, 0.0567749, 0.11613378, 0.43999922, 0.82650685, 0.40403098,
            0.3032393, 0.5064572, 0.76931584, 0.19328347, 0.2280602, 0.14774014, 0.20499033,
            0.21821836, 0.06967781, 0.7195524, 0.02065567, 0.25227708, 0.01856621, 0.56338906,
            1.3048506, 0.60784435, 0.82380795, 0.64173853, 0.98827165, 0.1905594, 0.06084622,
            0.7523034, 0.05761635, 0.77398294, 0.07423137, 0.1773305, 0.66150475, 0.7163586,
            1.297049, 0.45475686, 0.95823836, 0.03083242, 0.00984489, 0.3119563, 0.0700646,
            0.739005, 0.02570619,
        ],
    )
    .unwrap();
    let current_output2: Array3<f32> = conv_layer2.transposed_convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.38484824, 0.775336, 0.52113837, 0.4364637, 0.14352316, 0.8997107, 0.64410555,
            0.04471071, 0.767672,
        ],
    )
    .unwrap();

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 3),
        vec![
            0.43464628, 0.16569944, 0.18875164, 0.12285258, 0.2781115, 0.5390728, 0.5066572,
            0.97435564, 0.39133722, 0.7964828, 0.988919, 0.35985747, 0.00756764, 0.53660643,
            0.8659267, 0.8576183, 0.81628793, 0.9480399,
        ],
    )
    .unwrap();
    let conv_layer3 = TransposedConvolutionLayer::new(kernel3, 2, Padding::Same);
    let target_output3: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            0.16727285, 0.06376914, 0.40963763, 0.12847275, 0.3728568, 0.08635233, 0.0472796,
            0.10703071, 0.30271325, 0.21562986, 0.48198578, 0.14493456, 0.38469344, 0.44730085,
            0.6882, 0.77923477, 0.9856025, 0.6568557, 0.05362069, 0.12138557, 0.25291792,
            0.03991544, 0.18790121, 0.25021988, 0.50109553, 0.5319988, 0.38453087, 0.14725114,
            0.8541159, 1.003841, 0.07913003, 0.17913315, 0.35271263, 0.01243456, 0.11841282,
            0.2134984, 0.306525, 0.38058373, 0.7560323, 0.76674455, 0.6940882, 0.51536363,
            0.00291239, 0.20651203, 0.33911783, 0.4160503, 0.67532796, 0.2796462, 0.6776887,
            0.74577427, 1.3011721, 0.7748302, 1.9502393, 1.31514, 0.003303, 0.23420924, 0.37903172,
            0.07701545, 0.13108921, 0.48279056, 0.8873383, 0.99324834, 0.8042706, 0.1613715,
            1.5352011, 1.4935884, 0.00487436, 0.34563118, 0.5580866, 0.02399205, 0.04452566,
            0.41193774,
        ],
    )
    .unwrap();
    let current_output3: Array3<f32> = conv_layer3.transposed_convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.45711017, 0.89837223, 0.8462714, 0.70536447, 0.9289133, 0.0067116, 0.65220493,
            0.72789615, 0.00785976,
        ],
    )
    .unwrap();

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.32536873, 0.09833383, 0.1022715, 0.7567798, 0.23972042, 0.38848338, 0.00744711,
            0.8715701, 0.07988323, 0.6283005, 0.8241853, 0.16570753, 0.6487234, 0.14438818,
            0.6286194, 0.34163022, 0.03235205, 0.25922647, 0.59344524, 0.9308157, 0.22162326,
            0.91818297, 0.97700953, 0.18019113, 0.775954, 0.14120784, 0.3426181, 0.5417864,
            0.7768226, 0.34603763, 0.6114103, 0.9716041, 0.5157695, 0.50755495, 0.6659802,
            0.629322, 0.60627973, 0.27978492, 0.28792506, 0.7547703, 0.0509604, 0.10449678,
            0.89887625, 0.6572328, 0.695583, 0.3626411, 0.37613922, 0.9241278, 0.39898983,
            0.6908677,
        ],
    )
    .unwrap();
    let conv_layer4 = TransposedConvolutionLayer::new(kernel4, 2, Padding::Same);
    let target_output4: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            0.00340415, 0.74740624, 0.04320571, 1.3989593, 0.07806715, 1.3020325, 0.14510778,
            1.4113412, 0.8400175, 1.8339033, 0.9735907, 1.3370961, 0.02004138, 1.4010481,
            0.36359853, 2.2028801, 0.6347679, 1.6450813, 0.6007288, 2.172421, 1.728164, 2.7048604,
            1.6257769, 2.2874932, 0.02767703, 1.3514118, 0.5061684, 1.9469028, 0.60968155,
            1.3305748, 0.7557289, 1.9180386, 1.1948013, 2.3450449, 0.27994645, 1.1900197,
            0.44413012, 0.7850375, 1.1048707, 1.2851985, 1.278214, 1.0347791, 0.5188073, 1.2065846,
            1.542484, 1.8772442, 1.4956415, 1.2399138, 0.7331016, 1.3884195, 1.6548519, 2.1215773,
            1.1568679, 2.0076852, 0.82304245, 1.9862912, 2.0426066, 2.8705754, 1.5164229, 2.361851,
            0.7073933, 1.4628037, 1.5989139, 2.1405473, 0.9882976, 1.1409874, 0.6607339, 1.6292672,
            1.2599288, 2.0490475, 0.5874962, 1.199552,
        ],
    )
    .unwrap();
    let current_output4: Array3<f32> = conv_layer4.transposed_convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.5511301, 0.36253917, 0.36786652, 0.88718724, 0.69587743, 0.4870034, 0.7135373,
            0.9862549, 0.22876498,
        ],
    )
    .unwrap();

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.75677496, 0.5617529, 0.5566727, 0.7035832, 0.92333794, 0.85647196, 0.36252776,
            0.9373231, 0.01684272, 0.34317794, 0.921993, 0.36392415, 0.7462054, 0.7556754,
            0.31284246, 0.4031665, 0.7376267, 0.7926341, 0.36348057, 0.84374106, 0.03665259,
            0.23846498, 0.82509995, 0.97324103, 0.96826524, 0.77620417, 0.8427075, 0.42989048,
            0.76771307, 0.54514444, 0.7878393, 0.21897991, 0.975659, 0.73295325, 0.69994044,
            0.86701024, 0.76087946, 0.623545, 0.14890751, 0.8610666, 0.21943341, 0.1644093,
            0.6089244, 0.8612485, 0.02602104, 0.30423534, 0.5087405, 0.16869895, 0.3329467,
            0.179494,
        ],
    )
    .unwrap();
    let conv_layer5 = TransposedConvolutionLayer::new(kernel5, 2, Padding::Same);
    let target_output5: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            0.19979997, 0.8270916, 0.14071304, 0.84401935, 0.13946797, 0.46922523, 0.6989496,
            1.7660103, 1.5635333, 2.3572173, 1.1710206, 1.3015531, 0.72815824, 2.0105886,
            0.73496115, 2.2745132, 0.5913968, 1.2927622, 0.8551257, 2.9152231, 2.6025717,
            3.4730666, 1.9660727, 2.273659, 0.91309005, 2.497284, 1.2053357, 2.8617165, 0.7117095,
            1.5260434, 0.47123653, 2.1992893, 1.927514, 2.621144, 1.6219313, 1.5548685, 0.12068643,
            0.8233377, 0.4833414, 1.0292926, 0.34627965, 0.61266816, 1.1669829, 1.5795159,
            1.6254424, 2.1803734, 1.2785225, 1.1302636, 0.2848871, 1.8289816, 1.3369148, 1.9994199,
            0.98940665, 1.1956586, 1.556728, 2.4320843, 2.4084392, 2.8826084, 1.7319698, 1.6659927,
            0.30211216, 2.1661081, 1.6174569, 2.1955993, 1.4523649, 1.228172, 0.99426395,
            1.6613936, 1.5060792, 1.8525212, 0.80037177, 1.1989392,
        ],
    )
    .unwrap();
    let current_output5: Array3<f32> = conv_layer5.transposed_convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = Array::from_shape_vec(
        (1, 3, 3),
        vec![
            0.33126613, 0.11996287, 0.21606164, 0.87119263, 0.33579683, 0.2313126, 0.2576527,
            0.3748985, 0.30113342,
        ],
    )
    .unwrap();

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.8142977, 0.423247, 0.8179498, 0.92175007, 0.21606776, 0.19149332, 0.4240341,
            0.14780204, 0.46443272, 0.00207204, 0.359202, 0.9019851, 0.21363449, 0.6390296,
            0.5977058, 0.81350476, 0.3685356, 0.90738845, 0.7828945, 0.9812083, 0.6726924,
            0.46724817, 0.17302093, 0.39839587, 0.78055173, 0.8576361, 0.7335981, 0.52934057,
            0.9529279, 0.78965247, 0.46750203, 0.08403921, 0.73126566, 0.34934825, 0.3459232,
            0.54770446, 0.68714255, 0.29283327, 0.53392637, 0.8850151, 0.6909357, 0.44388366,
            0.9043074, 0.9949724, 0.64743847, 0.36691284, 0.5396585, 0.5372604, 0.47547424,
            0.44373918,
        ],
    )
    .unwrap();
    let conv_layer6 = TransposedConvolutionLayer::new(kernel6, 2, Padding::Same);
    let target_output6: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            0.14046814, 0.0719339, 0.20471917, 0.05979151, 0.14733219, 0.03218292, 0.66752684,
            1.0998912, 1.2650405, 0.9524965, 0.6789673, 0.3796177, 0.49149874, 0.59124434,
            0.8505567, 0.7053926, 0.42758414, 0.34864467, 1.049637, 0.96077573, 1.4437952,
            1.7077427, 1.0449883, 0.70846, 0.43031904, 1.1735547, 1.084437, 1.4613031, 0.6499464,
            0.584662, 0.63946205, 0.5663304, 1.0067805, 1.2359725, 0.7530496, 0.59054023,
            0.02783934, 0.29832643, 0.12580884, 0.3033266, 0.06006647, 0.19949639, 0.8667323,
            0.91185904, 1.335827, 1.5107149, 0.70219713, 0.5570449, 0.22025797, 1.176512,
            0.71541995, 1.1273041, 0.35201535, 0.5583656, 0.9664177, 1.1189362, 1.4386897,
            1.9469329, 1.0900364, 0.98967654, 0.4083611, 1.3835183, 1.137384, 1.5315882, 0.5930616,
            0.7764801, 0.64719063, 0.8720484, 0.99062157, 1.1546056, 0.6915823, 0.693254,
        ],
    )
    .unwrap();
    let current_output6: Array3<f32> = conv_layer6.transposed_convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.34716287, 0.21774843, 0.9437953, 0.51856595, 0.15765554, 0.9350713, 0.86233217,
            0.81734437, 0.6566154, 0.3879487, 0.28848994, 0.5814131,
        ],
    )
    .unwrap();

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (3, 2, 4, 4),
        vec![
            0.06870039, 0.78543746, 0.47194287, 0.12733267, 0.6111727, 0.25675833, 0.74741316,
            0.45714313, 0.9649919, 0.57969916, 0.5208711, 0.93666834, 0.13247305, 0.7087714,
            0.17877895, 0.40767, 0.6906785, 0.9675369, 0.224454, 0.28950995, 0.75431514,
            0.99582964, 0.8120864, 0.9536324, 0.7703749, 0.683158, 0.16371861, 0.42877796,
            0.7300311, 0.9456737, 0.05700503, 0.19623296, 0.44457257, 0.5512328, 0.15101007,
            0.25140873, 0.2031063, 0.5537751, 0.3641559, 0.701937, 0.27669305, 0.85076064,
            0.00186597, 0.3316532, 0.15485734, 0.35000807, 0.42372492, 0.03995521, 0.5067197,
            0.38907993, 0.37287286, 0.21294773, 0.8646356, 0.10154326, 0.75313085, 0.7910046,
            0.15368015, 0.25977603, 0.40315583, 0.635939, 0.25689796, 0.13678746, 0.43744904,
            0.6658951, 0.564682, 0.70429957, 0.67241764, 0.15790685, 0.25059524, 0.6432024,
            0.60438925, 0.45131883, 0.96080875, 0.40131757, 0.60942906, 0.7035094, 0.6473561,
            0.05433872, 0.7478619, 0.24740443, 0.35665986, 0.00020906, 0.23741227, 0.57013196,
            0.6398819, 0.7132858, 0.90739846, 0.8246988, 0.1319153, 0.6876462, 0.846729,
            0.18134636, 0.9026019, 0.54676574, 0.33139232, 0.83673465,
        ],
    )
    .unwrap();
    let conv_layer7 = TransposedConvolutionLayer::new(kernel7, 2, Padding::Same);
    let target_output7: Array3<f32> = Array::from_shape_vec(
        (2, 4, 4),
        vec![
            0.59877926, 1.1339555, 1.3889678, 0.7377318, 2.0187097, 2.9198115, 3.5667052,
            1.1107041, 1.2423422, 2.867144, 2.9396644, 1.7618976, 1.3965317, 1.9542112, 2.6022818,
            0.6259612, 0.83007836, 2.2174613, 1.5857909, 1.2330856, 1.9783746, 2.6205616,
            2.4678397, 1.3003106, 1.9420819, 4.2032685, 4.1026344, 2.114283, 1.0671536, 1.3482409,
            1.9717813, 0.90671533,
        ],
    )
    .unwrap();
    let current_output7: Array3<f32> = conv_layer7.transposed_convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.05539654, 0.5554673, 0.9149804, 0.9791666, 0.9000323, 0.6329186, 0.30872977,
            0.30553624, 0.04431259, 0.5287215, 0.3358437, 0.72178566,
        ],
    )
    .unwrap();

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (3, 2, 4, 4),
        vec![
            0.72704846, 0.85191244, 0.07464863, 0.867838, 0.5849202, 0.14913943, 0.18325551,
            0.40498126, 0.75359416, 0.01821492, 0.5917236, 0.91982275, 0.5287654, 0.7151285,
            0.38420153, 0.517026, 0.5150141, 0.26934662, 0.7356045, 0.97902703, 0.6362754,
            0.27803296, 0.32063982, 0.83432084, 0.78711736, 0.28247103, 0.7812688, 0.5270146,
            0.4719829, 0.47535485, 0.23715672, 0.4404677, 0.90286416, 0.66611385, 0.02649495,
            0.3193976, 0.16608049, 0.5121102, 0.17436478, 0.313714, 0.47244504, 0.9906781,
            0.9064671, 0.29454133, 0.99321055, 0.12515199, 0.17643407, 0.16320723, 0.48754972,
            0.53866875, 0.6358971, 0.8935865, 0.82249755, 0.92702305, 0.10556214, 0.28283548,
            0.14977625, 0.53714937, 0.06378802, 0.4497216, 0.79292244, 0.5300166, 0.687625,
            0.4744624, 0.73655206, 0.42605233, 0.6592577, 0.3237799, 0.42867732, 0.87574345,
            0.70010746, 0.01496939, 0.78416556, 0.61210716, 0.98323476, 0.9316805, 0.05175687,
            0.70876056, 0.52122, 0.68573385, 0.415587, 0.87644994, 0.73337436, 0.5451011,
            0.20423086, 0.5554448, 0.48578474, 0.2764571, 0.9192946, 0.8920509, 0.34320405,
            0.4283556, 0.3897719, 0.06360459, 0.729173, 0.19460331,
        ],
    )
    .unwrap();
    let conv_layer8 = TransposedConvolutionLayer::new(kernel8, 2, Padding::Same);
    let target_output8: Array3<f32> = Array::from_shape_vec(
        (2, 4, 4),
        vec![
            0.5079839, 0.8547796, 1.1754411, 0.582313, 2.0479946, 3.8417017, 3.6647139, 1.9792918,
            0.77233976, 2.5423992, 2.464128, 1.3387, 0.5280905, 2.5997248, 2.0077863, 1.5660393,
            0.8743659, 1.1162835, 1.347874, 0.50176203, 1.245729, 3.2028608, 3.8371253, 2.0997093,
            1.2333205, 3.1452916, 2.993131, 1.6493182, 0.72387916, 2.3298166, 1.8494854, 1.0322015,
        ],
    )
    .unwrap();
    let current_output8: Array3<f32> = conv_layer8.transposed_convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.8634254, 0.6576018, 0.9657459, 0.22873744, 0.47843248, 0.22157177, 0.9162307,
            0.02157675, 0.44649428, 0.2792192, 0.685827, 0.75294507,
        ],
    )
    .unwrap();

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (3, 2, 4, 4),
        vec![
            0.7919586, 0.22560763, 0.88778716, 0.80092114, 0.00003577, 0.9737877, 0.9146247,
            0.13869576, 0.7059647, 0.0936791, 0.2647747, 0.52025, 0.0330946, 0.17754778,
            0.41998118, 0.02919354, 0.82382417, 0.4156855, 0.49590722, 0.69720376, 0.7155315,
            0.40795937, 0.15397236, 0.02265206, 0.7090415, 0.75877124, 0.67035425, 0.39483562,
            0.86222315, 0.9993058, 0.84902793, 0.26427644, 0.86764544, 0.24274233, 0.69865257,
            0.5739991, 0.7620597, 0.29289714, 0.88402116, 0.8942853, 0.7757528, 0.16431308,
            0.48939565, 0.56055367, 0.46453193, 0.9573795, 0.8899508, 0.16098963, 0.63514715,
            0.810474, 0.29953358, 0.46075395, 0.02808736, 0.59781086, 0.8855644, 0.61877847,
            0.9537467, 0.6197168, 0.3379795, 0.13108306, 0.30692965, 0.33537498, 0.01351478,
            0.45529485, 0.6626128, 0.9497022, 0.7403127, 0.06039312, 0.08292098, 0.80679554,
            0.1354166, 0.2560622, 0.80891573, 0.97702754, 0.4124968, 0.4359102, 0.8733311,
            0.1396195, 0.52047473, 0.88564533, 0.29781443, 0.21130918, 0.83071965, 0.3337948,
            0.9783562, 0.42070097, 0.55396014, 0.16172563, 0.7634967, 0.36205766, 0.48491392,
            0.4980414, 0.6001484, 0.65126085, 0.3691911, 0.11615072,
        ],
    )
    .unwrap();
    let conv_layer9 = TransposedConvolutionLayer::new(kernel9, 2, Padding::Same);
    let target_output9: Array3<f32> = Array::from_shape_vec(
        (2, 4, 4),
        vec![
            1.3411541, 1.4651449, 1.592474, 0.8351439, 1.6873538, 4.2129397, 3.3955684, 1.1732892,
            2.435795, 3.2543545, 2.8309982, 0.9489394, 0.9110908, 1.7742938, 2.075606, 0.3817109,
            0.82609516, 1.5539005, 0.9060123, 0.4521449, 2.4022408, 3.5972598, 2.959451, 1.3964919,
            2.5443103, 3.9478827, 2.5338857, 1.1358304, 1.5488927, 2.0472603, 1.3025239,
            0.52574116,
        ],
    )
    .unwrap();
    let current_output9: Array3<f32> = conv_layer9.transposed_convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.26983073, 0.8690525, 0.7446416, 0.471613, 0.72900707, 0.842964, 0.21457537, 0.938401,
            0.41665936, 0.05351101, 0.43856344, 0.7253113,
        ],
    )
    .unwrap();

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (3, 2, 6, 6),
        vec![
            0.8520324, 0.4151233, 0.35101932, 0.7388761, 0.3592986, 0.6741479, 0.9965808,
            0.3117034, 0.8605703, 0.94308543, 0.8192489, 0.31478795, 0.750324, 0.36604244,
            0.78454614, 0.039194, 0.23696694, 0.2418382, 0.24788351, 0.5622223, 0.15428482,
            0.50688076, 0.37682602, 0.44385925, 0.00051633, 0.53422695, 0.5675659, 0.53845215,
            0.2130759, 0.86445093, 0.432881, 0.6255918, 0.3942565, 0.07226853, 0.09869356,
            0.32627374, 0.8543963, 0.85603166, 0.25422713, 0.24929269, 0.36793318, 0.39957172,
            0.9079535, 0.865758, 0.82237726, 0.60374194, 0.7658025, 0.0215734, 0.473204, 0.6594781,
            0.86392707, 0.8566667, 0.48541847, 0.54855824, 0.5860555, 0.158874, 0.10558709,
            0.19664533, 0.39609066, 0.27843866, 0.49128443, 0.75033015, 0.35650545, 0.4687038,
            0.6159849, 0.2547001, 0.17250927, 0.07203952, 0.8724657, 0.14018923, 0.12091745,
            0.4770398, 0.43290496, 0.6356798, 0.7619444, 0.2383507, 0.95481586, 0.49641547,
            0.7066018, 0.10666513, 0.06810815, 0.79673207, 0.29373887, 0.55241185, 0.23906927,
            0.18915932, 0.02753429, 0.1438574, 0.5419741, 0.71984386, 0.12837073, 0.55637455,
            0.14355855, 0.10225686, 0.8755492, 0.62895286, 0.21388301, 0.30016333, 0.49605927,
            0.8245107, 0.4528765, 0.6836941, 0.28745723, 0.5031258, 0.26911622, 0.92149794,
            0.7165893, 0.04745785, 0.55642486, 0.34654748, 0.83168656, 0.8410765, 0.7668131,
            0.84094906, 0.6012723, 0.9256995, 0.66010624, 0.43380973, 0.62281454, 0.45852852,
            0.61445725, 0.524579, 0.06486581, 0.14233574, 0.13930365, 0.5838787, 0.45914945,
            0.30819193, 0.70949817, 0.8803759, 0.6927248, 0.50569826, 0.7358748, 0.58652496,
            0.85065925, 0.3247378, 0.6760192, 0.4483504, 0.59195757, 0.37883574, 0.7796499,
            0.32748002, 0.44507304, 0.7488422, 0.14428215, 0.8785777, 0.15468395, 0.6638725,
            0.30651525, 0.9492515, 0.55669755, 0.08302987, 0.45890567, 0.05946975, 0.9099885,
            0.30235246, 0.24214035, 0.42138377, 0.38782486, 0.21880285, 0.9182205, 0.85290706,
            0.5070326, 0.5272234, 0.71761, 0.560904, 0.22129431, 0.2624427, 0.6557088, 0.00633,
            0.6603214, 0.45500925, 0.6523986, 0.14666249, 0.32440838, 0.2805719, 0.42671442,
            0.74477625, 0.9118973, 0.5335283, 0.36968935, 0.5693756, 0.36426732, 0.11819325,
            0.95361024, 0.13343851, 0.5940242, 0.7282295, 0.9320007, 0.46956548, 0.5087874,
            0.7952918, 0.73709416, 0.3358689, 0.03185032, 0.27057356, 0.26166973, 0.5843129,
            0.5337139, 0.19571388, 0.1192536, 0.75616854, 0.97167397, 0.71154076, 0.26672947,
            0.07128377, 0.3383284, 0.8008563, 0.9504947, 0.5971434, 0.7847773, 0.92326206,
            0.24163638, 0.12968542, 0.5954836, 0.6734995,
        ],
    )
    .unwrap();
    let conv_layer10 = TransposedConvolutionLayer::new(kernel10, 2, Padding::Same);
    let target_output10: Array3<f32> = Array::from_shape_vec(
        (2, 4, 4),
        vec![
            2.6653473, 3.028763, 3.167008, 3.1909053, 3.1895978, 2.6374621, 3.0004432, 2.965445,
            2.5197706, 2.4653704, 2.9787934, 3.0008836, 2.1817698, 3.7994325, 2.8147907, 2.546795,
            2.9830751, 3.0407848, 3.1700387, 3.2251496, 4.106377, 3.972027, 4.3232627, 3.189383,
            3.9244432, 3.6812098, 3.0975919, 2.8921638, 2.9729133, 1.9350063, 3.7053819, 3.4553232,
        ],
    )
    .unwrap();
    let current_output10: Array3<f32> = conv_layer10.transposed_convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.08627631, 0.7485715, 0.8782484, 0.6863155, 0.7264353, 0.08944888, 0.68172634,
            0.4284322, 0.48237634, 0.6856524, 0.04009921, 0.0687674,
        ],
    )
    .unwrap();

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (3, 2, 6, 6),
        vec![
            0.9063645, 0.42620143, 0.61030614, 0.10040135, 0.50107217, 0.763057, 0.25769317,
            0.8816114, 0.7770131, 0.23345616, 0.62762326, 0.15315741, 0.73589575, 0.2752067,
            0.85641515, 0.7439484, 0.6581306, 0.4056261, 0.13899311, 0.26460668, 0.9179794,
            0.96651816, 0.89336777, 0.18948041, 0.9371178, 0.7124811, 0.9657549, 0.6203675,
            0.32684848, 0.11439406, 0.07654371, 0.95680344, 0.9728639, 0.6055871, 0.00439729,
            0.8525613, 0.3167563, 0.13499211, 0.68338645, 0.7955047, 0.21689218, 0.2826704,
            0.12328367, 0.6890043, 0.5906649, 0.41700745, 0.30266365, 0.5716598, 0.12726787,
            0.35587692, 0.16889893, 0.3114892, 0.1309899, 0.24026695, 0.55435276, 0.34375766,
            0.4225387, 0.37165096, 0.6202945, 0.6069533, 0.05756181, 0.0153275, 0.8497578,
            0.79796964, 0.4071996, 0.19325097, 0.04944435, 0.59729165, 0.39304134, 0.679002,
            0.6126854, 0.67232877, 0.7156292, 0.09058711, 0.33372015, 0.8941644, 0.30899736,
            0.3348802, 0.6412177, 0.26750943, 0.03709449, 0.56803024, 0.8756273, 0.5771133,
            0.56024176, 0.5868575, 0.75167763, 0.36936092, 0.37185487, 0.35425207, 0.24336162,
            0.01027582, 0.2671537, 0.83992416, 0.49819484, 0.7831867, 0.70054483, 0.8701863,
            0.49413827, 0.84670645, 0.8069649, 0.093459, 0.93408287, 0.8206956, 0.70209366,
            0.32817394, 0.744203, 0.39091238, 0.43911496, 0.92919487, 0.29325068, 0.62813336,
            0.8131431, 0.19520658, 0.47931832, 0.42483747, 0.47526902, 0.28184402, 0.09741595,
            0.45691565, 0.44086096, 0.9638409, 0.33859608, 0.26381832, 0.29839757, 0.68755937,
            0.09156765, 0.58584654, 0.04617033, 0.14705709, 0.81179595, 0.16751295, 0.06864621,
            0.6308731, 0.38993102, 0.3644169, 0.68174505, 0.272409, 0.23609333, 0.21866773,
            0.80119157, 0.01742986, 0.49270406, 0.37920174, 0.90869635, 0.8191268, 0.7636344,
            0.7827788, 0.9694966, 0.79533535, 0.00732174, 0.8372113, 0.9449071, 0.7670253,
            0.50964797, 0.7843069, 0.7365313, 0.71123123, 0.89694643, 0.9544987, 0.16811895,
            0.97018677, 0.25394833, 0.5585159, 0.51973414, 0.4357872, 0.29419306, 0.5180376,
            0.80581653, 0.7190028, 0.52249014, 0.5252596, 0.33191478, 0.3388958, 0.18619475,
            0.6839338, 0.72234726, 0.25884646, 0.7980101, 0.36219832, 0.7046317, 0.9284394,
            0.468965, 0.23158234, 0.32747796, 0.9097073, 0.7440483, 0.03255624, 0.30697423,
            0.6246821, 0.1907446, 0.9843364, 0.4038572, 0.5747709, 0.65160054, 0.6822517,
            0.9840877, 0.18341686, 0.5288406, 0.92906404, 0.87780553, 0.9090181, 0.82569945,
            0.20383635, 0.7166643, 0.17061436, 0.91526777, 0.08598401, 0.70100874, 0.40537685,
            0.5971982, 0.92796123, 0.15859716, 0.7859081, 0.8564488, 0.35816404,
        ],
    )
    .unwrap();
    let conv_layer11 = TransposedConvolutionLayer::new(kernel11, 2, Padding::Same);
    let target_output11: Array3<f32> = Array::from_shape_vec(
        (2, 4, 4),
        vec![
            3.9438539, 2.6558824, 3.0352702, 3.440892, 2.0215816, 2.8859725, 3.4310524, 2.948335,
            4.107273, 3.4588056, 3.7096395, 2.5126235, 2.4372208, 3.3374233, 4.128525, 2.9666605,
            2.2593524, 2.9850724, 2.691124, 2.582046, 2.475388, 2.7646794, 2.933818, 2.48994,
            2.04798, 1.7374189, 2.8307848, 2.1598148, 2.0538561, 2.5671973, 2.7999816, 2.5909538,
        ],
    )
    .unwrap();
    let current_output11: Array3<f32> = conv_layer11.transposed_convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = Array::from_shape_vec(
        (3, 2, 2),
        vec![
            0.79062706, 0.9644883, 0.13154314, 0.31929043, 0.80048305, 0.07180241, 0.52815664,
            0.45786336, 0.91537887, 0.9783313, 0.25753945, 0.42799363,
        ],
    )
    .unwrap();

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (3, 2, 6, 6),
        vec![
            0.07738555, 0.9294206, 0.07022415, 0.60058224, 0.6196278, 0.9008346, 0.04155485,
            0.82207745, 0.41282526, 0.9949608, 0.3109271, 0.47614527, 0.7615821, 0.35893062,
            0.07713356, 0.6123928, 0.62511915, 0.88098776, 0.21521498, 0.89468116, 0.1842307,
            0.10784956, 0.8354833, 0.2630701, 0.7184675, 0.06132602, 0.06056971, 0.71349823,
            0.00944792, 0.07349233, 0.35231608, 0.8533961, 0.17608605, 0.18067755, 0.51991457,
            0.19053963, 0.5045173, 0.7456122, 0.27621788, 0.48649722, 0.39297876, 0.54849166,
            0.3746991, 0.8194284, 0.34880427, 0.79505837, 0.41293454, 0.890512, 0.12076204,
            0.20799449, 0.88948244, 0.24437675, 0.7731474, 0.65954226, 0.4922565, 0.5211581,
            0.97382414, 0.9779564, 0.1754263, 0.4551989, 0.81067127, 0.7095975, 0.5087082,
            0.78796804, 0.03310984, 0.20805901, 0.45704818, 0.9133983, 0.5689028, 0.04247752,
            0.55938286, 0.9835293, 0.04525762, 0.7176199, 0.82096803, 0.5575717, 0.5744108,
            0.9780689, 0.34563604, 0.3324931, 0.8797563, 0.14932355, 0.1134909, 0.5645703,
            0.30096474, 0.4096875, 0.5703153, 0.88738924, 0.6242374, 0.77620894, 0.681929,
            0.24701218, 0.74485576, 0.61556435, 0.63869125, 0.05875124, 0.3210932, 0.96946657,
            0.09463912, 0.6275637, 0.34162354, 0.74390864, 0.8736778, 0.9513908, 0.24045336,
            0.7003475, 0.87750345, 0.16564246, 0.6314963, 0.21785556, 0.7654987, 0.13988015,
            0.03287261, 0.82226163, 0.60896695, 0.13331373, 0.62307173, 0.23316076, 0.9600204,
            0.55291533, 0.29808274, 0.8765127, 0.98263544, 0.27148733, 0.11101003, 0.2754741,
            0.4540411, 0.19701396, 0.08459944, 0.98017716, 0.9800813, 0.62585706, 0.18621969,
            0.5836321, 0.17965508, 0.81336415, 0.94554824, 0.28304926, 0.32718146, 0.46701643,
            0.91682273, 0.6142979, 0.19277428, 0.28408903, 0.25507236, 0.9800453, 0.36125833,
            0.96792, 0.33258557, 0.9508625, 0.8424581, 0.8130291, 0.7774976, 0.17691322, 0.9389267,
            0.22419459, 0.33442205, 0.7614585, 0.37563834, 0.70754576, 0.1499497, 0.9873837,
            0.7166968, 0.40278858, 0.22288306, 0.3279577, 0.07722609, 0.598755, 0.8143903,
            0.87905455, 0.83061284, 0.9923988, 0.6196494, 0.536406, 0.06662867, 0.83588266,
            0.28182983, 0.662181, 0.99850965, 0.60448396, 0.12318801, 0.91713256, 0.8540598,
            0.19103892, 0.5929614, 0.9118344, 0.9381113, 0.3421722, 0.8149188, 0.9595595,
            0.02717085, 0.8916309, 0.9755575, 0.27588442, 0.59208006, 0.00008138, 0.9552037,
            0.12578069, 0.01249961, 0.05413999, 0.5153533, 0.40144867, 0.8698811, 0.6468678,
            0.8840439, 0.34315115, 0.52290094, 0.66408885, 0.98115784, 0.85046166, 0.7979905,
            0.9444794, 0.6930413, 0.90735817, 0.91156703, 0.45996496,
        ],
    )
    .unwrap();
    let conv_layer12 = TransposedConvolutionLayer::new(kernel12, 2, Padding::Same);
    let target_output12: Array3<f32> = Array::from_shape_vec(
        (2, 4, 4),
        vec![
            2.635161, 4.630292, 2.6375015, 5.3095536, 3.1549067, 3.1709273, 2.9017682, 2.1525004,
            3.3289237, 4.3231916, 2.6230447, 4.5335193, 2.2201242, 4.0136995, 3.4526985, 2.3854334,
            4.287647, 1.8614726, 4.108194, 2.1547828, 3.2138047, 3.4390323, 4.4827976, 4.269459,
            4.0658503, 3.7053516, 4.0899754, 3.1046655, 3.7390125, 4.2239013, 4.058536, 3.8887093,
        ],
    )
    .unwrap();
    let current_output12: Array3<f32> = conv_layer12.transposed_convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );
}
