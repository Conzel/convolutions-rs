// This file has been automatically generated by Jinja2 via the
// script /Users/almico/projects/convolutions-rs/scripts/generate_tests.py.
// Please do not change this file by hand.
#[allow(unused_imports)]
use convolutions_rs::convolutions::*;
#[allow(unused_imports)]
use convolutions_rs::transposed_convolutions::*;
#[allow(unused_imports)]
use convolutions_rs::Padding;
#[allow(unused_imports)]
use ndarray::{array, Array, Array2, Array3, Array4, Dimension};

fn arr_allclose<D: Dimension>(current: &Array<f32, D>, target: &Array<f32, D>) -> bool {
    assert_eq!(
        current.shape(),
        target.shape(),
        "\ngiven array had shape {:?}, but target had shape {:?}",
        current.shape(),
        target.shape()
    );
    (current - target).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_conv2d_stride1_same_bias() {
    let test_input1 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.17014849, 0.4305688, 0.5715329, 0.06520256, 0.12669589, 0.7501565, 0.9837982,
            0.55574155, 0.04181346, 0.23677547, 0.51154923, 0.02844254, 0.60484785, 0.72306335,
            0.22177844, 0.16487044, 0.46672952, 0.54035133, 0.6922357, 0.27845532, 0.66966337,
            0.41083884, 0.4583148, 0.70402896, 0.6177326, 0.9269775, 0.56033564, 0.9098013,
            0.2697065, 0.24242379, 0.7944849, 0.75231165, 0.9692583, 0.12854727, 0.9148518,
            0.3356524, 0.37189406, 0.55898565, 0.5888119, 0.44166553, 0.9034325, 0.2795916,
            0.7567664, 0.85028297, 0.96145767, 0.5566679, 0.84558666, 0.0474241, 0.23985276,
            0.07658575, 0.7197864, 0.13313323, 0.69580543, 0.12692, 0.38484824, 0.775336,
            0.52113837, 0.4364637, 0.14352316, 0.8997107,
        ],
    )
    .unwrap();

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.64410555, 0.04471071, 0.767672, 0.43464628, 0.16569944, 0.18875164, 0.12285258,
            0.2781115, 0.5390728, 0.5066572, 0.97435564, 0.39133722, 0.7964828, 0.988919,
            0.35985747, 0.00756764, 0.53660643, 0.8659267, 0.8576183, 0.81628793, 0.9480399,
            0.45711017, 0.89837223, 0.8462714, 0.70536447, 0.9289133, 0.0067116, 0.65220493,
            0.72789615, 0.00785976, 0.32536873, 0.09833383, 0.1022715, 0.7567798, 0.23972042,
            0.38848338, 0.00744711, 0.8715701, 0.07988323, 0.6283005, 0.8241853, 0.16570753,
            0.6487234, 0.14438818, 0.6286194, 0.34163022, 0.03235205, 0.25922647, 0.59344524,
            0.9308157,
        ],
    )
    .unwrap();
    let conv_layer1 = ConvolutionLayer::new(
        kernel1,
        Some(Array::from_shape_vec((2,), vec![0.22162326, 0.91818297]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output1: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            4.048182, 4.726361, 4.701134, 4.772119, 5.4785337, 6.052286, 6.065793, 5.61286,
            6.032151, 5.451872, 4.100359, 2.375447, 5.0770125, 5.6340556, 6.080672, 6.1005917,
            6.635967, 6.8085246, 7.9843826, 7.207365, 7.9055276, 6.445306, 5.4128532, 3.2168887,
            4.9848847, 5.5896473, 7.2776775, 6.59523, 7.283876, 7.8635473, 8.67346, 8.382674,
            8.321805, 7.9730906, 6.066153, 3.2857876, 3.9141948, 4.277152, 5.1365166, 5.204616,
            5.0228057, 5.700418, 6.784329, 6.1927485, 6.545686, 6.0445914, 4.9723606, 3.0476823,
            2.4204779, 3.0120745, 3.7487032, 3.8250325, 3.589701, 3.749333, 4.8529487, 4.180199,
            4.5384765, 3.9874802, 3.8931022, 2.0231805, 3.3279762, 3.5259705, 3.827073, 3.7310548,
            4.1293893, 4.418919, 4.940145, 3.9474554, 4.5546603, 3.6922588, 3.174924, 2.0705621,
            3.9857373, 4.4571257, 4.6220675, 4.959178, 5.541269, 5.7076306, 6.205225, 4.6430287,
            6.4290695, 4.6904535, 3.8037329, 2.5301764, 4.443506, 4.7519746, 5.415445, 5.3164263,
            6.299731, 6.4274793, 7.4983606, 6.17651, 7.2099185, 6.061932, 5.5559278, 2.776815,
            4.097608, 3.445798, 5.254506, 4.058153, 5.3459263, 4.9288783, 5.9776654, 5.3981905,
            5.701717, 5.42929, 4.8732467, 3.1592379, 3.2698407, 2.7968228, 4.4839454, 3.8967705,
            3.6628075, 4.230526, 4.5125737, 4.5030923, 4.180835, 4.7175856, 3.5529966, 2.4865575,
        ],
    )
    .unwrap();
    let current_output1: Array3<f32> = conv_layer1.convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.97700953, 0.18019113, 0.775954, 0.14120784, 0.3426181, 0.5417864, 0.7768226,
            0.34603763, 0.6114103, 0.9716041, 0.5157695, 0.50755495, 0.6659802, 0.629322,
            0.60627973, 0.27978492, 0.28792506, 0.7547703, 0.0509604, 0.10449678, 0.89887625,
            0.6572328, 0.695583, 0.3626411, 0.37613922, 0.9241278, 0.39898983, 0.6908677,
            0.5511301, 0.36253917, 0.36786652, 0.88718724, 0.69587743, 0.4870034, 0.7135373,
            0.9862549, 0.22876498, 0.75677496, 0.5617529, 0.5566727, 0.7035832, 0.92333794,
            0.85647196, 0.36252776, 0.9373231, 0.01684272, 0.34317794, 0.921993, 0.36392415,
            0.7462054, 0.7556754, 0.31284246, 0.4031665, 0.7376267, 0.7926341, 0.36348057,
            0.84374106, 0.03665259, 0.23846498, 0.82509995,
        ],
    )
    .unwrap();

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.97324103, 0.96826524, 0.77620417, 0.8427075, 0.42989048, 0.76771307, 0.54514444,
            0.7878393, 0.21897991, 0.975659, 0.73295325, 0.69994044, 0.86701024, 0.76087946,
            0.623545, 0.14890751, 0.8610666, 0.21943341, 0.1644093, 0.6089244, 0.8612485,
            0.02602104, 0.30423534, 0.5087405, 0.16869895, 0.3329467, 0.179494, 0.33126613,
            0.11996287, 0.21606164, 0.87119263, 0.33579683, 0.2313126, 0.2576527, 0.3748985,
            0.30113342, 0.8142977, 0.423247, 0.8179498, 0.92175007, 0.21606776, 0.19149332,
            0.4240341, 0.14780204, 0.46443272, 0.00207204, 0.359202, 0.9019851, 0.21363449,
            0.6390296,
        ],
    )
    .unwrap();
    let conv_layer2 = ConvolutionLayer::new(
        kernel2,
        Some(Array::from_shape_vec((2,), vec![0.5977058, 0.81350476]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output2: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            3.3363974, 3.708303, 4.343021, 4.535949, 3.7842247, 3.8012679, 4.9793406, 4.664696,
            4.746439, 5.5592966, 4.8021245, 3.625347, 4.625045, 4.8563437, 6.447209, 5.9854226,
            6.2981977, 5.5256124, 6.141589, 6.9486933, 6.9886837, 6.829144, 6.3349633, 4.5149374,
            5.508069, 6.9297366, 8.522429, 8.673694, 8.046266, 7.6316767, 8.924253, 9.052666,
            9.004924, 9.334412, 8.458259, 6.106739, 4.5807147, 6.439397, 7.6874266, 8.414661,
            7.6178374, 7.3711133, 8.114052, 7.655518, 7.1045485, 8.487334, 6.575312, 5.1759872,
            4.088482, 5.371254, 6.7601533, 7.5345097, 7.0511513, 6.83691, 7.8313065, 6.5496383,
            6.7476683, 6.9002, 5.81116, 4.363646, 3.5382974, 4.559514, 3.9031317, 4.2206335,
            3.9668744, 3.9823232, 4.2919135, 5.199597, 5.197613, 4.934897, 4.121545, 3.316777,
            3.940677, 5.0828257, 5.666382, 5.552615, 5.500549, 4.6592503, 6.00976, 5.503807,
            5.999377, 5.9230967, 4.5258427, 4.4833684, 4.5930953, 5.334461, 6.8551607, 6.224601,
            6.099705, 5.9196043, 7.098216, 5.9917397, 6.333366, 6.58357, 5.289982, 4.723132,
            3.564492, 4.0988483, 5.361923, 5.9872317, 5.5371466, 5.4448667, 5.9417176, 4.8829966,
            4.5432205, 5.746186, 4.301378, 3.2475286, 3.054608, 3.5082276, 4.0938735, 5.0523877,
            4.760857, 4.507836, 5.139211, 4.651848, 3.8976052, 4.52998, 3.6862183, 2.3280592,
        ],
    )
    .unwrap();
    let current_output2: Array3<f32> = conv_layer2.convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.3685356, 0.90738845, 0.7828945, 0.9812083, 0.6726924, 0.46724817, 0.17302093,
            0.39839587, 0.78055173, 0.8576361, 0.7335981, 0.52934057, 0.9529279, 0.78965247,
            0.46750203, 0.08403921, 0.73126566, 0.34934825, 0.3459232, 0.54770446, 0.68714255,
            0.29283327, 0.53392637, 0.8850151, 0.6909357, 0.44388366, 0.9043074, 0.9949724,
            0.64743847, 0.36691284, 0.5396585, 0.5372604, 0.47547424, 0.44373918, 0.34716287,
            0.21774843, 0.9437953, 0.51856595, 0.15765554, 0.9350713, 0.86233217, 0.81734437,
            0.6566154, 0.3879487, 0.28848994, 0.5814131, 0.06870039, 0.78543746, 0.47194287,
            0.12733267, 0.6111727, 0.25675833, 0.74741316, 0.45714313, 0.9649919, 0.57969916,
            0.5208711, 0.93666834, 0.13247305, 0.7087714,
        ],
    )
    .unwrap();

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.17877895, 0.40767, 0.6906785, 0.9675369, 0.224454, 0.28950995, 0.75431514,
            0.99582964, 0.8120864, 0.9536324, 0.7703749, 0.683158, 0.16371861, 0.42877796,
            0.7300311, 0.9456737, 0.05700503, 0.19623296, 0.44457257, 0.5512328, 0.15101007,
            0.25140873, 0.2031063, 0.5537751, 0.3641559, 0.701937, 0.27669305, 0.85076064,
            0.00186597, 0.3316532, 0.15485734, 0.35000807, 0.42372492, 0.03995521, 0.5067197,
            0.38907993, 0.37287286, 0.21294773, 0.8646356, 0.10154326, 0.75313085, 0.7910046,
            0.15368015, 0.25977603, 0.40315583, 0.635939, 0.25689796, 0.13678746, 0.43744904,
            0.6658951,
        ],
    )
    .unwrap();
    let conv_layer3 = ConvolutionLayer::new(
        kernel3,
        Some(Array::from_shape_vec((2,), vec![0.564682, 0.70429957]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output3: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            3.096834, 3.607419, 5.173199, 4.884918, 4.1292114, 3.749116, 4.342984, 3.7184181,
            3.6042025, 4.1483765, 3.6381626, 2.492755, 4.618718, 6.2072577, 8.285923, 7.136659,
            6.3107395, 6.1263785, 5.9761887, 5.460417, 5.98233, 6.507626, 5.0728087, 3.3754647,
            5.764121, 7.260669, 9.112937, 8.061736, 7.6445336, 7.8780217, 7.147539, 7.3476744,
            7.5006795, 7.441428, 5.9647446, 4.3927717, 4.98078, 6.5612, 7.72338, 6.834195,
            7.2785964, 6.8008614, 6.826475, 6.7734756, 6.1088014, 5.71117, 4.881417, 3.7089872,
            3.7637088, 5.292037, 6.2111974, 6.3004985, 6.6240077, 6.161169, 5.6143994, 5.7014375,
            4.746574, 4.789543, 3.876142, 2.8663688, 3.077753, 4.138301, 5.5437293, 4.673766,
            4.1398644, 4.075627, 4.031818, 3.6638336, 3.9646468, 4.338935, 3.5619006, 2.6043003,
            3.2735753, 4.938293, 5.970634, 5.903753, 5.4001703, 5.38114, 4.890571, 4.820274,
            4.416313, 4.763649, 4.2176275, 2.95675, 3.444705, 5.690762, 7.416174, 6.5123944,
            6.8569384, 7.110224, 6.420352, 6.1760464, 5.9503636, 5.933514, 4.9895716, 4.254901,
            3.4576302, 3.987506, 5.653771, 4.88083, 5.4970226, 5.080852, 5.135447, 4.990364,
            5.06095, 4.2185636, 4.468754, 3.4312458, 2.3660374, 3.3925757, 3.8259711, 4.2405577,
            4.413257, 4.458135, 3.9584942, 3.749826, 3.6958518, 3.277256, 2.9582148, 2.3087428,
        ],
    )
    .unwrap();
    let current_output3: Array3<f32> = conv_layer3.convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.67241764, 0.15790685, 0.25059524, 0.6432024, 0.60438925, 0.45131883, 0.96080875,
            0.40131757, 0.60942906, 0.7035094, 0.6473561, 0.05433872, 0.7478619, 0.24740443,
            0.35665986, 0.00020906, 0.23741227, 0.57013196, 0.6398819, 0.7132858, 0.90739846,
            0.8246988, 0.1319153, 0.6876462, 0.846729, 0.18134636, 0.9026019, 0.54676574,
            0.33139232, 0.83673465, 0.05539654, 0.5554673, 0.9149804, 0.9791666, 0.9000323,
            0.6329186, 0.30872977, 0.30553624, 0.04431259, 0.5287215, 0.3358437, 0.72178566,
            0.72704846, 0.85191244, 0.07464863, 0.867838, 0.5849202, 0.14913943, 0.18325551,
            0.40498126, 0.75359416, 0.01821492, 0.5917236, 0.91982275, 0.5287654, 0.7151285,
            0.38420153, 0.517026, 0.5150141, 0.26934662, 0.7356045, 0.97902703, 0.6362754,
            0.27803296, 0.32063982, 0.83432084, 0.78711736, 0.28247103, 0.7812688, 0.5270146,
            0.4719829, 0.47535485, 0.23715672, 0.4404677, 0.90286416, 0.66611385, 0.02649495,
            0.3193976, 0.16608049, 0.5121102, 0.17436478, 0.313714, 0.47244504, 0.9906781,
            0.9064671, 0.29454133, 0.99321055, 0.12515199, 0.17643407, 0.16320723, 0.48754972,
            0.53866875, 0.6358971, 0.8935865, 0.82249755, 0.92702305, 0.10556214, 0.28283548,
            0.14977625, 0.53714937, 0.06378802, 0.4497216, 0.79292244, 0.5300166, 0.687625,
            0.4744624, 0.73655206, 0.42605233, 0.6592577, 0.3237799, 0.42867732, 0.87574345,
            0.70010746, 0.01496939, 0.78416556, 0.61210716, 0.98323476, 0.9316805, 0.05175687,
            0.70876056, 0.52122, 0.68573385, 0.415587, 0.87644994, 0.73337436, 0.5451011,
            0.20423086, 0.5554448, 0.48578474, 0.2764571, 0.9192946, 0.8920509, 0.34320405,
            0.4283556, 0.3897719, 0.06360459, 0.729173, 0.19460331, 0.8634254, 0.6576018,
            0.9657459, 0.22873744, 0.47843248, 0.22157177, 0.9162307, 0.02157675, 0.44649428,
            0.2792192, 0.685827, 0.75294507,
        ],
    )
    .unwrap();

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.7919586, 0.22560763, 0.88778716, 0.80092114, 0.00003577, 0.9737877, 0.9146247,
            0.13869576, 0.7059647, 0.0936791, 0.2647747, 0.52025, 0.0330946, 0.17754778,
            0.41998118, 0.02919354, 0.82382417, 0.4156855, 0.49590722, 0.69720376, 0.7155315,
            0.40795937, 0.15397236, 0.02265206, 0.7090415, 0.75877124, 0.67035425, 0.39483562,
            0.86222315, 0.9993058, 0.84902793, 0.26427644, 0.86764544, 0.24274233, 0.69865257,
            0.5739991, 0.7620597, 0.29289714, 0.88402116, 0.8942853, 0.7757528, 0.16431308,
            0.48939565, 0.56055367, 0.46453193, 0.9573795, 0.8899508, 0.16098963, 0.63514715,
            0.810474,
        ],
    )
    .unwrap();
    let conv_layer4 = ConvolutionLayer::new(
        kernel4,
        Some(Array::from_shape_vec((2,), vec![0.29953358, 0.46075395]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output4: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            1.6402589, 2.620054, 3.2507317, 3.9094765, 4.4954076, 4.0116673, 3.6974645, 4.0296764,
            2.7470784, 3.3629305, 3.624855, 3.359558, 3.1604881, 2.7499235, 2.1541193, 1.9983853,
            3.5419197, 5.3263206, 5.2447705, 4.649659, 5.261134, 4.8990307, 5.144912, 4.470859,
            4.7430387, 5.5537057, 5.37281, 4.569211, 3.587944, 3.0240166, 3.0701299, 3.730801,
            5.505887, 6.5913987, 6.4270434, 6.7931466, 7.327857, 6.9680843, 7.1429653, 6.0366054,
            6.784556, 6.3483315, 5.961788, 4.9530535, 3.8937712, 2.7351637, 4.329854, 5.9354677,
            6.3098598, 6.8772306, 6.983318, 7.523897, 6.043721, 5.969348, 6.1423717, 6.187215,
            6.674489, 5.8118134, 5.7090287, 4.3931823, 2.8571608, 4.943986, 6.425956, 6.7975564,
            5.9624467, 5.6401024, 6.496799, 6.4258432, 4.6120315, 6.8155026, 6.195486, 6.0210204,
            6.3328433, 4.4128356, 3.5738065, 3.8571227, 5.239761, 6.4586024, 6.583601, 6.238075,
            5.576454, 5.1182933, 7.125094, 5.8588505, 6.6371856, 7.085517, 5.4146976, 6.7760763,
            5.469911, 3.4961798, 3.5065813, 5.7749434, 6.314373, 5.783568, 5.813212, 6.511219,
            5.8313055, 6.2279024, 6.476882, 6.348372, 8.022065, 5.839457, 6.4519577, 5.7585425,
            3.0473964, 2.7557797, 4.6925898, 6.3467402, 6.4279685, 6.538143, 6.335491, 5.984052,
            6.2015185, 5.892977, 5.7527194, 6.4308605, 6.895671, 5.221149, 5.2325854, 3.353134,
            2.6267843, 4.085467, 6.3202233, 6.11467, 6.3264313, 6.098309, 4.893588, 4.4636436,
            4.8728924, 4.2599144, 4.346022, 5.5646534, 5.615689, 5.5726633, 3.9231985, 2.1193151,
            2.8034554, 4.459673, 4.4070516, 3.9185028, 4.616977, 4.53166, 3.4483354, 3.3365047,
            4.2635407, 4.0671563, 4.8001313, 4.6575747, 3.839032, 2.9139936, 2.5227184, 4.0626836,
            5.2038236, 5.869346, 6.86274, 6.4962554, 5.5368295, 5.8067603, 5.4368963, 4.348476,
            5.38912, 5.918504, 4.444007, 4.393494, 3.537368, 3.3729975, 4.790057, 6.789819,
            7.330534, 7.3860354, 6.7759676, 7.851828, 7.4459767, 6.5917354, 6.8457217, 7.7987566,
            6.8711414, 6.8785443, 4.997382, 4.01922, 4.972291, 6.552921, 9.186769, 9.926923,
            9.960036, 8.829834, 9.223465, 10.002089, 8.845727, 8.257326, 9.218655, 9.185168,
            8.37029, 6.1904106, 5.0829864, 4.5493684, 6.237198, 8.056586, 8.926517, 8.853208,
            8.186268, 9.290212, 9.846837, 8.188586, 9.464144, 9.8758, 8.766913, 8.114717, 7.253889,
            4.104793, 5.9502325, 7.071488, 9.506612, 9.789988, 8.835534, 8.28616, 8.576385,
            8.861224, 7.311115, 7.8373375, 9.183046, 8.678212, 7.7761, 6.879513, 4.705451,
            5.006822, 6.3850164, 8.481053, 8.591306, 7.7036614, 8.029999, 8.6816, 9.639083,
            9.168898, 9.273189, 9.518716, 8.532958, 8.258947, 6.816454, 4.7507224, 5.9256377,
            6.9821024, 9.681238, 9.378609, 9.036234, 8.518318, 8.867955, 8.273467, 8.224706,
            9.440765, 8.653299, 9.063778, 8.754077, 7.441799, 4.498053, 4.6985574, 6.336214,
            8.870263, 9.138676, 8.357946, 9.436164, 8.401724, 9.272384, 7.5823665, 8.980552,
            9.465827, 8.417635, 8.195512, 7.0840282, 4.4564137, 4.302073, 6.3967037, 7.816637,
            8.912423, 7.352647, 7.6486144, 6.443429, 6.645458, 5.5134287, 7.062404, 6.3477035,
            7.459867, 7.359691, 5.827217, 4.44423, 3.4552238, 4.747941, 6.0847282, 6.54915,
            6.1149316, 6.5601935, 5.1778226, 5.6398387, 5.729384, 5.6383734, 6.233847, 5.876868,
            6.10946, 5.112822, 3.1284516,
        ],
    )
    .unwrap();
    let current_output4: Array3<f32> = conv_layer4.convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.02808736, 0.59781086, 0.8855644, 0.61877847, 0.9537467, 0.6197168, 0.3379795,
            0.13108306, 0.30692965, 0.33537498, 0.01351478, 0.45529485, 0.6626128, 0.9497022,
            0.7403127, 0.06039312, 0.08292098, 0.80679554, 0.1354166, 0.2560622, 0.80891573,
            0.97702754, 0.4124968, 0.4359102, 0.8733311, 0.1396195, 0.52047473, 0.88564533,
            0.29781443, 0.21130918, 0.83071965, 0.3337948, 0.9783562, 0.42070097, 0.55396014,
            0.16172563, 0.7634967, 0.36205766, 0.48491392, 0.4980414, 0.6001484, 0.65126085,
            0.3691911, 0.11615072, 0.26983073, 0.8690525, 0.7446416, 0.471613, 0.72900707,
            0.842964, 0.21457537, 0.938401, 0.41665936, 0.05351101, 0.43856344, 0.7253113,
            0.8520324, 0.4151233, 0.35101932, 0.7388761, 0.3592986, 0.6741479, 0.9965808,
            0.3117034, 0.8605703, 0.94308543, 0.8192489, 0.31478795, 0.750324, 0.36604244,
            0.78454614, 0.039194, 0.23696694, 0.2418382, 0.24788351, 0.5622223, 0.15428482,
            0.50688076, 0.37682602, 0.44385925, 0.00051633, 0.53422695, 0.5675659, 0.53845215,
            0.2130759, 0.86445093, 0.432881, 0.6255918, 0.3942565, 0.07226853, 0.09869356,
            0.32627374, 0.8543963, 0.85603166, 0.25422713, 0.24929269, 0.36793318, 0.39957172,
            0.9079535, 0.865758, 0.82237726, 0.60374194, 0.7658025, 0.0215734, 0.473204, 0.6594781,
            0.86392707, 0.8566667, 0.48541847, 0.54855824, 0.5860555, 0.158874, 0.10558709,
            0.19664533, 0.39609066, 0.27843866, 0.49128443, 0.75033015, 0.35650545, 0.4687038,
            0.6159849, 0.2547001, 0.17250927, 0.07203952, 0.8724657, 0.14018923, 0.12091745,
            0.4770398, 0.43290496, 0.6356798, 0.7619444, 0.2383507, 0.95481586, 0.49641547,
            0.7066018, 0.10666513, 0.06810815, 0.79673207, 0.29373887, 0.55241185, 0.23906927,
            0.18915932, 0.02753429, 0.1438574, 0.5419741, 0.71984386, 0.12837073, 0.55637455,
            0.14355855, 0.10225686,
        ],
    )
    .unwrap();

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.8755492, 0.62895286, 0.21388301, 0.30016333, 0.49605927, 0.8245107, 0.4528765,
            0.6836941, 0.28745723, 0.5031258, 0.26911622, 0.92149794, 0.7165893, 0.04745785,
            0.55642486, 0.34654748, 0.83168656, 0.8410765, 0.7668131, 0.84094906, 0.6012723,
            0.9256995, 0.66010624, 0.43380973, 0.62281454, 0.45852852, 0.61445725, 0.524579,
            0.06486581, 0.14233574, 0.13930365, 0.5838787, 0.45914945, 0.30819193, 0.70949817,
            0.8803759, 0.6927248, 0.50569826, 0.7358748, 0.58652496, 0.85065925, 0.3247378,
            0.6760192, 0.4483504, 0.59195757, 0.37883574, 0.7796499, 0.32748002, 0.44507304,
            0.7488422,
        ],
    )
    .unwrap();
    let conv_layer5 = ConvolutionLayer::new(
        kernel5,
        Some(Array::from_shape_vec((2,), vec![0.14428215, 0.8785777]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output5: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            2.7808852, 3.5131667, 4.9668274, 5.37006, 5.792271, 5.188299, 5.1032133, 4.989708,
            4.1389494, 4.402787, 4.7358613, 4.436651, 4.5573854, 3.8496258, 2.9682064, 4.2448463,
            5.390618, 7.0623155, 7.081157, 7.3756866, 6.460522, 6.6041327, 6.4304485, 5.3573194,
            5.6787643, 6.004354, 5.847414, 6.2310987, 5.1476707, 3.8048263, 5.2444324, 6.259735,
            8.514447, 8.951382, 9.780233, 8.193465, 8.508033, 8.1505995, 7.141214, 6.8030677,
            7.2618685, 7.3042603, 6.6900015, 5.1035366, 4.476634, 5.06993, 6.3381543, 7.997333,
            7.57595, 9.479792, 7.340788, 7.818463, 8.095482, 8.3032675, 6.910062, 7.441697,
            7.3542843, 6.341627, 4.7788568, 3.9389129, 4.5532193, 6.193928, 8.494225, 7.90381,
            8.436409, 7.3902636, 7.8011017, 7.0337954, 8.662146, 8.01391, 8.394619, 7.823596,
            7.045664, 5.158166, 3.467225, 4.816064, 6.8689013, 9.046783, 8.534513, 8.461594,
            7.0414863, 7.1839986, 7.1059237, 8.352817, 7.1491213, 8.046896, 7.2172055, 7.4452753,
            5.4591627, 3.716276, 4.7253284, 5.7035, 7.7454314, 7.6955323, 7.2923274, 6.017532,
            6.652522, 6.071823, 7.293978, 7.234497, 8.67469, 7.4962835, 7.9472213, 5.4053583,
            4.3165197, 3.5983076, 4.943238, 6.7621875, 6.4140253, 6.2949033, 5.923337, 5.177007,
            4.97479, 6.647937, 6.896841, 8.46582, 7.641539, 7.808906, 5.6869164, 4.6594496,
            3.1788273, 4.1394224, 5.4044247, 5.191573, 5.4314456, 4.6892896, 3.533908, 3.9592447,
            4.613828, 4.9674053, 6.7346196, 5.7802205, 5.49829, 4.46418, 3.6490746, 2.0737534,
            2.1290667, 4.0506644, 3.779651, 3.441732, 2.7485614, 2.9627123, 2.5429592, 2.4322886,
            2.769282, 4.2291164, 3.7371905, 3.8586643, 3.089707, 2.976171, 3.5609357, 4.2399564,
            5.1134076, 5.808949, 6.5916133, 5.405593, 5.2891498, 5.5076756, 4.8122263, 4.5398436,
            4.9529085, 5.2926846, 4.9289083, 4.482567, 3.8059099, 4.5283527, 5.498629, 7.286896,
            6.51445, 8.022948, 6.6069922, 6.1344385, 6.429629, 6.4565897, 5.832784, 6.475886,
            6.7268167, 6.5108337, 5.3345513, 4.1652584, 5.287918, 6.090432, 8.53871, 9.064051,
            9.299789, 8.262207, 8.527003, 7.3963337, 7.2784247, 6.9247932, 6.8784943, 6.5356517,
            6.528441, 5.7358747, 4.416642, 5.240406, 6.2227, 8.105306, 7.6354866, 8.410167,
            7.7496824, 7.9522142, 7.538394, 8.393187, 7.2925916, 7.2925572, 6.7956333, 6.96229,
            5.230964, 3.819658, 5.267336, 6.64765, 8.146154, 7.7859874, 8.939638, 7.1174693,
            7.6428933, 7.6244426, 8.279253, 7.8428946, 8.255406, 7.1047134, 7.2914944, 4.649576,
            3.535265, 5.185607, 6.7309527, 8.285533, 7.967554, 7.7344403, 7.1178274, 7.168235,
            6.547823, 7.359329, 7.0519185, 7.858859, 7.414518, 7.2285514, 5.2401476, 4.5146823,
            4.4936285, 5.9128757, 7.616113, 7.108529, 7.077086, 6.868541, 6.627162, 6.7388015,
            7.5457807, 7.256217, 8.656138, 8.034462, 6.971946, 5.6596007, 4.5958776, 4.774022,
            5.450664, 7.0875683, 6.9903955, 6.471379, 5.0024424, 5.672825, 5.7219224, 6.417558,
            6.46219, 7.9042954, 7.346776, 7.2755284, 5.577577, 4.733987, 3.4243698, 4.0142746,
            5.6735315, 5.491333, 5.129013, 4.219149, 4.4643354, 3.9837656, 4.9427285, 5.535967,
            6.590822, 6.3956146, 6.463222, 4.5576954, 4.1499286, 2.457583, 3.3094532, 4.309865,
            4.019517, 3.9848542, 3.6480443, 3.173704, 3.042211, 3.4948254, 3.3615928, 4.3159685,
            4.412098, 4.299239, 3.4649816, 3.0758228,
        ],
    )
    .unwrap();
    let current_output5: Array3<f32> = conv_layer5.convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.15468395, 0.6638725, 0.30651525, 0.9492515, 0.55669755, 0.08302987, 0.45890567,
            0.05946975, 0.9099885, 0.30235246, 0.24214035, 0.42138377, 0.38782486, 0.21880285,
            0.9182205, 0.85290706, 0.5070326, 0.5272234, 0.71761, 0.560904, 0.22129431, 0.2624427,
            0.6557088, 0.00633, 0.6603214, 0.45500925, 0.6523986, 0.14666249, 0.32440838,
            0.2805719, 0.42671442, 0.74477625, 0.9118973, 0.5335283, 0.36968935, 0.5693756,
            0.36426732, 0.11819325, 0.95361024, 0.13343851, 0.5940242, 0.7282295, 0.9320007,
            0.46956548, 0.5087874, 0.7952918, 0.73709416, 0.3358689, 0.03185032, 0.27057356,
            0.26166973, 0.5843129, 0.5337139, 0.19571388, 0.1192536, 0.75616854, 0.97167397,
            0.71154076, 0.26672947, 0.07128377, 0.3383284, 0.8008563, 0.9504947, 0.5971434,
            0.7847773, 0.92326206, 0.24163638, 0.12968542, 0.5954836, 0.6734995, 0.08627631,
            0.7485715, 0.8782484, 0.6863155, 0.7264353, 0.08944888, 0.68172634, 0.4284322,
            0.48237634, 0.6856524, 0.04009921, 0.0687674, 0.9063645, 0.42620143, 0.61030614,
            0.10040135, 0.50107217, 0.763057, 0.25769317, 0.8816114, 0.7770131, 0.23345616,
            0.62762326, 0.15315741, 0.73589575, 0.2752067, 0.85641515, 0.7439484, 0.6581306,
            0.4056261, 0.13899311, 0.26460668, 0.9179794, 0.96651816, 0.89336777, 0.18948041,
            0.9371178, 0.7124811, 0.9657549, 0.6203675, 0.32684848, 0.11439406, 0.07654371,
            0.95680344, 0.9728639, 0.6055871, 0.00439729, 0.8525613, 0.3167563, 0.13499211,
            0.68338645, 0.7955047, 0.21689218, 0.2826704, 0.12328367, 0.6890043, 0.5906649,
            0.41700745, 0.30266365, 0.5716598, 0.12726787, 0.35587692, 0.16889893, 0.3114892,
            0.1309899, 0.24026695, 0.55435276, 0.34375766, 0.4225387, 0.37165096, 0.6202945,
            0.6069533, 0.05756181, 0.0153275, 0.8497578, 0.79796964, 0.4071996, 0.19325097,
            0.04944435, 0.59729165,
        ],
    )
    .unwrap();

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.39304134, 0.679002, 0.6126854, 0.67232877, 0.7156292, 0.09058711, 0.33372015,
            0.8941644, 0.30899736, 0.3348802, 0.6412177, 0.26750943, 0.03709449, 0.56803024,
            0.8756273, 0.5771133, 0.56024176, 0.5868575, 0.75167763, 0.36936092, 0.37185487,
            0.35425207, 0.24336162, 0.01027582, 0.2671537, 0.83992416, 0.49819484, 0.7831867,
            0.70054483, 0.8701863, 0.49413827, 0.84670645, 0.8069649, 0.093459, 0.93408287,
            0.8206956, 0.70209366, 0.32817394, 0.744203, 0.39091238, 0.43911496, 0.92919487,
            0.29325068, 0.62813336, 0.8131431, 0.19520658, 0.47931832, 0.42483747, 0.47526902,
            0.28184402,
        ],
    )
    .unwrap();
    let conv_layer6 = ConvolutionLayer::new(
        kernel6,
        Some(Array::from_shape_vec((2,), vec![0.09741595, 0.45691565]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output6: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            2.1801584, 3.0897899, 3.993186, 3.4274542, 3.0375195, 2.9717996, 3.1049225, 2.3804576,
            2.5815134, 2.8640795, 3.3378217, 2.604809, 3.2161722, 2.5814717, 1.5064654, 2.7627265,
            4.3617854, 5.135114, 4.529124, 3.9908988, 3.4333718, 3.2960684, 3.3480952, 4.077456,
            4.129569, 3.8183942, 4.0506406, 4.542523, 3.6528156, 2.6937926, 4.6804447, 5.389145,
            6.143829, 6.1094146, 5.529328, 4.4955034, 5.1712847, 4.97801, 4.1841416, 5.749099,
            6.48708, 5.568813, 5.7646093, 4.7187705, 3.4239237, 4.292363, 5.508189, 6.8572836,
            6.546545, 5.898215, 5.5068197, 4.5575724, 4.2867556, 5.4222555, 6.0083256, 6.197069,
            5.906743, 6.066281, 5.059948, 3.680807, 4.945614, 5.39015, 6.18779, 6.289197,
            5.4557357, 4.465491, 5.8936734, 5.604643, 4.8627734, 5.606086, 7.0904827, 6.8891244,
            6.448793, 5.583849, 4.088472, 4.0639815, 5.0364423, 6.1424017, 5.634087, 5.0714273,
            6.0760765, 5.9285264, 4.8551106, 5.130067, 5.8704214, 6.4576216, 6.4635677, 6.6612306,
            5.6964784, 4.208571, 3.9796488, 5.5864873, 7.2644324, 7.1759486, 6.3560867, 5.407142,
            5.3680634, 6.0203853, 5.302801, 5.6124954, 6.3712544, 6.585097, 6.3106294, 4.695149,
            4.131168, 4.292593, 4.711752, 5.864987, 5.2884274, 4.8799043, 5.1165504, 5.8353257,
            6.4907923, 5.4821568, 4.3367386, 5.4337463, 5.449609, 5.290124, 4.17232, 3.5369854,
            3.2289796, 4.2017894, 5.0820293, 5.409123, 5.2492237, 4.8158727, 4.4353094, 5.078276,
            5.3721232, 4.796941, 4.823633, 4.608314, 4.679572, 3.8079877, 2.651725, 2.9077382,
            3.7215157, 3.8684804, 4.07559, 3.5808759, 3.0237033, 2.841784, 3.9223354, 4.1371613,
            3.4743292, 3.2839453, 3.1890488, 2.7706351, 2.024381, 1.1259695, 2.9111292, 4.343168,
            5.167181, 4.5757875, 4.1780834, 4.3477383, 3.293357, 3.5632002, 3.7684605, 3.9169352,
            4.3507714, 3.8429294, 4.1090035, 3.554486, 2.3014321, 3.9107373, 5.9615183, 6.4590225,
            6.012578, 5.828903, 4.8146677, 5.603648, 4.1610374, 4.909008, 6.0942564, 5.931766,
            5.7066884, 6.3371506, 4.5305505, 3.3068004, 5.3503275, 7.6912236, 8.619552, 8.358966,
            7.685773, 6.9960003, 6.1412916, 6.562431, 6.416716, 7.3496666, 7.985533, 7.626526,
            8.1160145, 6.752729, 4.836121, 6.00336, 7.185191, 9.3454485, 9.119083, 7.1074076,
            6.6402664, 7.212632, 6.1475363, 6.629001, 7.98093, 8.196706, 7.9185123, 8.662099,
            7.3359976, 4.908189, 5.6301365, 6.8838344, 8.51221, 8.259585, 7.5132346, 7.234018,
            7.4621916, 7.1728, 7.3124514, 7.0091047, 9.049717, 8.240565, 9.228964, 8.443651,
            5.8031816, 5.4398365, 6.475675, 8.593194, 8.586541, 7.1072483, 7.516702, 7.66866,
            6.769394, 7.0144944, 8.339941, 8.651724, 8.286776, 8.311916, 7.731237, 5.8798094,
            5.273286, 7.2357416, 9.097533, 8.596444, 8.084187, 7.75552, 7.499031, 8.160641,
            7.088048, 7.51515, 8.444716, 7.8217273, 7.590805, 6.9141636, 6.0834637, 4.9894443,
            6.0191407, 8.08497, 7.4832764, 7.4962053, 7.197883, 7.326655, 7.7441444, 6.968737,
            7.308376, 7.938777, 7.3345304, 6.7260313, 5.6192417, 5.5931315, 4.2804227, 5.443257,
            7.334971, 6.733167, 7.078847, 6.051554, 6.726808, 6.9492617, 6.876624, 5.8459105,
            7.352432, 6.2491956, 6.0205045, 4.869985, 3.9138095, 3.335989, 4.9012594, 5.344117,
            5.888342, 4.8126216, 4.5101295, 4.5477915, 5.4022856, 5.09839, 4.5457325, 5.141446,
            4.990667, 3.9012995, 2.741061, 2.2787669,
        ],
    )
    .unwrap();
    let current_output6: Array3<f32> = conv_layer6.convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.44086096, 0.9638409, 0.33859608, 0.26381832, 0.29839757, 0.68755937, 0.09156765,
            0.58584654, 0.04617033, 0.14705709, 0.81179595, 0.16751295, 0.06864621, 0.6308731,
            0.38993102, 0.3644169, 0.68174505, 0.272409, 0.23609333, 0.21866773, 0.80119157,
            0.01742986, 0.49270406, 0.37920174, 0.90869635, 0.8191268, 0.7636344, 0.7827788,
            0.9694966, 0.79533535, 0.00732174, 0.8372113, 0.9449071, 0.7670253, 0.50964797,
            0.7843069, 0.7365313, 0.71123123, 0.89694643, 0.9544987, 0.16811895, 0.97018677,
            0.25394833, 0.5585159, 0.51973414, 0.4357872, 0.29419306, 0.5180376, 0.80581653,
            0.7190028, 0.52249014, 0.5252596, 0.33191478, 0.3388958, 0.18619475, 0.6839338,
            0.72234726, 0.25884646, 0.7980101, 0.36219832, 0.7046317, 0.9284394, 0.468965,
            0.23158234, 0.32747796, 0.9097073, 0.7440483, 0.03255624, 0.30697423, 0.6246821,
            0.1907446, 0.9843364, 0.4038572, 0.5747709, 0.65160054, 0.6822517, 0.9840877,
            0.18341686, 0.5288406, 0.92906404, 0.87780553, 0.9090181, 0.82569945, 0.20383635,
            0.7166643, 0.17061436, 0.91526777, 0.08598401, 0.70100874, 0.40537685, 0.5971982,
            0.92796123, 0.15859716, 0.7859081, 0.8564488, 0.35816404, 0.79062706, 0.9644883,
            0.13154314, 0.31929043, 0.80048305, 0.07180241, 0.52815664, 0.45786336, 0.91537887,
            0.9783313, 0.25753945, 0.42799363, 0.07738555, 0.9294206, 0.07022415, 0.60058224,
            0.6196278, 0.9008346, 0.04155485, 0.82207745, 0.41282526, 0.9949608, 0.3109271,
            0.47614527, 0.7615821, 0.35893062, 0.07713356, 0.6123928, 0.62511915, 0.88098776,
            0.21521498, 0.89468116, 0.1842307, 0.10784956, 0.8354833, 0.2630701, 0.7184675,
            0.06132602, 0.06056971, 0.71349823, 0.00944792, 0.07349233, 0.35231608, 0.8533961,
            0.17608605, 0.18067755, 0.51991457, 0.19053963, 0.5045173, 0.7456122, 0.27621788,
            0.48649722, 0.39297876, 0.54849166,
        ],
    )
    .unwrap();

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.3746991, 0.8194284, 0.34880427, 0.79505837, 0.41293454, 0.890512, 0.12076204,
            0.20799449, 0.88948244, 0.24437675, 0.7731474, 0.65954226, 0.4922565, 0.5211581,
            0.97382414, 0.9779564, 0.1754263, 0.4551989, 0.81067127, 0.7095975, 0.5087082,
            0.78796804, 0.03310984, 0.20805901, 0.45704818, 0.9133983, 0.5689028, 0.04247752,
            0.55938286, 0.9835293, 0.04525762, 0.7176199, 0.82096803, 0.5575717, 0.5744108,
            0.9780689, 0.34563604, 0.3324931, 0.8797563, 0.14932355, 0.1134909, 0.5645703,
            0.30096474, 0.4096875, 0.5703153, 0.88738924, 0.6242374, 0.77620894, 0.681929,
            0.24701218,
        ],
    )
    .unwrap();
    let conv_layer7 = ConvolutionLayer::new(
        kernel7,
        Some(Array::from_shape_vec((2,), vec![0.74485576, 0.61556435]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output7: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            2.6033, 3.5731468, 4.8906484, 4.6791363, 4.008486, 5.152241, 4.707311, 4.3485827,
            3.5034995, 2.8964725, 3.6651316, 4.029862, 6.162582, 6.430152, 7.0588574, 6.302032,
            7.056419, 7.0359483, 5.108075, 4.1745005, 4.6986938, 5.496974, 8.300541, 7.840389,
            7.995198, 8.760781, 9.018595, 8.499648, 7.0355372, 5.2158937, 4.173709, 5.797581,
            7.2873406, 8.253657, 8.256323, 8.014612, 9.046145, 9.82779, 7.142352, 5.455303,
            4.384443, 6.0531096, 7.175431, 8.595897, 8.27265, 8.2515545, 8.95007, 10.139145,
            7.7137775, 5.173278, 5.4192677, 5.4218636, 7.587706, 9.255999, 8.511203, 7.433095,
            8.112528, 9.713017, 7.353309, 4.6030126, 5.391079, 5.7991652, 8.15387, 8.867583,
            8.084197, 7.233124, 7.099613, 8.947626, 6.997748, 4.0920024, 5.5766797, 6.167807,
            8.548659, 8.315416, 9.006032, 7.8479433, 7.59076, 8.47988, 7.497154, 3.7624831,
            6.065793, 6.6629796, 8.843388, 9.219361, 8.288066, 8.592857, 8.534537, 7.625648,
            6.7349296, 3.79642, 5.093558, 6.1229625, 9.0974, 9.09525, 9.22229, 9.054071, 7.888446,
            8.3083, 7.2163706, 4.4282703, 5.1425676, 6.7397366, 8.507914, 8.910223, 7.398932,
            9.628379, 8.158515, 7.8601427, 5.80964, 5.121721, 4.169993, 5.882557, 7.969971,
            8.556304, 7.834431, 8.317997, 7.9310346, 7.7790785, 5.4222436, 4.417535, 4.020998,
            5.487318, 6.6990213, 7.264716, 7.501482, 7.5348306, 6.9831214, 7.3329644, 5.362662,
            4.2791915, 3.8428192, 4.0459113, 5.8649774, 6.118543, 6.2414184, 5.054876, 6.372787,
            6.684459, 4.288764, 3.8835974, 2.598216, 3.2795663, 4.1926765, 4.1443973, 5.013242,
            4.035912, 4.511029, 4.665192, 3.572, 2.459487, 2.7682347, 3.2656598, 4.0446763,
            4.1827936, 4.9016013, 4.4631157, 5.082943, 4.975491, 3.9053211, 3.4006069, 3.4762115,
            4.9183674, 6.2457805, 6.178002, 6.0826473, 7.1544924, 6.4488807, 6.392266, 5.7827525,
            4.0241747, 4.399969, 5.499546, 7.057783, 8.210081, 7.465078, 7.378187, 8.080994,
            8.104984, 6.5446563, 5.304806, 4.080466, 5.90531, 7.23469, 7.135074, 8.164946,
            8.645161, 8.207746, 9.113932, 7.9973774, 5.4542155, 4.9645143, 6.3880415, 8.242966,
            8.626645, 8.038972, 8.205715, 9.490468, 9.6262455, 7.385559, 5.6939306, 5.302728,
            6.317588, 7.397186, 8.516167, 8.574812, 8.237022, 8.160406, 9.468291, 7.5753746,
            5.236477, 5.6449714, 6.3932543, 8.152437, 8.177156, 7.6526976, 7.2297487, 7.901343,
            8.09922, 6.5230403, 4.2326474, 5.856301, 6.569883, 7.7762146, 8.544361, 7.912849,
            8.242538, 8.224316, 8.078001, 6.4885406, 4.440424, 5.229505, 6.5671105, 8.887158,
            8.879017, 9.257597, 8.102829, 7.7029514, 8.219288, 6.313367, 3.8875408, 5.5005717,
            6.3887377, 8.544161, 9.361124, 8.174818, 8.721301, 8.291776, 8.518621, 6.725279,
            4.8767185, 4.95595, 6.325639, 8.522665, 7.994526, 9.071783, 8.227226, 8.514399,
            7.901396, 5.8774223, 3.6890934, 4.3864517, 6.1005645, 8.000898, 7.483266, 7.9733987,
            8.7341385, 6.6742206, 6.375644, 5.7799497, 4.8473425, 3.6954348, 5.299999, 7.0085335,
            7.4916196, 6.884857, 6.812152, 8.000835, 7.9947696, 5.272868, 4.2905087, 3.4736416,
            4.6425385, 4.5026073, 5.504796, 6.2872424, 5.7988524, 4.8540034, 5.403021, 4.25295,
            2.9022684, 2.4649734, 3.5676715, 4.0119767, 4.225875, 3.7342684, 4.1720943, 4.4741044,
            3.98999, 3.2590322, 3.292946,
        ],
    )
    .unwrap();
    let current_output7: Array3<f32> = conv_layer7.convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.63869125, 0.05875124, 0.3210932, 0.96946657, 0.09463912, 0.6275637, 0.34162354,
            0.74390864, 0.8736778, 0.9513908, 0.24045336, 0.7003475, 0.87750345, 0.16564246,
            0.6314963, 0.21785556, 0.7654987, 0.13988015, 0.03287261, 0.82226163, 0.60896695,
            0.13331373, 0.62307173, 0.23316076, 0.9600204, 0.55291533, 0.29808274, 0.8765127,
            0.98263544, 0.27148733, 0.11101003, 0.2754741, 0.4540411, 0.19701396, 0.08459944,
            0.98017716, 0.9800813, 0.62585706, 0.18621969, 0.5836321, 0.17965508, 0.81336415,
            0.94554824, 0.28304926, 0.32718146, 0.46701643, 0.91682273, 0.6142979, 0.19277428,
            0.28408903, 0.25507236, 0.9800453, 0.36125833, 0.96792, 0.33258557, 0.9508625,
            0.8424581, 0.8130291, 0.7774976, 0.17691322, 0.9389267, 0.22419459, 0.33442205,
            0.7614585, 0.37563834, 0.70754576, 0.1499497, 0.9873837, 0.7166968, 0.40278858,
            0.22288306, 0.3279577, 0.07722609, 0.598755, 0.8143903, 0.87905455, 0.83061284,
            0.9923988, 0.6196494, 0.536406, 0.06662867, 0.83588266, 0.28182983, 0.662181,
            0.99850965, 0.60448396, 0.12318801, 0.91713256, 0.8540598, 0.19103892, 0.5929614,
            0.9118344, 0.9381113, 0.3421722, 0.8149188, 0.9595595, 0.02717085, 0.8916309,
            0.9755575, 0.27588442, 0.59208006, 0.00008138, 0.9552037, 0.12578069, 0.01249961,
            0.05413999, 0.5153533, 0.40144867, 0.8698811, 0.6468678, 0.8840439, 0.34315115,
            0.52290094, 0.66408885, 0.98115784, 0.85046166, 0.7979905, 0.9444794, 0.6930413,
            0.90735817, 0.91156703, 0.45996496, 0.9045769, 0.17170428, 0.43418503, 0.69308424,
            0.42869946, 0.9244341, 0.41451567, 0.6224708, 0.00536506, 0.33826837, 0.47926104,
            0.0032256, 0.02230139, 0.35960108, 0.48593593, 0.86064774, 0.28908366, 0.4153976,
            0.3468706, 0.2242362, 0.93169004, 0.3198661, 0.5576108, 0.17364207, 0.69407916,
            0.88076496, 0.11111139, 0.19382912,
        ],
    )
    .unwrap();

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.9307082, 0.9188555, 0.10532705, 0.88550454, 0.20754221, 0.97926295, 0.3472928,
            0.71126235, 0.03633394, 0.7482733, 0.28782296, 0.7382309, 0.60003114, 0.3259743,
            0.85578996, 0.14142898, 0.39191914, 0.05517358, 0.6050927, 0.968827, 0.47373444,
            0.76571184, 0.50472075, 0.53850234, 0.05837096, 0.56728834, 0.3979838, 0.2393961,
            0.36507484, 0.01646563, 0.27730468, 0.62646276, 0.94121945, 0.66457146, 0.8425775,
            0.4301739, 0.68211764, 0.6059688, 0.7629583, 0.56038123, 0.48163053, 0.437191,
            0.43973154, 0.29997745, 0.21913478, 0.6611514, 0.209788, 0.176356, 0.88925517,
            0.14793599,
        ],
    )
    .unwrap();
    let conv_layer8 = ConvolutionLayer::new(
        kernel8,
        Some(Array::from_shape_vec((2,), vec![0.36509594, 0.5616029]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output8: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            2.7449784, 3.5132215, 3.1375582, 4.021124, 4.097634, 4.0565076, 3.9421825, 4.9759116,
            3.9639268, 3.1777587, 3.1340966, 3.7202992, 4.9001937, 5.11064, 4.691359, 6.0629992,
            5.9595914, 6.563224, 4.1812944, 3.889308, 3.5427568, 4.711447, 6.758514, 6.4339275,
            8.324403, 6.9655585, 7.4907713, 7.5545564, 6.465819, 4.609989, 4.73761, 4.4411387,
            6.5384274, 7.421242, 7.9294405, 8.05161, 7.8074226, 7.720375, 6.3511395, 3.9204955,
            3.8586721, 5.475364, 6.2805023, 7.4097323, 7.9294853, 7.5805235, 8.495197, 8.356231,
            6.0416946, 5.3439183, 3.1665668, 5.2817345, 5.790683, 7.2011614, 8.425755, 8.205624,
            9.254621, 8.7059355, 7.460658, 4.622969, 3.4962764, 6.0188427, 6.5793767, 9.373973,
            8.082028, 9.530889, 8.549486, 8.098201, 7.214633, 4.9885316, 4.1952834, 5.513567,
            8.660893, 8.424653, 8.065507, 9.949638, 9.4852085, 9.085471, 6.5434165, 6.20568,
            3.3617582, 5.8334007, 7.447052, 7.3337774, 6.594138, 7.9122405, 8.986357, 7.702005,
            6.662562, 6.2690754, 4.0591598, 5.6063538, 6.7091484, 7.748539, 7.1747537, 9.574829,
            10.263081, 8.85903, 7.594448, 6.25701, 5.02397, 5.6546025, 7.999748, 8.501414,
            7.2616096, 7.791907, 9.227078, 8.398924, 6.3249063, 6.102354, 5.073204, 5.368964,
            6.8667088, 7.3507953, 7.5756364, 6.62156, 8.6824045, 8.062034, 6.5628314, 5.7699046,
            4.148845, 5.451903, 6.012561, 6.467517, 6.6953263, 7.335601, 7.143327, 8.055761,
            6.6078744, 5.220785, 3.793643, 4.0073805, 5.8579698, 5.38957, 5.836441, 7.0708833,
            6.3557186, 6.785874, 5.5612583, 4.3576503, 2.5094316, 3.318136, 3.8598742, 4.215289,
            4.465652, 4.0845637, 4.1830964, 4.745019, 4.1836686, 3.3624046, 1.9996238, 3.2735639,
            3.7494593, 4.043677, 4.260394, 3.6607485, 4.8078275, 4.9028997, 3.9579182, 3.330925,
            3.420144, 4.465617, 4.6997643, 5.267934, 5.9486976, 5.972321, 5.8742714, 6.5708427,
            6.020364, 4.318463, 4.118038, 5.010676, 6.006966, 5.9727654, 6.85991, 6.756764,
            6.755266, 7.009165, 6.038215, 4.740406, 4.108059, 4.437678, 6.131267, 6.954908,
            7.422479, 7.8400345, 7.8231506, 7.7165833, 6.4054112, 3.9518843, 3.595477, 4.868694,
            6.180392, 6.561781, 7.2304873, 7.659125, 8.226092, 7.9882007, 5.7348876, 4.6058297,
            4.2030783, 5.209709, 6.6420646, 6.778768, 7.4660206, 8.188132, 8.493878, 8.257962,
            6.44025, 4.5229983, 4.0503798, 5.6797066, 6.469883, 8.09245, 7.510545, 8.102623,
            9.272196, 8.314793, 6.4096456, 4.895533, 4.1254745, 5.2502165, 6.4718866, 8.110455,
            7.9492283, 8.352958, 9.090006, 9.024344, 6.550736, 5.393064, 3.18823, 5.274619,
            6.8577294, 6.887619, 7.5984387, 7.9749765, 8.200622, 8.050905, 6.5600915, 5.3037586,
            4.180458, 5.587299, 7.551166, 7.7775598, 7.371795, 7.7696815, 8.771551, 8.047958,
            7.388094, 5.4729095, 5.0458655, 6.188584, 7.022517, 7.140716, 6.977268, 6.944848,
            8.184472, 7.887848, 6.932742, 5.708428, 4.6142926, 5.455038, 6.1186843, 6.1224833,
            6.6866345, 6.255293, 7.923517, 8.047965, 6.910773, 5.81879, 4.237299, 5.902512,
            6.1956654, 6.413412, 6.9401593, 7.016571, 7.5292883, 7.3724437, 6.7651577, 5.2614803,
            3.7868319, 4.123176, 4.8870974, 4.7781367, 5.0764394, 5.8380175, 6.2318573, 6.297719,
            5.50374, 4.069491, 2.4996896, 3.2731123, 3.6568577, 3.5570123, 3.789755, 4.2171817,
            4.5482154, 4.539849, 3.8358326, 2.7828808,
        ],
    )
    .unwrap();
    let current_output8: Array3<f32> = conv_layer8.convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.6617385, 0.30053073, 0.36820948, 0.62227124, 0.4957459, 0.69923055, 0.3227648,
            0.9702412, 0.5679234, 0.13432135, 0.7430913, 0.19231908, 0.26170298, 0.10480803,
            0.00958306, 0.20726651, 0.20851518, 0.17973869, 0.23704103, 0.1163867, 0.2735905,
            0.8537909, 0.40303, 0.75797635, 0.34342998, 0.74670875, 0.82946825, 0.91931367,
            0.9654975, 0.18782942, 0.10021565, 0.05109123, 0.3069365, 0.10895161, 0.9891213,
            0.62504834, 0.507994, 0.47125, 0.84314245, 0.6054993, 0.92367506, 0.6953895,
            0.37023902, 0.67128026, 0.43450755, 0.28869846, 0.27641538, 0.8369712, 0.6856483,
            0.26890948, 0.65425915, 0.84581685, 0.51146317, 0.48995435, 0.52071315, 0.80564773,
            0.670521, 0.3835857, 0.47078377, 0.5100531, 0.82525116, 0.02126783, 0.9583153,
            0.23316967, 0.9487504, 0.9609589, 0.95734006, 0.00943314, 0.7521432, 0.46106157,
            0.84370506, 0.16933449, 0.71423984, 0.5316646, 0.6400151, 0.9638914, 0.69432026,
            0.8581641, 0.70813745, 0.2836983, 0.33953485, 0.8950543, 0.20262088, 0.81930757,
            0.09556881, 0.22266188, 0.63842744, 0.8304186, 0.12425002, 0.7582065, 0.09737789,
            0.84872884, 0.17490041, 0.37569723, 0.6669188, 0.8970669, 0.22398192, 0.29424527,
            0.56277037, 0.41113177, 0.7882464, 0.24159203, 0.5460915, 0.29690132, 0.3142075,
            0.7648111, 0.04421633, 0.9636684, 0.98529965, 0.26998708, 0.13811645, 0.9724998,
            0.41856614, 0.13321315, 0.0937838, 0.4742414, 0.79873264, 0.1621314, 0.5493846,
            0.6481355, 0.05176858, 0.17029643, 0.955536, 0.089831, 0.05664136, 0.9231865,
            0.98567015, 0.01680515, 0.54690886, 0.8593988, 0.6496963, 0.8382851, 0.2400014,
            0.36792266, 0.01756373, 0.6596718, 0.5680892, 0.19350345, 0.4854058, 0.7869872,
            0.12335967, 0.14544043, 0.25711668, 0.05608724, 0.18204254, 0.9562488, 0.44598028,
            0.3229758, 0.8930679, 0.24216229,
        ],
    )
    .unwrap();

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (2, 1, 5, 5),
        vec![
            0.21437034, 0.38366762, 0.64894366, 0.8650639, 0.7790032, 0.3529938, 0.37360683,
            0.26240814, 0.554433, 0.90017563, 0.6817857, 0.95833224, 0.28551313, 0.85106283,
            0.70093375, 0.4791875, 0.5805011, 0.9803199, 0.97033703, 0.48236644, 0.66855663,
            0.35855147, 0.25242767, 0.6717967, 0.26290378, 0.53677225, 0.18097793, 0.07985484,
            0.79416144, 0.7215235, 0.42313012, 0.6529702, 0.00384528, 0.08442257, 0.7838985,
            0.980683, 0.36212954, 0.61172485, 0.5263662, 0.8496614, 0.13177402, 0.9175598,
            0.04323238, 0.03087392, 0.03482862, 0.36226457, 0.6059544, 0.29194582, 0.34645593,
            0.9409913,
        ],
    )
    .unwrap();
    let conv_layer9 = ConvolutionLayer::new(
        kernel9,
        Some(Array::from_shape_vec((2,), vec![0.60953087, 0.8610255]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output9: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            3.1022391, 3.7870834, 4.351774, 4.046762, 4.2647405, 4.828589, 5.129796, 4.6594768,
            3.8395026, 3.1996715, 3.2719223, 4.7993274, 5.1238704, 5.566141, 5.5263357, 6.286818,
            7.0842614, 6.5556912, 4.978679, 3.5377252, 4.303751, 5.2000847, 6.9922543, 7.2837353,
            7.7540693, 8.246269, 8.974645, 8.26437, 6.454949, 5.092929, 5.2838736, 5.829172,
            6.7582755, 7.3436303, 6.987233, 7.730906, 8.551069, 8.095481, 6.1241665, 4.4679346,
            5.4689684, 7.3440795, 8.78389, 8.566029, 9.179588, 9.425088, 10.034684, 9.154062,
            6.9000425, 4.5931454, 4.9906344, 6.522969, 8.707191, 8.79291, 9.901071, 9.5672035,
            9.879879, 9.18987, 6.892897, 4.6998405, 6.201602, 7.529836, 8.577413, 9.15321,
            9.199858, 9.40282, 9.541113, 9.417935, 6.78834, 4.422063, 6.0806904, 7.2578816,
            8.175558, 9.331595, 9.291385, 8.6186695, 9.41273, 9.011672, 6.5000563, 4.6690383,
            5.3771605, 6.540518, 8.11864, 8.467595, 9.473368, 8.752104, 8.551831, 8.405597,
            6.5599346, 4.6794114, 5.5691895, 6.0133142, 7.195765, 7.8985767, 7.8330364, 8.300597,
            8.477016, 9.043872, 6.7011523, 4.412522, 4.8886266, 6.556704, 6.171854, 6.8033113,
            7.00379, 7.0231667, 8.012882, 8.429431, 6.8556333, 4.8838587, 5.003192, 5.2992215,
            6.4202685, 7.271667, 7.25386, 7.1722465, 7.4927115, 8.47427, 6.636117, 4.4266276,
            5.299691, 5.283334, 4.678632, 6.5116262, 7.4323897, 6.3104897, 7.606007, 9.752092,
            6.7095337, 4.326124, 4.2878895, 4.2489967, 4.0837092, 5.114474, 6.586625, 5.3894796,
            6.1583257, 7.909663, 5.627153, 3.4438384, 2.725332, 2.9813282, 2.725422, 4.111557,
            4.963412, 4.0057287, 5.070765, 5.913891, 3.8368163, 2.9820309, 2.5389702, 3.9768362,
            4.2019854, 4.3987527, 4.282536, 4.9701986, 5.051427, 4.4607596, 3.3577595, 3.3194883,
            2.343745, 3.037998, 4.7992268, 4.0684767, 4.2997713, 4.679719, 5.234048, 4.6062927,
            4.0463834, 3.8497803, 3.4772367, 5.4440136, 5.7407556, 6.1547966, 5.5848813, 7.5042305,
            7.3377233, 6.141792, 4.86919, 4.7517962, 3.0396032, 4.620158, 5.986314, 5.8801794,
            6.6688166, 5.94335, 7.0085034, 6.241532, 5.222821, 4.491904, 4.56494, 5.2752023,
            7.4953547, 7.296403, 6.934966, 7.5589876, 8.70726, 7.4117813, 4.619333, 4.6284475,
            3.810347, 5.9130077, 6.5666533, 7.9968643, 7.0157485, 7.8635244, 8.381229, 7.5333257,
            5.0670605, 4.5106025, 4.2257614, 5.8644595, 7.406027, 6.78677, 7.6397085, 6.8988137,
            7.79695, 7.4730735, 5.6050124, 3.863776, 4.458745, 4.9520493, 7.7121506, 7.7647004,
            7.9831743, 6.749866, 7.8185596, 7.789216, 5.2013106, 3.785166, 3.9278805, 5.604553,
            6.3883905, 7.2268724, 6.6464376, 7.5562906, 7.6093955, 6.843456, 5.4032335, 4.7867074,
            3.3005128, 5.227192, 5.6980095, 6.9685717, 6.735334, 6.2194567, 6.6684675, 6.971389,
            5.148137, 4.275342, 4.0514703, 3.7780833, 6.1307936, 6.4385653, 5.5001526, 5.852504,
            6.938431, 7.585172, 4.54947, 4.4922442, 3.8192706, 4.2845693, 4.6851735, 7.4005885,
            5.271672, 4.6011395, 6.84214, 7.1165752, 4.532636, 4.0954237, 3.244461, 3.5184445,
            4.681913, 5.919652, 6.471921, 4.374782, 7.2938766, 7.8089123, 4.6121435, 3.9820182,
            3.77138, 2.8941326, 2.9718182, 5.3111353, 4.731549, 3.3885431, 4.726508, 6.411577,
            4.119967, 3.1862042, 2.3217285, 2.760424, 2.4913058, 4.0534134, 4.9480214, 3.3725104,
            4.1088147, 5.8721056, 3.7824578, 2.2277904,
        ],
    )
    .unwrap();
    let current_output9: Array3<f32> = conv_layer9.convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.1627552, 0.8939359, 0.66327935, 0.48094535, 0.06551108, 0.86129206, 0.65446067,
            0.9592776, 0.8000413, 0.21450381, 0.6442533, 0.46971878, 0.84573215, 0.34651902,
            0.18830031, 0.57119006, 0.27269888, 0.7915957, 0.21737069, 0.04463017, 0.393406,
            0.8441482, 0.77705365, 0.6315176, 0.8522896, 0.16809769, 0.22305161, 0.773223,
            0.9678148, 0.2237789, 0.8982615, 0.271913, 0.34780893, 0.49277794, 0.14560463,
            0.33638617, 0.1585067, 0.18610527, 0.6963084, 0.9429821, 0.40789625, 0.20056698,
            0.37306353, 0.9367061, 0.7103306, 0.06833509, 0.48335183, 0.45182207, 0.96346164,
            0.00378525, 0.33689302, 0.28288215, 0.75004077, 0.1607512, 0.514175, 0.35879079,
            0.36688787, 0.00774159, 0.15532039, 0.01133456, 0.94680935, 0.052598, 0.73530346,
            0.8096563, 0.7097644, 0.37942106, 0.38656324, 0.13763146, 0.99930644, 0.67476803,
            0.06055127, 0.8463604, 0.4460729, 0.33209085, 0.94373864, 0.5397614, 0.05766413,
            0.64256257, 0.7357459, 0.09256811, 0.8832945, 0.03911254, 0.782554, 0.4004812,
            0.80732703, 0.8010379, 0.28867772, 0.7802926, 0.9490529, 0.5395702, 0.1369102,
            0.4513485, 0.1162144, 0.9589836, 0.24819064, 0.3149064, 0.22322156, 0.39812055,
            0.45308354, 0.5711523, 0.97817534, 0.06805564, 0.5386646, 0.6699801, 0.1879456,
            0.8407316, 0.64728755, 0.53731096,
        ],
    )
    .unwrap();

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.63207716, 0.00916763, 0.46754488, 0.8670982, 0.1932068, 0.43971533, 0.10441232,
            0.46486124, 0.22910197, 0.7679019, 0.23872072, 0.03931138, 0.8551502, 0.19610135,
            0.8555064, 0.08035298, 0.05671094, 0.9091975, 0.27582648, 0.33816597, 0.42012835,
            0.7745094, 0.14011143, 0.47505257, 0.98297566, 0.5085966, 0.22395916, 0.01153891,
            0.669607, 0.12918296, 0.55476546, 0.528783, 0.5067741, 0.14234911, 0.5152856,
            0.6446142, 0.9118427, 0.8193508, 0.989135, 0.7842302, 0.59264964, 0.35247177,
            0.48483032, 0.22649786, 0.04158387, 0.5814206, 0.8653732, 0.4524277, 0.44947338,
            0.5519129, 0.79122764, 0.7513198, 0.9315116, 0.03313805,
        ],
    )
    .unwrap();
    let conv_layer10 = ConvolutionLayer::new(
        kernel10,
        Some(Array::from_shape_vec((2,), vec![0.41213843, 0.45310238]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output10: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            3.0389624, 5.020321, 4.5230556, 4.9669485, 4.4092317, 2.4811852, 3.8575613, 6.8182135,
            6.1254864, 7.189351, 5.723819, 4.542436, 2.9191744, 6.141574, 5.444331, 5.990166,
            5.5719285, 4.318887, 2.8635156, 5.3144755, 5.163642, 5.7078476, 6.5512433, 4.0972834,
            2.5483556, 6.3901696, 5.7492247, 6.070595, 6.7953887, 4.67092, 1.8497971, 5.0089345,
            3.9879053, 4.597967, 5.2507787, 2.9399614, 3.428148, 5.156784, 5.730273, 4.8706713,
            4.6241417, 3.3956196, 5.046685, 8.81785, 8.201309, 8.064345, 7.158043, 6.044256,
            5.6152, 7.762421, 6.8773236, 7.4915066, 7.549923, 5.358979, 4.9051085, 6.1254487,
            6.0758553, 8.137968, 8.078319, 5.4810133, 4.5124097, 6.3583255, 6.067772, 8.233041,
            7.209484, 4.7685637, 3.9643974, 5.2332697, 5.630124, 7.1275115, 6.5879555, 3.5950315,
        ],
    )
    .unwrap();
    let current_output10: Array3<f32> = conv_layer10.convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.01799934, 0.4328227, 0.23842481, 0.20688592, 0.57869387, 0.9324833, 0.43915927,
            0.53123087, 0.5324186, 0.4149537, 0.22217223, 0.0080786, 0.65063345, 0.7681623,
            0.8421627, 0.27179125, 0.68530315, 0.9955617, 0.77906156, 0.18006648, 0.5975193,
            0.6555531, 0.9498266, 0.9690994, 0.5122471, 0.3840358, 0.8757204, 0.7260429,
            0.04691354, 0.40678895, 0.35535267, 0.19270384, 0.23519029, 0.6665529, 0.26402712,
            0.55168146, 0.08576613, 0.9567203, 0.57141143, 0.20602623, 0.75538653, 0.96776,
            0.44755465, 0.82362133, 0.29203537, 0.30861592, 0.39762703, 0.26186082, 0.9658112,
            0.27424002, 0.50570756, 0.8114843, 0.5536027, 0.59788686, 0.05054026, 0.28394443,
            0.6402348, 0.02258505, 0.60607, 0.6834324, 0.8004999, 0.3349493, 0.4295082, 0.37033585,
            0.0394791, 0.50698835, 0.29841292, 0.9388161, 0.84357476, 0.29760668, 0.25654384,
            0.71037215, 0.14646496, 0.9906275, 0.9552909, 0.7966291, 0.6094893, 0.7271988,
            0.09518696, 0.3957746, 0.6157527, 0.31079137, 0.46793708, 0.8514491, 0.86081386,
            0.8208274, 0.2372746, 0.6977758, 0.79387194, 0.9463199, 0.99063903, 0.29514915,
            0.8795419, 0.741553, 0.03520088, 0.83411527, 0.47134155, 0.26704508, 0.2872401,
            0.04289522, 0.583651, 0.94414073, 0.5729697, 0.72244126, 0.7707775, 0.02079507,
            0.22973806, 0.18128674,
        ],
    )
    .unwrap();

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.05054512, 0.6523751, 0.27093726, 0.32479268, 0.53774405, 0.08921466, 0.18494032,
            0.78120434, 0.15868789, 0.81183356, 0.21792394, 0.6620494, 0.6886836, 0.39724785,
            0.59319293, 0.02472531, 0.21891202, 0.5342134, 0.4041879, 0.53426075, 0.20461221,
            0.29362342, 0.7835011, 0.47930118, 0.2895624, 0.7320774, 0.55179524, 0.37774232,
            0.04187773, 0.23883641, 0.63051957, 0.97746944, 0.6415133, 0.4162999, 0.04763152,
            0.75958186, 0.13098118, 0.6238241, 0.4102024, 0.5710282, 0.59153587, 0.66274744,
            0.6454271, 0.8120847, 0.22876394, 0.6206928, 0.19057496, 0.4622738, 0.9772445,
            0.17967562, 0.27354005, 0.48198408, 0.09082693, 0.6217685,
        ],
    )
    .unwrap();
    let conv_layer11 = ConvolutionLayer::new(
        kernel11,
        Some(Array::from_shape_vec((2,), vec![0.0965838, 0.8904992]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output11: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            2.5894403, 3.996714, 4.379137, 3.8662531, 4.022718, 3.31274, 4.444022, 5.991632,
            6.741725, 5.950078, 6.662645, 5.423752, 5.0222955, 6.278115, 6.3333263, 5.9442573,
            6.5007076, 5.206387, 4.5978894, 6.093436, 5.7443967, 5.670044, 6.503948, 5.667868,
            4.459093, 5.592832, 4.8813915, 5.234021, 5.029552, 4.0922165, 2.9163847, 4.4320393,
            3.9976025, 3.0036428, 2.850291, 2.297975, 3.3988686, 5.1556597, 5.748653, 5.3626976,
            5.9707623, 4.761983, 5.6825285, 7.4885945, 7.587149, 7.616898, 7.7561526, 5.1520433,
            4.6683054, 8.368592, 7.6399293, 7.244893, 8.47705, 6.144246, 4.9651856, 7.8220925,
            6.749905, 7.7673516, 8.38663, 5.6335883, 4.1613183, 7.951113, 7.2465034, 6.3423667,
            6.079445, 4.471917, 3.423968, 5.024146, 4.8112, 4.639446, 4.0552325, 3.3184092,
        ],
    )
    .unwrap();
    let current_output11: Array3<f32> = conv_layer11.convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.5337058, 0.17222154, 0.62424076, 0.95776683, 0.998361, 0.150883, 0.28713444,
            0.35105017, 0.1765902, 0.9674033, 0.65025777, 0.1959308, 0.3119046, 0.55247456,
            0.38556734, 0.18145509, 0.94255227, 0.7036003, 0.3402552, 0.16401337, 0.28418577,
            0.5504918, 0.6148071, 0.7740251, 0.37459207, 0.25677747, 0.80441076, 0.17314304,
            0.5946227, 0.30094627, 0.06480476, 0.5798754, 0.62549657, 0.6065069, 0.9259787,
            0.3677915, 0.69532603, 0.8356569, 0.39276573, 0.18570696, 0.61698794, 0.9064707,
            0.01547038, 0.2551995, 0.11438051, 0.03861368, 0.6524532, 0.36442748, 0.08230381,
            0.79969245, 0.27816203, 0.3741886, 0.44356522, 0.27386904, 0.4171807, 0.14990133,
            0.4750283, 0.6358263, 0.77572674, 0.7072159, 0.34310365, 0.36999545, 0.8200852,
            0.46510443, 0.9230857, 0.86201537, 0.04691705, 0.12260284, 0.89921826, 0.47400048,
            0.7492544, 0.05440097, 0.28273952, 0.9184355, 0.9064988, 0.7027802, 0.19125043,
            0.8670149, 0.08634489, 0.722654, 0.77540857, 0.00211577, 0.6443405, 0.2344423,
            0.9849179, 0.9893316, 0.87634915, 0.48734385, 0.8760625, 0.53053117, 0.01152504,
            0.6788874, 0.76156837, 0.4680538, 0.07214947, 0.549209, 0.8383253, 0.00365476,
            0.9782156, 0.7419056, 0.40790308, 0.00302504, 0.80174476, 0.7689671, 0.50054824,
            0.16478458, 0.89107823, 0.7763043,
        ],
    )
    .unwrap();

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.73042727, 0.41667554, 0.7348974, 0.71259016, 0.93557405, 0.37013116, 0.14954911,
            0.33766475, 0.39673004, 0.03940821, 0.2414454, 0.9373305, 0.84819096, 0.9272432,
            0.8604789, 0.92845494, 0.8023847, 0.06647868, 0.12827316, 0.02774826, 0.8982795,
            0.1193029, 0.37523487, 0.28379655, 0.0638791, 0.08446726, 0.68760884, 0.2630593,
            0.01052708, 0.45302406, 0.10402057, 0.5539082, 0.39986408, 0.53770447, 0.24856173,
            0.12796782, 0.80071914, 0.38390577, 0.6908975, 0.5850918, 0.71101063, 0.17578217,
            0.55867785, 0.71616316, 0.3247584, 0.9196999, 0.46712968, 0.08430128, 0.83232373,
            0.49657014, 0.24024557, 0.60874844, 0.47418702, 0.9770886,
        ],
    )
    .unwrap();
    let conv_layer12 = ConvolutionLayer::new(
        kernel12,
        Some(Array::from_shape_vec((2,), vec![0.99522823, 0.7749884]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output12: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            4.05864, 5.16394, 4.8787503, 5.4523783, 5.8202224, 4.682358, 5.2053685, 6.7088375,
            6.415704, 7.5525737, 8.548041, 4.8928227, 5.1708636, 6.3880157, 6.2221146, 7.2157764,
            7.8899117, 5.710368, 4.9101024, 6.8678994, 6.936191, 8.383408, 7.9991927, 6.643815,
            4.400743, 6.36263, 7.545504, 8.935466, 8.892407, 5.4544287, 2.7395437, 6.098581,
            5.88268, 7.1915135, 5.9016, 3.9393656, 3.0990975, 4.8004045, 5.1090593, 5.214052,
            4.9327993, 4.084893, 4.384766, 7.2253227, 7.959591, 7.7773285, 6.6621876, 5.8424015,
            3.6619034, 6.113656, 7.151574, 6.7550335, 6.897914, 6.014388, 3.7949307, 6.807229,
            7.856292, 8.404517, 7.1535196, 6.1036997, 3.5107875, 6.1589355, 7.1994305, 8.834591,
            8.155199, 5.840399, 2.580062, 5.09935, 4.756629, 6.490039, 5.467449, 4.2854652,
        ],
    )
    .unwrap();
    let current_output12: Array3<f32> = conv_layer12.convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );

    let test_input13 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.7253688, 0.26021662, 0.8869578, 0.5181486, 0.5871326, 0.76900613, 0.5745777,
            0.81429285, 0.78002185, 0.7069771, 0.33134556, 0.7407027, 0.58577555, 0.40479863,
            0.7506117, 0.11343616, 0.8795398, 0.83064, 0.8858372, 0.3898591, 0.9350765, 0.9673369,
            0.64465624, 0.0283905, 0.22112074, 0.1391855, 0.34128338, 0.65248054, 0.291874,
            0.70765275, 0.32796225, 0.22921298, 0.59572685, 0.5726663, 0.72872376, 0.8248998,
            0.29288608, 0.92347336, 0.25887516, 0.91578674, 0.800785, 0.7670362, 0.8990461,
            0.8424308, 0.7045559, 0.43518323, 0.48451254, 0.31151697, 0.10086012, 0.5242353,
            0.19001916, 0.01069371, 0.01020448, 0.12606935, 0.04778918, 0.8456499, 0.57045126,
            0.46361542, 0.7532553, 0.62787765, 0.3127784, 0.9686197, 0.96754897, 0.5766132,
            0.6463905, 0.6347338, 0.52757853, 0.55145216, 0.08155768, 0.13378453, 0.2262157,
            0.73179847, 0.5428326, 0.9094368, 0.2528448, 0.24383228, 0.7446406, 0.5544842,
            0.01949351, 0.13375893, 0.04438103, 0.8489, 0.6848837, 0.9220802, 0.00185038,
            0.44556108, 0.00844186, 0.8082305, 0.33159012, 0.5138473, 0.65069795, 0.9300001,
            0.58097035, 0.5413155, 0.5714561, 0.21683556, 0.8548128, 0.02262598, 0.62476623,
            0.33444464, 0.98826236, 0.03221937, 0.12669064, 0.50246465, 0.42635268, 0.91064155,
            0.7792924, 0.07601635,
        ],
    )
    .unwrap();

    let kernel13: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.6067355, 0.3940292, 0.30074376, 0.1328066, 0.72018456, 0.34319454, 0.6295161,
            0.03357495, 0.03066352, 0.51702976, 0.9283114, 0.36689135, 0.6327302, 0.37459058,
            0.93406814, 0.33968034, 0.59511477, 0.4350908, 0.7094508, 0.29612544, 0.80898666,
            0.7905302, 0.4748418, 0.6989706, 0.85952836, 0.70326394, 0.38940284, 0.37933362,
            0.22292, 0.3949557, 0.27719194, 0.8619771, 0.9255003, 0.30563155, 0.5844432,
            0.36121982, 0.09087573, 0.23811613, 0.17829578, 0.9398569, 0.04807154, 0.7588201,
            0.05337733, 0.19222781, 0.98696715, 0.32119673, 0.3872288, 0.74463385, 0.6260977,
            0.0084233, 0.31085488, 0.10247751, 0.60939455, 0.00353958, 0.22236562, 0.31823838,
            0.9627444, 0.866447, 0.8205645, 0.7792785, 0.61566937, 0.59327537, 0.33567885,
            0.96525836, 0.47292593, 0.2669342, 0.705448, 0.28257245, 0.02662205, 0.05098573,
            0.8293213, 0.9416077, 0.9101412, 0.07020015, 0.8425068, 0.9708137, 0.3117258,
            0.11623824, 0.19467542, 0.09732427, 0.43287596, 0.20617688, 0.8857049, 0.9601851,
            0.09430943, 0.28105715, 0.6942895, 0.07089514, 0.7148581, 0.00085336, 0.23516753,
            0.04615124, 0.59699446, 0.53420085, 0.75324225, 0.38793716, 0.2669936, 0.29911962,
            0.7380972, 0.17850904, 0.65695775, 0.8119258, 0.26960826, 0.12972821, 0.6597052,
            0.7345929, 0.6485681, 0.22981846, 0.24392553, 0.26706976, 0.32711208, 0.9581323,
            0.31259444, 0.91530424, 0.17250775, 0.715259, 0.5014661, 0.7273789, 0.23862323,
            0.4093651, 0.04974006, 0.8688277, 0.46409306, 0.20740515, 0.19872624, 0.27135858,
            0.02647329, 0.90772045, 0.97377276, 0.47016057, 0.06899374, 0.47393376, 0.49847803,
            0.02369655, 0.10663922, 0.02373338, 0.21085607, 0.56809616, 0.70259374, 0.4123619,
            0.01858313, 0.25862443, 0.4823392, 0.47215322, 0.593886, 0.8265343, 0.06712108,
            0.3228139, 0.11140465, 0.59627575,
        ],
    )
    .unwrap();
    let conv_layer13 = ConvolutionLayer::new(
        kernel13,
        Some(Array::from_shape_vec((2,), vec![0.49184018, 0.8395536]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output13: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            7.1606693, 9.640763, 11.482331, 12.540518, 9.341278, 7.9071302, 9.9657955, 14.424926,
            17.53265, 17.552319, 14.711288, 11.685815, 10.811409, 14.812701, 20.54997, 19.796293,
            16.931215, 13.092856, 10.796007, 14.687956, 18.749775, 19.08856, 15.070067, 12.552177,
            7.476909, 11.371192, 13.723333, 14.743895, 10.9071045, 9.222995, 6.909222, 9.5198,
            12.338345, 12.689611, 9.647726, 7.992048, 6.5752573, 9.187079, 10.207565, 11.232181,
            9.241844, 6.725333, 7.731373, 11.421403, 15.058673, 14.1337805, 12.23742, 8.850928,
            10.531734, 14.051654, 18.181728, 16.768549, 14.990841, 10.86004, 9.0231905, 13.548208,
            16.962452, 18.184023, 15.370078, 11.191114, 7.6377687, 10.546945, 14.414003, 14.651036,
            11.239256, 7.365203, 6.271413, 8.039053, 11.006603, 11.040844, 10.170305, 7.3365364,
        ],
    )
    .unwrap();
    let current_output13: Array3<f32> = conv_layer13.convolve(&test_input13);

    assert!(
        arr_allclose(&current_output13, &target_output13),
        "{:?} was not equal to {:?}",
        current_output13,
        target_output13
    );

    let test_input14 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.13370071, 0.25792846, 0.54400545, 0.8792363, 0.58678144, 0.03434712, 0.8123595,
            0.67917913, 0.02545591, 0.2468276, 0.9191908, 0.02958322, 0.20474248, 0.76555794,
            0.82307637, 0.24628638, 0.17773865, 0.17740512, 0.4937253, 0.9466453, 0.13741271,
            0.728613, 0.5338591, 0.7898385, 0.47936276, 0.23633894, 0.8572216, 0.06004518,
            0.3347224, 0.50485814, 0.09635731, 0.18004768, 0.24514198, 0.228041, 0.05106571,
            0.30884218, 0.38737774, 0.7948706, 0.5052517, 0.23866583, 0.5068071, 0.15044466,
            0.09537497, 0.13518302, 0.7257979, 0.86458087, 0.7176047, 0.09527912, 0.72005635,
            0.7382226, 0.41232714, 0.5491061, 0.7183669, 0.07962471, 0.04476061, 0.19437055,
            0.79608136, 0.6295519, 0.98047, 0.56819236, 0.10505454, 0.9480506, 0.10080674,
            0.9538371, 0.2355401, 0.94827145, 0.46488547, 0.60260093, 0.76637876, 0.3219317,
            0.4168223, 0.25562465, 0.8997145, 0.59076214, 0.22263806, 0.6840723, 0.24348243,
            0.94946456, 0.34627816, 0.9748906, 0.7407666, 0.9677088, 0.13005458, 0.69001645,
            0.14445187, 0.9216249, 0.03732051, 0.44508553, 0.666532, 0.9382296, 0.80578685,
            0.976145, 0.6098745, 0.04455515, 0.5690737, 0.6428197, 0.21377262, 0.6692434,
            0.86947584, 0.12576632, 0.8154824, 0.3646563, 0.32867205, 0.00950876, 0.02384425,
            0.68798536, 0.6243543, 0.061506,
        ],
    )
    .unwrap();

    let kernel14: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.4878141, 0.24558064, 0.15653013, 0.40195072, 0.52372193, 0.62839466, 0.67610437,
            0.6370576, 0.74306166, 0.8282889, 0.39436254, 0.45260343, 0.6606655, 0.7309763,
            0.40489906, 0.9551375, 0.4431474, 0.6631732, 0.18731794, 0.43634078, 0.4686375,
            0.7620647, 0.57885796, 0.26523942, 0.13030814, 0.7995473, 0.951001, 0.58605653,
            0.82163817, 0.21192186, 0.12197074, 0.06249312, 0.3968833, 0.23130116, 0.670139,
            0.89535373, 0.9697048, 0.7154457, 0.8203782, 0.21395262, 0.7457981, 0.7147152,
            0.05275504, 0.93545914, 0.8986874, 0.8690856, 0.63580817, 0.15263815, 0.7466949,
            0.6235891, 0.62486136, 0.7352324, 0.23342584, 0.9827126, 0.93357897, 0.96423954,
            0.02081718, 0.47192466, 0.50718915, 0.9034243, 0.678573, 0.48106775, 0.27722874,
            0.0061415, 0.2891619, 0.9937529, 0.02278532, 0.7661429, 0.23943478, 0.7568481,
            0.1846646, 0.05945846, 0.7522374, 0.723256, 0.5690188, 0.80126184, 0.13196982,
            0.2549996, 0.9684265, 0.09975351, 0.6575368, 0.01221572, 0.5690517, 0.8633032,
            0.5916843, 0.7327984, 0.38392547, 0.45234743, 0.88714564, 0.48625886, 0.4974664,
            0.280569, 0.3272779, 0.7308698, 0.16297498, 0.8690239, 0.5834708, 0.33016786,
            0.2406453, 0.599151, 0.8538999, 0.30761606, 0.3641591, 0.11430372, 0.45364544,
            0.6984523, 0.7053654, 0.4003387, 0.38632825, 0.91106904, 0.5180514, 0.1837249,
            0.38816592, 0.16589011, 0.91154295, 0.93466866, 0.9079338, 0.6218017, 0.7199313,
            0.5790186, 0.5812801, 0.5897581, 0.00632351, 0.51240736, 0.3697457, 0.13892107,
            0.9900367, 0.47229373, 0.56468743, 0.59834725, 0.6383385, 0.03793695, 0.9450343,
            0.96132326, 0.6061949, 0.63035446, 0.5111371, 0.03746503, 0.558335, 0.30164844,
            0.68653256, 0.99669343, 0.5127781, 0.25915265, 0.34361982, 0.6647127, 0.42920145,
            0.22015804, 0.22396304, 0.553291,
        ],
    )
    .unwrap();
    let conv_layer14 = ConvolutionLayer::new(
        kernel14,
        Some(Array::from_shape_vec((2,), vec![0.21043801, 0.03016802]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output14: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            6.7260942, 10.571867, 12.969877, 13.38302, 8.830346, 7.948741, 9.19288, 12.565776,
            15.883943, 17.964706, 12.97668, 10.919843, 12.980313, 17.409218, 21.744884, 22.099907,
            15.499072, 12.296867, 11.302959, 14.03218, 20.199999, 21.534632, 17.260025, 10.735306,
            10.005278, 10.9819565, 16.337914, 17.072277, 12.7025795, 9.191856, 6.9404707, 8.776961,
            10.668964, 12.608232, 9.761946, 6.56575, 5.324642, 7.755436, 11.868788, 12.13165,
            8.86182, 6.746879, 9.515772, 11.96992, 17.101366, 16.580408, 11.436218, 9.8938465,
            12.041853, 14.340117, 20.15907, 20.36668, 15.772141, 11.223363, 11.119549, 13.952534,
            18.305603, 19.92654, 15.108596, 11.062348, 9.444029, 11.801732, 13.678038, 15.916568,
            12.756815, 9.140698, 6.9658585, 8.039523, 10.346962, 10.322506, 8.918117, 6.227911,
        ],
    )
    .unwrap();
    let current_output14: Array3<f32> = conv_layer14.convolve(&test_input14);

    assert!(
        arr_allclose(&current_output14, &target_output14),
        "{:?} was not equal to {:?}",
        current_output14,
        target_output14
    );

    let test_input15 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.13123624, 0.4177692, 0.15363416, 0.26550946, 0.9799374, 0.6468661, 0.22700246,
            0.28266105, 0.7568015, 0.49555436, 0.7577122, 0.20788053, 0.91674453, 0.56273526,
            0.45675126, 0.48490578, 0.82385767, 0.42006218, 0.8251126, 0.35886785, 0.09741933,
            0.50827706, 0.09494945, 0.9338919, 0.41674572, 0.12654002, 0.47637334, 0.72644436,
            0.22123201, 0.29542014, 0.46568522, 0.6850643, 0.6808416, 0.3779981, 0.805789,
            0.2891591, 0.6993045, 0.33186397, 0.9734199, 0.9644196, 0.09362596, 0.0414281,
            0.27610767, 0.43870836, 0.34610718, 0.3848816, 0.24301769, 0.23232727, 0.32100558,
            0.22719596, 0.85453415, 0.76819396, 0.8545096, 0.653471, 0.6439924, 0.61992764,
            0.5419032, 0.42076096, 0.7094996, 0.8802664, 0.30416232, 0.00992903, 0.07512625,
            0.21167818, 0.9575676, 0.33277866, 0.5804159, 0.14874539, 0.84465176, 0.33960778,
            0.03217437, 0.23459853, 0.86872333, 0.05481404, 0.4075119, 0.13763186, 0.38947833,
            0.19455469, 0.2231027, 0.710135, 0.38075933, 0.36192992, 0.5788371, 0.45671245,
            0.02821646, 0.65663046, 0.6821529, 0.13092387, 0.04243296, 0.40237483, 0.96532,
            0.08922233, 0.65666056, 0.07955468, 0.30693734, 0.61528814, 0.8301079, 0.9080613,
            0.10633651, 0.95870477, 0.24841434, 0.49642795, 0.02807361, 0.67816275, 0.14359485,
            0.96717685, 0.970054, 0.53526694,
        ],
    )
    .unwrap();

    let kernel15: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.789418, 0.44380167, 0.1696324, 0.22258878, 0.54548246, 0.33204898, 0.6242531,
            0.39491078, 0.95525235, 0.17685722, 0.4390062, 0.25685027, 0.9619644, 0.7054154,
            0.25693816, 0.06693318, 0.71142703, 0.30001205, 0.24983038, 0.04385825, 0.83179814,
            0.9035203, 0.99454165, 0.4820838, 0.2207663, 0.6613494, 0.6531026, 0.941437,
            0.02962555, 0.00604056, 0.6749602, 0.09254023, 0.16296797, 0.7694261, 0.49170363,
            0.04446485, 0.8114944, 0.29030007, 0.1919063, 0.18254054, 0.13724734, 0.00911832,
            0.20514874, 0.59104544, 0.815183, 0.26495343, 0.62743604, 0.94401777, 0.54503894,
            0.6431647, 0.52856827, 0.51207054, 0.03335644, 0.28076503, 0.07791043, 0.86478263,
            0.980501, 0.54355013, 0.03467919, 0.886572, 0.36146563, 0.13580918, 0.8819829,
            0.48148784, 0.09721047, 0.7819647, 0.49357224, 0.6708243, 0.72222507, 0.366483,
            0.37231642, 0.11044633, 0.88196933, 0.7812372, 0.2546282, 0.8222847, 0.328725,
            0.78940445, 0.46583235, 0.3009351, 0.90517753, 0.7002328, 0.750793, 0.75040495,
            0.53337294, 0.51972127, 0.72387767, 0.9831707, 0.20632543, 0.16955712, 0.76152086,
            0.05444199, 0.2814817, 0.15761587, 0.95890856, 0.90069485, 0.01261302, 0.21181779,
            0.78206104, 0.92161584, 0.74544144, 0.8816592, 0.9976662, 0.2966056, 0.2162454,
            0.06208929, 0.50320554, 0.6565798, 0.5351854, 0.10227188, 0.28489798, 0.20003575,
            0.1822242, 0.05310873, 0.13790856, 0.78958035, 0.5917116, 0.38009274, 0.2742251,
            0.9041115, 0.99974847, 0.9090851, 0.4171188, 0.48332873, 0.169661, 0.15740211,
            0.04401799, 0.33348852, 0.42292982, 0.4798304, 0.90991354, 0.54084134, 0.4826352,
            0.5674032, 0.6246967, 0.70394504, 0.12639284, 0.16602974, 0.4649844, 0.36747122,
            0.75747913, 0.91581804, 0.02039539, 0.51063865, 0.6296097, 0.55201155, 0.25472447,
            0.48130554, 0.324559, 0.66492975,
        ],
    )
    .unwrap();
    let conv_layer15 = ConvolutionLayer::new(
        kernel15,
        Some(Array::from_shape_vec((2,), vec![0.01730853, 0.77949584]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output15: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            6.298292, 8.3335705, 9.673252, 10.448842, 9.462682, 6.355707, 9.067476, 11.839988,
            13.671186, 12.167081, 11.410615, 8.568137, 9.217095, 12.101636, 16.1087, 16.672388,
            13.770559, 10.254794, 10.0143385, 12.411016, 17.051298, 17.771646, 14.018283,
            10.649785, 7.4376926, 8.864465, 12.424047, 12.981266, 11.050304, 9.152436, 3.8900785,
            8.559825, 9.662069, 10.323308, 8.1288, 6.2472224, 5.7229576, 6.7029824, 10.489319,
            10.063605, 9.17509, 7.1992545, 8.395666, 9.573695, 15.2753525, 15.385389, 12.462008,
            8.917473, 9.770355, 13.745537, 17.09485, 18.457825, 14.614097, 11.876087, 9.88826,
            13.970088, 18.756443, 17.56407, 15.165541, 11.401891, 9.303473, 10.376794, 15.202005,
            14.209286, 13.174328, 10.990207, 6.420112, 8.246559, 11.016374, 10.973641, 9.452013,
            9.110848,
        ],
    )
    .unwrap();
    let current_output15: Array3<f32> = conv_layer15.convolve(&test_input15);

    assert!(
        arr_allclose(&current_output15, &target_output15),
        "{:?} was not equal to {:?}",
        current_output15,
        target_output15
    );

    let test_input16 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.13672462, 0.73892075, 0.02376527, 0.8798877, 0.6356067, 0.22369854, 0.584571,
            0.96449506, 0.7977554, 0.32541806, 0.10196066, 0.8232674, 0.8543414, 0.9710584,
            0.505133, 0.04858193, 0.16233306, 0.651015, 0.62667716, 0.04012987, 0.8986551,
            0.5988572, 0.7548613, 0.9230523, 0.8094736, 0.41193417, 0.11411006, 0.29621908,
            0.8657136, 0.3099813, 0.7817938, 0.5514695, 0.9309671, 0.35345063, 0.04673942,
            0.2836077, 0.4491099, 0.16020048, 0.0033604, 0.7036799, 0.09309967, 0.8027366,
            0.66168624, 0.75922126, 0.98626304, 0.41794768, 0.85175455, 0.6952307, 0.8909816,
            0.77955645, 0.25186005, 0.6967979, 0.44887283, 0.443149, 0.75464064, 0.81323266,
            0.85127234, 0.15431848, 0.56885445, 0.29611066, 0.87579244, 0.9531821, 0.5536974,
            0.53754663, 0.23263316, 0.527793, 0.6797737, 0.74194604, 0.01885639, 0.08134871,
            0.6701397, 0.42471457, 0.93320847, 0.6966494, 0.5644708, 0.03809474, 0.09368633,
            0.5213245, 0.7867202, 0.5103296, 0.05583452, 0.7863488, 0.5674216, 0.06023929,
            0.39982173, 0.32429224, 0.11995548, 0.8987073, 0.1602559, 0.33672985, 0.742261,
            0.14132027, 0.06929818, 0.4782574, 0.5697997, 0.11632108, 0.49556065, 0.47647962,
            0.7417032, 0.34966558, 0.47131556, 0.9838283, 0.6777289, 0.90295655, 0.67075133,
            0.0573609, 0.8237337, 0.36602104, 0.15022676, 0.66375136, 0.17951131, 0.7120909,
            0.48833874, 0.85454535, 0.18296848, 0.10698621, 0.61914563, 0.5212063, 0.922373,
            0.6521379, 0.45965454, 0.3666493, 0.99957263, 0.63527644, 0.17045999, 0.32906872,
            0.39238515, 0.8330784, 0.24240606, 0.16471672, 0.39931872, 0.18019378, 0.04206449,
            0.4967664, 0.8137173, 0.2356948, 0.4160782, 0.9648439, 0.08041501, 0.65951824,
            0.8111227, 0.5044555, 0.5347742, 0.6593625, 0.2873256, 0.93752426, 0.7753997,
            0.7233747, 0.5849598, 0.73156756, 0.514743, 0.9262702, 0.2988856, 0.6292863, 0.3348592,
            0.68505603, 0.09462127, 0.39446756, 0.7353366, 0.06431016, 0.30438656, 0.65234166,
            0.58759433, 0.62632954, 0.4344534, 0.21980144, 0.00100083, 0.6921164, 0.8472264,
            0.3598078, 0.8860002, 0.3531883, 0.25727805, 0.25435162, 0.7503538, 0.4171089,
            0.7314984, 0.4653744, 0.71255463, 0.95627284, 0.9875905, 0.22617352, 0.7417731,
            0.37862286, 0.5094745, 0.18060002, 0.9620671, 0.49016726, 0.45882288, 0.75507283,
            0.45673513, 0.9690947, 0.10567724, 0.2728893, 0.70271283, 0.8472397, 0.55496895,
            0.91851914, 0.9672113, 0.64802116, 0.21997769, 0.3842727, 0.94689554, 0.74909705,
            0.3282922, 0.2643334, 0.3491095, 0.3052412, 0.5038705, 0.37622157, 0.04119791,
            0.7131295, 0.14328648, 0.13365868, 0.36297327, 0.68727154, 0.93408334, 0.21441843,
            0.91439056, 0.40976977, 0.9953925, 0.3781238, 0.28116077, 0.97598535, 0.36442432,
            0.14792818, 0.83921397, 0.625257, 0.09807894, 0.3419448, 0.9480976, 0.12152596,
            0.29696485, 0.41873357, 0.95614773, 0.47523478, 0.25687808, 0.7602087, 0.78506595,
            0.43647116, 0.97631705, 0.26839125, 0.08090039, 0.48662946, 0.70590997, 0.99664134,
            0.77797663, 0.2436962, 0.6407154, 0.34835714, 0.8761795, 0.19121103, 0.5305259,
            0.6565131, 0.5287279, 0.29444507, 0.775589, 0.24550702, 0.9532204, 0.8754091, 0.341333,
            0.6382999, 0.5125449, 0.5005919, 0.937352, 0.6224484, 0.14624618, 0.8417525, 0.9414587,
            0.44898897, 0.6993321, 0.36183158, 0.24969168, 0.9671642, 0.20102102, 0.799053,
            0.29777643, 0.05473179, 0.82243276, 0.49220118, 0.959262, 0.60974807, 0.82510734,
            0.77621484, 0.31383017, 0.20135997, 0.40562743, 0.25492424, 0.5874371, 0.69954115,
            0.11803117, 0.95850575, 0.9031762, 0.8240507, 0.7735656, 0.5868046, 0.50450677,
            0.31319898, 0.23300357, 0.8095447, 0.34135282, 0.24274388, 0.6729072, 0.57593447,
            0.8085596, 0.7018395, 0.76145005, 0.58241343, 0.3309161, 0.67546684, 0.32411024,
            0.3949699, 0.412044, 0.8408538, 0.76511306, 0.8994237, 0.8364367, 0.38108206,
            0.69459295, 0.8441607, 0.40802577, 0.95296425, 0.72987187, 0.07076582, 0.8826578,
            0.44925806, 0.8213124, 0.6112075, 0.96117723, 0.3876701, 0.88056743, 0.9483631,
            0.8974017, 0.4120727, 0.27696642, 0.69025475, 0.42224765, 0.96611446, 0.04551166,
            0.40275672, 0.19091433, 0.4437527, 0.31289253, 0.2396215, 0.6389319, 0.85605,
            0.27247688, 0.19161025, 0.50402254, 0.5852498, 0.97299683, 0.594723, 0.38096267,
            0.29591832, 0.28942943, 0.4529504, 0.19683413, 0.1757779, 0.88774997, 0.5229589,
            0.7137983, 0.82603574, 0.8461087, 0.9091735, 0.80568945, 0.79286724, 0.3410004,
            0.32917508, 0.17503856, 0.7846004, 0.7272445, 0.48829708, 0.9584728, 0.7469263,
            0.66009414, 0.59341496, 0.42636782, 0.9874962, 0.85196227, 0.43363968, 0.02657376,
            0.11542477, 0.13354255, 0.5618466, 0.070237, 0.35689688, 0.27853093, 0.8144841,
            0.99201185, 0.6685596, 0.5670808, 0.68718493, 0.73198694, 0.84016347, 0.55920875,
            0.27009216, 0.10123584, 0.2636, 0.9657689, 0.005051, 0.5576874, 0.9025137, 0.55897933,
            0.35369453, 0.9429427, 0.5162179, 0.5906877, 0.05157892, 0.76241785, 0.07249359,
            0.45541912, 0.01278013, 0.4782056, 0.76319754, 0.5541978, 0.04795831, 0.5815242,
            0.27330735, 0.8815459, 0.29006037, 0.23429064, 0.18781203, 0.94584274, 0.4523076,
            0.29750833, 0.17197818, 0.06818328, 0.6987018, 0.6090657, 0.24505253, 0.8169458,
            0.03939039, 0.5665328, 0.8011893, 0.75747067, 0.1555473, 0.18986696, 0.13435428,
            0.38600448, 0.19166702, 0.46490034, 0.18260308, 0.82895696, 0.03558233, 0.14173116,
            0.8877225, 0.12655611, 0.4754852, 0.7843472, 0.8912908,
        ],
    )
    .unwrap();

    let kernel16: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.15408872, 0.45979473, 0.18853948, 0.826404, 0.8497178, 0.36331993, 0.98673576,
            0.43612492, 0.03541405, 0.783278, 0.24658875, 0.74658084, 0.34663445, 0.03917093,
            0.3931895, 0.30789322, 0.68702215, 0.44194368, 0.33855647, 0.9119313, 0.31810585,
            0.16017109, 0.00698695, 0.293519, 0.14280626, 0.48469457, 0.1767692, 0.42322084,
            0.46112144, 0.9255381, 0.5532242, 0.9853486, 0.24325794, 0.63504064, 0.15406865,
            0.11709648, 0.1119092, 0.21574858, 0.62332, 0.8729103, 0.52609015, 0.06899712,
            0.6168495, 0.3181057, 0.10088859, 0.28579375, 0.08647749, 0.8464018, 0.5181164,
            0.47873196, 0.83375126, 0.9057766, 0.00922728, 0.36432305,
        ],
    )
    .unwrap();
    let conv_layer16 = ConvolutionLayer::new(
        kernel16,
        Some(Array::from_shape_vec((2,), vec![0.53910846, 0.47707382]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output16: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            2.1439376, 2.9919705, 4.0259433, 4.557976, 4.839901, 3.8199458, 4.7090416, 4.5452175,
            4.6731668, 4.6158137, 4.0231676, 4.04469, 4.8223114, 5.3072367, 4.3359227, 4.0427103,
            5.911103, 6.9464827, 6.6949506, 6.263886, 5.5789723, 7.1186194, 6.6058183, 6.05645,
            5.9231462, 6.030203, 5.3078756, 6.6292505, 7.0011716, 6.011055, 4.512948, 7.273197,
            7.1733627, 7.4836206, 6.895663, 6.0587993, 6.485122, 6.1433535, 5.661448, 5.498336,
            6.7523828, 5.850195, 7.0469775, 7.180508, 5.402653, 4.772749, 8.631096, 7.7188854,
            6.8975644, 6.050325, 6.5918083, 6.3173046, 6.779125, 5.8009562, 5.6870837, 6.62909,
            6.1740603, 6.534551, 6.336686, 5.128412, 4.857833, 6.874868, 6.9016433, 6.84738,
            6.74772, 6.1334662, 5.826475, 6.304671, 5.5367537, 5.1990194, 5.2480435, 5.51293,
            6.3839755, 7.409872, 4.8722796, 4.6236634, 5.674979, 5.702854, 6.2135906, 6.7405744,
            6.3681517, 5.5316887, 6.20978, 5.085867, 6.3081365, 5.878526, 6.730771, 7.7002707,
            7.2112393, 5.742959, 3.8994517, 5.359666, 6.191589, 6.335657, 5.9087973, 4.8302946,
            4.8816047, 5.753999, 6.1204667, 6.445768, 5.05013, 6.097151, 7.7245374, 8.241689,
            6.073759, 3.9259691, 5.400394, 6.558003, 6.4586573, 6.3260045, 5.3732424, 4.967099,
            6.393442, 6.777888, 5.840268, 5.418937, 6.7482615, 6.701648, 6.8769135, 6.1956625,
            3.3253915, 5.096044, 6.3543077, 6.5215473, 5.498975, 5.4259257, 5.997678, 6.9296026,
            6.8599467, 6.232364, 5.248835, 6.427448, 5.921032, 7.1075773, 5.977312, 2.111204,
            3.492331, 5.0311646, 4.0010486, 4.058864, 3.7757711, 4.0560203, 4.5910397, 4.2237945,
            4.8423557, 4.5712037, 5.02729, 4.7258453, 5.302692, 3.9865596, 1.9016062, 4.396999,
            4.6578546, 5.331942, 5.709368, 5.1293993, 5.380657, 5.060737, 5.649867, 4.1583443,
            4.416632, 4.3904834, 6.025677, 5.827491, 5.3047, 4.3540792, 6.3787365, 7.258769,
            8.27956, 6.7528276, 6.8617854, 8.076343, 7.1866016, 7.3775234, 5.4654026, 7.414453,
            6.1881304, 8.437923, 7.497082, 5.433217, 4.7322187, 8.29384, 8.066794, 7.097501,
            7.134059, 6.7237635, 7.3849006, 6.6649323, 7.077613, 5.9939303, 6.4080896, 6.1276884,
            7.4689684, 6.0890255, 5.656726, 4.9600377, 8.704044, 7.985949, 7.4196634, 7.6028323,
            6.763659, 7.1491065, 5.7049036, 6.669054, 5.62699, 6.969072, 6.7954063, 6.3098946,
            7.8094444, 5.4435825, 4.797006, 7.779982, 8.532916, 7.8948708, 7.0130296, 6.705253,
            6.717326, 6.2558956, 5.456344, 6.374177, 6.6902666, 6.863965, 7.2148404, 7.9423656,
            5.660607, 4.5371804, 7.211667, 7.467355, 6.872701, 6.6713166, 6.289216, 6.118004,
            5.5543404, 4.6343985, 6.969703, 5.783378, 7.2679687, 8.46779, 8.470757, 5.2389894,
            4.188064, 6.5985165, 6.746784, 5.787711, 6.7004375, 5.557167, 5.5423713, 6.27432,
            5.9125376, 6.6125016, 5.971084, 7.271592, 7.6003776, 7.94668, 6.0808325, 3.6069896,
            5.7824817, 6.22943, 6.5077066, 6.985826, 5.158671, 5.536893, 6.7974873, 6.555951,
            7.0210657, 6.3230596, 7.0454736, 7.3042417, 8.525051, 6.0973372, 3.8218458, 5.289512,
            6.5962057, 6.464218, 5.6207886, 4.976983, 6.547411, 6.9272356, 6.95558, 6.268912,
            5.532798, 7.0817695, 7.306879, 7.619972, 5.94853, 2.2841642, 4.4268894, 5.110363,
            4.0414586, 4.5392957, 4.102026, 5.1674633, 5.2610736, 4.8994465, 5.5772376, 4.607899,
            5.4125915, 5.353399, 5.776147, 4.018411,
        ],
    )
    .unwrap();
    let current_output16: Array3<f32> = conv_layer16.convolve(&test_input16);

    assert!(
        arr_allclose(&current_output16, &target_output16),
        "{:?} was not equal to {:?}",
        current_output16,
        target_output16
    );

    let test_input17 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.23459193, 0.6104503, 0.99977493, 0.2879088, 0.9237121, 0.24345838, 0.00414109,
            0.03638967, 0.30595168, 0.16491044, 0.7087876, 0.79154646, 0.6065011, 0.46475387,
            0.6585233, 0.93920064, 0.09687401, 0.5544905, 0.56360936, 0.10987341, 0.79093266,
            0.6827511, 0.93982804, 0.14053226, 0.49555323, 0.4556152, 0.66896224, 0.46089745,
            0.33559954, 0.3038908, 0.7388162, 0.5641086, 0.07862057, 0.46463865, 0.07132971,
            0.5696929, 0.89171886, 0.97521317, 0.86021405, 0.61829454, 0.4099887, 0.3409378,
            0.49427044, 0.10122171, 0.23691536, 0.70967704, 0.4641384, 0.8326181, 0.38735756,
            0.9489551, 0.07998312, 0.5111061, 0.02956773, 0.17711017, 0.11328588, 0.74999446,
            0.8589006, 0.07875007, 0.73433584, 0.4188041, 0.48477763, 0.00624699, 0.6286288,
            0.21567076, 0.81573004, 0.70090973, 0.8734742, 0.6482149, 0.5717835, 0.16271727,
            0.53025377, 0.0984337, 0.82271063, 0.12299971, 0.06295575, 0.7953895, 0.5933358,
            0.27819812, 0.70772564, 0.8846656, 0.33805057, 0.66772455, 0.9335431, 0.0900248,
            0.08626243, 0.0064692, 0.9791513, 0.52760124, 0.61633664, 0.9759571, 0.5431996,
            0.11189567, 0.662313, 0.47249612, 0.88115114, 0.93577164, 0.61019063, 0.4513792,
            0.21412608, 0.21063799, 0.59758914, 0.26163143, 0.57292384, 0.3575447, 0.41482434,
            0.5686212, 0.43116546, 0.8888871, 0.5989078, 0.96428144, 0.67385226, 0.18009396,
            0.650084, 0.1288117, 0.6034601, 0.23165825, 0.01380609, 0.45430455, 0.3510245,
            0.375879, 0.7931324, 0.20369534, 0.9617992, 0.17212614, 0.8661392, 0.818001,
            0.04731771, 0.6331485, 0.83272296, 0.58803684, 0.6773803, 0.966571, 0.59957683,
            0.85136724, 0.03105091, 0.388052, 0.55736136, 0.02805966, 0.80824125, 0.57193863,
            0.9242484, 0.43400672, 0.95459735, 0.19825369, 0.3165235, 0.34878272, 0.04700416,
            0.89200944, 0.8226108, 0.49845085, 0.02590412, 0.3321073, 0.9764468, 0.5381227,
            0.92109436, 0.7710321, 0.8660679, 0.3895538, 0.854895, 0.07690383, 0.03470363,
            0.623576, 0.7447061, 0.23551573, 0.09116793, 0.13018292, 0.29478395, 0.694041,
            0.0967541, 0.8266735, 0.00767931, 0.24422543, 0.47754803, 0.05508777, 0.30187264,
            0.58673537, 0.38990366, 0.6169217, 0.5919785, 0.35687554, 0.9651153, 0.31502706,
            0.15851368, 0.90410787, 0.24201743, 0.99100995, 0.46153438, 0.5230941, 0.05274187,
            0.85842836, 0.8584512, 0.30464408, 0.00721753, 0.18392335, 0.8556412, 0.1809689,
            0.5768042, 0.3628767, 0.69780505, 0.11757887, 0.08762363, 0.36607084, 0.24363868,
            0.7472844, 0.08178072, 0.8810783, 0.3569205, 0.451316, 0.0383365, 0.8465622, 0.9883213,
            0.56150496, 0.52739674, 0.47732064, 0.43933925, 0.21088907, 0.5524299, 0.8005311,
            0.17473145, 0.40513718, 0.82864845, 0.4856008, 0.41349155, 0.8595507, 0.77320266,
            0.9890798, 0.24298015, 0.27266598, 0.4846638, 0.87975013, 0.4469587, 0.10110632,
            0.5594282, 0.9304254, 0.09035328, 0.76902574, 0.2852155, 0.07585676, 0.24124639,
            0.06790887, 0.14329627, 0.6381789, 0.9543389, 0.6581925, 0.1983508, 0.44280005,
            0.15768081, 0.7742759, 0.90144795, 0.8614371, 0.28797778, 0.37103122, 0.0877872,
            0.45872805, 0.76575243, 0.6829663, 0.2304093, 0.5233105, 0.6974145, 0.8921432,
            0.22412036, 0.0491925, 0.5368815, 0.19189753, 0.45287937, 0.6024187, 0.37045264,
            0.23233427, 0.42484194, 0.98901117, 0.36564678, 0.8630159, 0.8116843, 0.39872772,
            0.6879206, 0.7998495, 0.594579, 0.7541534, 0.80124223, 0.59222096, 0.05390601,
            0.82877624, 0.29753333, 0.82358676, 0.29054287, 0.26042402, 0.88391197, 0.8143526,
            0.579024, 0.05703124, 0.6139959, 0.10031959, 0.78280455, 0.24171719, 0.4721017,
            0.53194064, 0.6437402, 0.09277638, 0.8693754, 0.60042983, 0.8875286, 0.86002535,
            0.69702214, 0.12023476, 0.9464669, 0.9782188, 0.38164645, 0.7172452, 0.9105007,
            0.41190186, 0.29969904, 0.43725935, 0.7022435, 0.7566894, 0.5551452, 0.88240683,
            0.10910437, 0.51675713, 0.33856305, 0.4310923, 0.43717158, 0.2241604, 0.7074267,
            0.04574655, 0.62335473, 0.6056931, 0.19430637, 0.9464095, 0.43765876, 0.47719213,
            0.45312902, 0.417855, 0.8179389, 0.03511541, 0.5549018, 0.6715673, 0.61512816,
            0.655004, 0.09111205, 0.49298653, 0.3268639, 0.77552783, 0.77209026, 0.47542888,
            0.31814525, 0.52555007, 0.81072354, 0.00102462, 0.5109687, 0.48937833, 0.122188,
            0.22519495, 0.40227205, 0.84508294, 0.43985215, 0.05504967, 0.02137936, 0.26612982,
            0.12310848, 0.00158825, 0.75761557, 0.88188004, 0.12094665, 0.13906257, 0.9157668,
            0.91879827, 0.8513396, 0.28533912, 0.30878848, 0.12668495, 0.24235713, 0.45707443,
            0.7712829, 0.6903243, 0.09853197, 0.43307763, 0.05488254, 0.70532215, 0.34688666,
            0.9355463, 0.38260135, 0.4838589, 0.17318112, 0.21472165, 0.77769446, 0.356957,
            0.22671694, 0.18250434, 0.41477197, 0.18007399, 0.9827863, 0.58704966, 0.2950183,
            0.46143153, 0.19057809, 0.3653109, 0.93977064, 0.26191843, 0.3693467, 0.1444909,
            0.9363978, 0.42698747, 0.1281546, 0.30951205, 0.1389484, 0.7072368, 0.44510987,
            0.68366706, 0.60059834, 0.09438256, 0.36583102, 0.60821444, 0.03161661, 0.8738241,
            0.29876906, 0.33316013, 0.562216, 0.3353904, 0.10716959, 0.9334109, 0.8606402,
            0.42792627, 0.48052302, 0.6958078, 0.4525564, 0.99052715, 0.04395659, 0.71055365,
            0.9117777, 0.93380785, 0.90260816, 0.01515595, 0.88177705, 0.43487665, 0.56912595,
            0.05581366, 0.02638636, 0.50119185, 0.31323937, 0.05636088, 0.31307653, 0.3326902,
            0.3734779, 0.4210294, 0.08686391, 0.3808534, 0.36317897, 0.19031978, 0.46563995,
            0.41320488,
        ],
    )
    .unwrap();

    let kernel17: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.94399136, 0.28572702, 0.6142756, 0.8158052, 0.26794037, 0.12281225, 0.32823455,
            0.14740174, 0.70965314, 0.19252698, 0.79887706, 0.02814319, 0.39099365, 0.7551387,
            0.5038018, 0.15413615, 0.82638884, 0.2631662, 0.7053773, 0.6478343, 0.32534242,
            0.6635084, 0.8839653, 0.59479696, 0.68739474, 0.903793, 0.9826564, 0.56865096,
            0.33996934, 0.63317853, 0.7065151, 0.82775307, 0.22001709, 0.37304193, 0.20307006,
            0.59174454, 0.3759951, 0.673529, 0.42676452, 0.6453951, 0.93520576, 0.59322685,
            0.5885291, 0.23145947, 0.15739693, 0.8825847, 0.17851174, 0.5603199, 0.14435844,
            0.10347797, 0.37213182, 0.14642915, 0.21561022, 0.3830422,
        ],
    )
    .unwrap();
    let conv_layer17 = ConvolutionLayer::new(
        kernel17,
        Some(Array::from_shape_vec((2,), vec![0.90021485, 0.32565016]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output17: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            3.8180754, 6.269836, 6.1307416, 6.1226916, 6.7196593, 6.564851, 6.223317, 5.1907706,
            5.414114, 4.8822365, 4.9960184, 6.29992, 6.7216988, 6.1900315, 3.8827772, 5.792154,
            8.415835, 7.6158824, 8.410739, 7.9339437, 9.041529, 8.799625, 7.414311, 7.492242,
            7.132518, 7.685901, 8.6015835, 8.74622, 8.176861, 5.524968, 5.7583394, 8.49887,
            7.072689, 7.1890464, 7.1711655, 6.7462296, 7.700471, 7.799769, 7.8604064, 7.1197987,
            8.178086, 6.8217916, 7.0956845, 6.5310555, 4.875878, 6.8801045, 8.464158, 6.880483,
            7.579012, 7.5440545, 8.952342, 8.309975, 8.830276, 6.743289, 7.130568, 6.942833,
            7.735896, 6.904519, 6.4617696, 5.1572075, 6.372202, 8.532356, 6.951001, 8.923241,
            8.069511, 9.039449, 7.181355, 7.1898017, 6.8946657, 6.1899323, 7.2460694, 6.5160055,
            7.2241917, 6.80652, 4.9542594, 6.1073446, 8.810989, 7.2170296, 8.259715, 8.605527,
            9.750143, 8.370999, 8.802157, 7.1295705, 7.2872453, 6.5095224, 6.8147936, 6.0510893,
            6.7519794, 4.9329224, 6.4857073, 8.748537, 8.27772, 8.923396, 8.449579, 8.253291,
            7.4571276, 7.742214, 7.809359, 6.4965715, 7.3272934, 6.4135504, 5.7996984, 7.020473,
            5.730141, 5.8004045, 9.654818, 8.553138, 9.706575, 9.092578, 8.338827, 8.24891,
            8.367163, 8.986652, 8.941516, 7.691453, 8.084946, 6.448458, 7.537958, 6.0252757,
            5.423285, 8.473661, 8.583422, 9.0293255, 8.491672, 8.096584, 8.076395, 7.358203,
            8.453838, 8.014383, 7.2603526, 7.5173974, 7.2564406, 8.211835, 6.594281, 3.1445594,
            6.1286535, 5.5989842, 5.5575294, 5.516537, 5.560068, 6.1050973, 5.352403, 6.563555,
            6.0321174, 5.549725, 5.6328173, 5.4750896, 6.3290863, 5.05108, 1.8438928, 3.9026356,
            4.4243126, 4.87978, 4.7527294, 4.7654986, 4.004741, 3.3190842, 3.4543865, 2.754515,
            3.2525923, 4.6165557, 4.552496, 3.8168788, 2.3879178, 3.833268, 6.817603, 6.018102,
            6.8943334, 6.342995, 6.730478, 7.2832737, 6.2196393, 5.7671337, 5.3084908, 5.9235215,
            7.0171447, 6.4041452, 5.8462844, 3.578106, 4.1412425, 6.707017, 4.955115, 5.85674,
            5.687624, 5.551165, 6.483401, 5.678823, 6.1224756, 5.9395995, 6.5060596, 6.1762476,
            5.028344, 5.2066193, 3.438145, 4.5109797, 6.3594236, 5.641864, 6.3432555, 5.91241,
            6.441571, 6.394449, 6.3269672, 5.6259704, 5.3064203, 6.026117, 6.71504, 4.9144335,
            5.09683, 4.1513124, 4.737734, 6.4507, 6.053586, 6.495313, 5.789511, 6.5924435,
            5.551243, 5.8767023, 5.21029, 5.373803, 5.655546, 5.515524, 5.5779285, 5.3413696,
            3.7912297, 4.69929, 6.7255282, 5.52411, 7.06427, 7.1929545, 7.6158657, 6.7444763,
            6.969385, 5.645438, 5.3823786, 4.8250475, 5.7689633, 5.308325, 5.2963934, 4.16895,
            4.0446205, 6.6096473, 6.274261, 7.7603526, 6.978924, 7.3020625, 5.8347626, 5.872012,
            6.335221, 5.049842, 5.6462893, 4.677862, 4.5394335, 5.127009, 4.1129975, 3.885718,
            7.295336, 7.053569, 7.7865295, 7.5448093, 6.599846, 5.839104, 6.5663853, 6.266034,
            6.771779, 5.7652874, 5.4138575, 5.221623, 5.4529777, 4.5887666, 4.159667, 6.859379,
            7.4649835, 7.38102, 7.634097, 6.2947865, 6.4316006, 5.9908023, 6.7480526, 6.193587,
            5.4285183, 6.115323, 6.2221055, 6.6605387, 4.5082493, 2.9596002, 6.042081, 5.2147584,
            5.190071, 5.6470814, 4.87772, 5.9063983, 5.169036, 5.779525, 5.2316904, 5.002619,
            5.0632963, 5.1120725, 5.820382, 4.0374756,
        ],
    )
    .unwrap();
    let current_output17: Array3<f32> = conv_layer17.convolve(&test_input17);

    assert!(
        arr_allclose(&current_output17, &target_output17),
        "{:?} was not equal to {:?}",
        current_output17,
        target_output17
    );

    let test_input18 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.82000726, 0.72865623, 0.48349917, 0.41356984, 0.03333719, 0.08149401, 0.85722613,
            0.04374503, 0.88704216, 0.09240989, 0.8528545, 0.7946653, 0.54765993, 0.74729836,
            0.72924787, 0.21080038, 0.12833528, 0.06738389, 0.9163098, 0.2233036, 0.09597177,
            0.4226413, 0.73019654, 0.8065446, 0.13412596, 0.9296237, 0.88961375, 0.8097079,
            0.92300737, 0.8407575, 0.5467569, 0.90232325, 0.40697718, 0.7049378, 0.17525117,
            0.60480595, 0.01006908, 0.09306768, 0.04155758, 0.00396548, 0.29594678, 0.24183853,
            0.23543635, 0.10814751, 0.366542, 0.58264214, 0.1795904, 0.47117367, 0.7827338,
            0.22905576, 0.3444951, 0.83183694, 0.12226541, 0.8971257, 0.27640048, 0.37137195,
            0.2710384, 0.27672654, 0.33046693, 0.4244338, 0.8525934, 0.79606473, 0.24516417,
            0.5116681, 0.32966596, 0.36674044, 0.40403318, 0.31310067, 0.7258184, 0.01080465,
            0.05479572, 0.52210695, 0.6023438, 0.20002392, 0.6150934, 0.23236814, 0.28950065,
            0.33898464, 0.5701668, 0.51984864, 0.45874897, 0.78067493, 0.8138102, 0.9551208,
            0.5881804, 0.47504795, 0.19136074, 0.8406687, 0.04588939, 0.30594054, 0.8511978,
            0.8773192, 0.8241661, 0.44152674, 0.38872027, 0.07202522, 0.9640743, 0.5195077,
            0.19128811, 0.25130445, 0.39854062, 0.8797602, 0.7229711, 0.62001854, 0.69522935,
            0.91174835, 0.65982074, 0.10557687, 0.23464549, 0.5982146, 0.28930026, 0.45670658,
            0.47519284, 0.96985734, 0.13737752, 0.33859882, 0.8539295, 0.74257755, 0.9444382,
            0.24404159, 0.7431825, 0.0306461, 0.32723787, 0.8498817, 0.780418, 0.7744034,
            0.47136632, 0.2987932, 0.90784407, 0.6841086, 0.38890767, 0.05255083, 0.16184397,
            0.90099066, 0.498845, 0.29081446, 0.96019644, 0.79299563, 0.47393435, 0.72834367,
            0.6158064, 0.6794256, 0.47645757, 0.3335043, 0.756347, 0.11874896, 0.36077332,
            0.3897357, 0.37567437, 0.98458624, 0.5517178, 0.29212236, 0.9600367, 0.6615687,
            0.06723779, 0.2025786, 0.02713268, 0.80878776, 0.733241, 0.04588867, 0.02181397,
            0.7670707, 0.45551613, 0.6842329, 0.6831582, 0.6664801, 0.3131931, 0.29468352,
            0.85157114, 0.8392736, 0.14075516, 0.85626125, 0.52595836, 0.98014617, 0.27240536,
            0.44448686, 0.82414293, 0.9190075, 0.22366077, 0.8532558, 0.701437, 0.40568367,
            0.37661108, 0.67640066, 0.56091106, 0.04301855, 0.12136482, 0.6737573, 0.2752744,
            0.0267396, 0.94759494, 0.6303967, 0.12444576, 0.72837055, 0.7281102, 0.2626654,
            0.09959164, 0.2171505, 0.30699563, 0.74566257, 0.7291574, 0.75221896, 0.98712695,
            0.14437845, 0.29435056, 0.9106491, 0.34656417, 0.99010134, 0.6754568, 0.9541668,
            0.84239453, 0.3434271, 0.74494994, 0.99503726, 0.16594417, 0.31254604, 0.43238705,
            0.5073427, 0.14618637, 0.09028576, 0.8893203, 0.91551375, 0.49814487, 0.7052375,
            0.65795493, 0.83047026, 0.17178877, 0.10943547, 0.9565582, 0.9222505, 0.71428937,
            0.5576436, 0.4350043, 0.43690363, 0.04750107, 0.6443613, 0.03292517, 0.5884901,
            0.27200705, 0.9026258, 0.826362, 0.0902301, 0.29801482, 0.74622726, 0.5126913,
            0.22947553, 0.6898572, 0.89290726, 0.11439011, 0.2553315, 0.5261063, 0.96802235,
            0.3207074, 0.16912474, 0.4287567, 0.69673246, 0.5962988, 0.6583277, 0.95566136,
            0.3090088, 0.04040552, 0.36515298, 0.7484168, 0.38902923, 0.57477367, 0.02147577,
            0.12675387, 0.8958077, 0.57611835, 0.8050715, 0.18574312, 0.9103308, 0.49352488,
            0.04084096, 0.32406485, 0.9127804, 0.32315838, 0.5274155, 0.3541732, 0.43012723,
            0.5261415, 0.8519433, 0.34473136, 0.22837397, 0.16551489, 0.251939, 0.9573879,
            0.3333164, 0.45628268, 0.6485293, 0.03959658, 0.7774604, 0.72181726, 0.25632858,
            0.40238795, 0.29511455, 0.18771167, 0.4778858, 0.88639265, 0.03075815, 0.38190666,
            0.5188661, 0.43225557, 0.443126, 0.7846497, 0.69072247, 0.70348734, 0.48298272,
            0.5568704, 0.68944603, 0.03431003, 0.38795924, 0.6902452, 0.85404575, 0.52294713,
            0.14189826, 0.48577386, 0.0789768, 0.29317725, 0.34614396, 0.42246845, 0.71652186,
            0.03888219, 0.95906556, 0.15285546, 0.94362164, 0.15887408, 0.13075079, 0.15117891,
            0.03306201, 0.16711909, 0.58509, 0.26331437, 0.15727986, 0.39590272, 0.2304746,
            0.8428172, 0.32108444, 0.6584057, 0.22742087, 0.03719785, 0.4095963, 0.6715706,
            0.9103236, 0.37286273, 0.2795822, 0.23605917, 0.16103324, 0.48898628, 0.7769166,
            0.63719285, 0.5339775, 0.5013731, 0.23002648, 0.726385, 0.64956135, 0.10749894,
            0.7930301, 0.25076696, 0.01513924, 0.2581999, 0.03015263, 0.5023638, 0.8415604,
            0.43133247, 0.5533162, 0.562384, 0.6384559, 0.52681637, 0.13921387, 0.09313619,
            0.75766635, 0.78449273, 0.8692138, 0.79183036, 0.72191995, 0.91970456, 0.26611277,
            0.45631656, 0.8316374, 0.60754436, 0.86304337, 0.8193103, 0.47772342, 0.73805946,
            0.01831975, 0.71567196, 0.27518228, 0.09057815, 0.5942683, 0.9828262, 0.6877077,
            0.01671847, 0.59191656, 0.11799596, 0.3565012, 0.5271378, 0.42855334, 0.7159743,
            0.33997726, 0.13702092, 0.30294093, 0.60102206, 0.31660682, 0.47319987, 0.81581175,
            0.32806376, 0.2910204, 0.7040396, 0.7646719, 0.16295868, 0.5199952, 0.10952926,
            0.25027466, 0.01479205, 0.20828883, 0.6572299, 0.16784889, 0.49984223, 0.73934627,
            0.7692465, 0.45089912, 0.42323235, 0.3092633, 0.94342923, 0.5813263, 0.17081867,
            0.45052946, 0.5468596, 0.32220426, 0.97337824, 0.15655027, 0.0631674, 0.9276395,
            0.7337421, 0.6282157, 0.44235066, 0.70144874, 0.2581846, 0.37731636, 0.74292475,
            0.7893134, 0.9682662, 0.07253607, 0.61240184, 0.5712741, 0.7101941, 0.42240703,
            0.3144015, 0.23257384,
        ],
    )
    .unwrap();

    let kernel18: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.355786, 0.774386, 0.7575536, 0.44447815, 0.76916295, 0.43969592, 0.09476027,
            0.89676636, 0.25122383, 0.3878751, 0.5271335, 0.21266471, 0.64234614, 0.23638117,
            0.12251099, 0.11175825, 0.6929939, 0.06464646, 0.15909617, 0.64519554, 0.325024,
            0.95026743, 0.57768893, 0.556819, 0.2965687, 0.68271434, 0.17499126, 0.28795037,
            0.6223563, 0.28275678, 0.62251085, 0.05298517, 0.9586377, 0.8305602, 0.53959036,
            0.7768914, 0.3662946, 0.53110784, 0.87225235, 0.14521246, 0.7490009, 0.55172807,
            0.9621208, 0.2896578, 0.23772797, 0.38020673, 0.41068247, 0.15089212, 0.3510485,
            0.28178045, 0.0740529, 0.28524187, 0.20798713, 0.7328364,
        ],
    )
    .unwrap();
    let conv_layer18 = ConvolutionLayer::new(
        kernel18,
        Some(Array::from_shape_vec((2,), vec![0.24482581, 0.13728051]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output18: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            2.756949, 3.6768692, 3.4539137, 4.523116, 3.609035, 3.3065693, 4.362894, 4.4334555,
            5.1250515, 3.8274632, 4.489867, 4.548827, 5.223616, 4.938505, 4.3776984, 4.4125643,
            5.6372, 5.3731675, 5.3875594, 4.9138207, 4.9991984, 4.7616444, 6.7664337, 5.569811,
            5.8292527, 5.507613, 6.939047, 6.698605, 7.164529, 5.1887317, 3.6160474, 4.3895173,
            5.0536504, 5.6425414, 5.5705404, 5.7083807, 5.777591, 6.2907767, 5.6201525, 5.1276865,
            5.797561, 5.9737315, 6.7843904, 6.210141, 5.08999, 4.7522554, 5.2385793, 5.299764,
            6.193394, 5.7422457, 5.7433667, 5.7569003, 5.4911995, 5.2795057, 3.6174693, 4.700056,
            6.4077826, 5.617799, 6.418239, 4.9023843, 4.183304, 5.227226, 5.0245857, 6.7203803,
            7.3680015, 6.7508016, 7.1402144, 7.3274646, 6.3746905, 4.90218, 4.6788726, 5.5787725,
            7.0774636, 5.862194, 5.3268695, 6.0076895, 6.6808496, 6.1377068, 6.3816113, 6.299715,
            6.2353916, 7.4829807, 7.6694083, 6.070114, 4.433197, 5.02721, 6.734218, 6.344756,
            5.9261107, 4.5502305, 6.199781, 7.1390038, 5.4868903, 6.1089597, 6.7124767, 5.711853,
            6.800948, 7.5340786, 6.483356, 4.7587056, 4.3569155, 6.2354674, 6.5030704, 6.1405888,
            4.655386, 6.2299423, 7.1171756, 5.6313553, 6.0968275, 6.3377824, 6.3912697, 5.297306,
            6.0606656, 5.697177, 4.63579, 5.401666, 5.971841, 6.4135456, 7.037807, 5.1700354,
            5.2585793, 6.852723, 6.1239505, 6.634833, 6.7269125, 6.282385, 6.599016, 6.3918204,
            5.8632436, 5.8762727, 5.127712, 5.637951, 6.2023973, 6.7930384, 5.5405207, 3.2098708,
            4.877156, 5.1843367, 4.9304523, 5.335695, 5.5800753, 5.101949, 5.1722703, 5.2617903,
            4.2983956, 4.429511, 3.5318303, 4.0607014, 4.6422544, 3.6825528, 2.466153, 3.5888073,
            4.2900085, 3.2896266, 3.6778278, 4.0118685, 2.9293659, 6.4582705, 3.6927435, 5.6460743,
            3.9756317, 5.400865, 5.789849, 5.7626553, 3.4319518, 4.277941, 5.972274, 6.8267627,
            5.2980337, 5.3552747, 4.665826, 5.505405, 6.0165434, 5.0843387, 4.971784, 5.2693777,
            7.3691907, 7.2658362, 6.7027254, 4.8488445, 3.581897, 4.391545, 5.71749, 5.9643354,
            6.0129423, 5.396136, 5.981862, 6.905767, 5.552833, 5.683782, 5.653372, 6.983227,
            5.3254237, 6.8903832, 4.19939, 3.6469457, 6.212122, 6.2442527, 5.8473864, 6.4362264,
            5.5818725, 5.5501595, 6.4076405, 3.7370105, 4.809768, 5.051654, 6.0731664, 6.9528894,
            7.1628385, 4.462308, 4.0870457, 4.930538, 5.665945, 6.3582826, 7.151066, 7.573348,
            7.792483, 7.342239, 5.836823, 5.8456798, 5.6757445, 6.592413, 5.365346, 7.373931,
            3.5087044, 5.138792, 6.7498546, 6.7093153, 6.4955344, 6.3929253, 6.5832133, 6.4347196,
            7.369747, 5.722271, 4.718474, 5.314202, 6.915651, 6.924677, 6.8058367, 4.1664624,
            5.0308976, 6.631019, 6.476049, 6.93144, 6.3158565, 6.7072473, 5.9870286, 7.0979705,
            5.5805197, 5.4330645, 5.6861677, 5.792586, 6.593512, 6.9974413, 4.2113414, 4.911411,
            6.5168624, 6.5591693, 6.7467165, 5.7113276, 5.8043017, 6.87322, 6.7519326, 5.362098,
            6.0243435, 5.3558116, 5.757231, 7.439006, 6.1396556, 4.7265625, 4.784563, 7.4226947,
            7.068429, 6.217307, 6.8950543, 7.029284, 6.3061852, 6.6123357, 6.6182537, 4.9673023,
            5.2780304, 5.570633, 5.9380846, 6.373402, 4.813316, 3.7476969, 4.313192, 3.71974,
            4.208402, 4.41245, 4.576198, 4.4806194, 3.8737319, 4.1465755, 3.34193, 3.9517086,
            3.0632439, 3.298921, 4.0040617, 2.1464565,
        ],
    )
    .unwrap();
    let current_output18: Array3<f32> = conv_layer18.convolve(&test_input18);

    assert!(
        arr_allclose(&current_output18, &target_output18),
        "{:?} was not equal to {:?}",
        current_output18,
        target_output18
    );

    let test_input19 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.9986837, 0.6677257, 0.30110443, 0.59491575, 0.33922875, 0.78129905, 0.45983207,
            0.39850447, 0.29452822, 0.3990066, 0.71123666, 0.9245769, 0.80979043, 0.12899092,
            0.03675647, 0.98098063, 0.12195553, 0.5954175, 0.9923433, 0.4660024, 0.42390975,
            0.41920665, 0.63552475, 0.6557143, 0.47023433, 0.57522744, 0.8106476, 0.4967516,
            0.7960696, 0.35081705, 0.5810784, 0.47564268, 0.5950288, 0.23334436, 0.35525572,
            0.65956026, 0.98428434, 0.9814129, 0.8474201, 0.8124901, 0.4688829, 0.6571122,
            0.44344074, 0.72268397, 0.50578433, 0.89210486, 0.29161337, 0.30685803, 0.7015651,
            0.76217693, 0.53040797, 0.23608343, 0.3370403, 0.5153227, 0.12298316, 0.38562468,
            0.39561588, 0.21013618, 0.00794073, 0.21312988, 0.09544598, 0.16640656, 0.39524126,
            0.70305294, 0.6951719, 0.76970625, 0.01947077, 0.72122115, 0.43079308, 0.654422,
            0.33095863, 0.37373173, 0.58761567, 0.49653715, 0.6094103, 0.37502283, 0.7990719,
            0.94719636, 0.90727985, 0.43818596, 0.15018035, 0.26554954, 0.2760564, 0.15040922,
            0.2605517, 0.5976553, 0.6584785, 0.23161498, 0.6921513, 0.64733315, 0.854641,
            0.03501531, 0.919175, 0.9064802, 0.96888334, 0.3072559, 0.23253885, 0.44027686,
            0.44643322, 0.46258068, 0.5722288, 0.78549147, 0.13830437, 0.6860908, 0.06808019,
            0.9976838, 0.354391, 0.21689764, 0.20947075, 0.3030436, 0.6783678, 0.34793916,
            0.91172963, 0.3608854, 0.42308012, 0.8522385, 0.80487376, 0.80669975, 0.20780124,
            0.6568672, 0.9909294, 0.6851016, 0.89588594, 0.5385484, 0.81079435, 0.4669414,
            0.6860896, 0.6578895, 0.45783395, 0.41847235, 0.20630272, 0.4953162, 0.01959337,
            0.8371248, 0.5716346, 0.18082424, 0.03656635, 0.75915194, 0.77819145, 0.18088074,
            0.97228986, 0.45446303, 0.15876009, 0.15172002, 0.21870646, 0.67578596, 0.17699589,
            0.16891658, 0.8514548, 0.8860516, 0.82196736, 0.29569438, 0.6795675, 0.5676109,
            0.51335657, 0.48570013, 0.05080688, 0.14092551, 0.35189822, 0.2716982, 0.43087652,
            0.8219524, 0.58699363, 0.18927561, 0.15438259, 0.48444232, 0.3548947, 0.13443872,
            0.05775462, 0.01398679, 0.3553907, 0.48720175, 0.39191842, 0.7353281, 0.9867899,
            0.39567924, 0.6681931, 0.8741793, 0.41219148, 0.43805563, 0.24787006, 0.4657539,
            0.85423166, 0.0098169, 0.03120668, 0.20878878, 0.54290944, 0.55167097, 0.4212191,
            0.76660496, 0.5203346, 0.55199236, 0.24225757, 0.926732, 0.29546982, 0.90794486,
            0.11640227, 0.303067, 0.60486084, 0.67949796, 0.26091522, 0.60724497, 0.814399,
            0.1684874, 0.39451823, 0.42586836, 0.31500933, 0.7739118, 0.26620805, 0.4912706,
            0.5582184, 0.14920756, 0.2643653, 0.33135027, 0.44614497, 0.70298517, 0.4382807,
            0.8829611, 0.02333054, 0.8527415, 0.9057288, 0.2235733, 0.4187059, 0.45508063,
            0.9389992, 0.20756939, 0.20021324, 0.47618693, 0.5130793, 0.5888296, 0.59889996,
            0.712934, 0.8516371, 0.85897654, 0.02912598, 0.49246776, 0.9397661, 0.63142025,
            0.5599716, 0.44621915, 0.24492879, 0.19181061, 0.10366015, 0.23688388, 0.49670485,
            0.67701244, 0.45396152, 0.42133403, 0.6850384, 0.85629207, 0.76669574, 0.8534153,
            0.09939361, 0.82822984, 0.0080629, 0.6076978, 0.6677539, 0.97007126, 0.6953572,
            0.23404987, 0.7702405, 0.4813676, 0.6708753, 0.9848203, 0.11385565, 0.8758087,
            0.7094253, 0.9717235, 0.75492734, 0.5238351, 0.39455086, 0.31395626, 0.9446217,
            0.89547807, 0.2690143, 0.7254593, 0.50680614, 0.67623514, 0.03957006, 0.55472255,
            0.6921552, 0.50038505, 0.52786833, 0.31035745, 0.81599206, 0.6554322, 0.03603773,
            0.5390226, 0.13498625, 0.9852127, 0.16336593, 0.99620885, 0.19921382, 0.10756692,
            0.44649956, 0.9498278, 0.7139447, 0.35815725, 0.02897831, 0.9721884, 0.0504973,
            0.86107606, 0.0762892, 0.7412536, 0.00293741, 0.5842812, 0.80308986, 0.35674444,
            0.5351153, 0.7371504, 0.4191397, 0.79290223, 0.5041107, 0.55641156, 0.04526648,
            0.7861993, 0.6335109, 0.24217102, 0.909113, 0.80903274, 0.83993906, 0.81976044,
            0.7214805, 0.4007092, 0.57626015, 0.95258534, 0.49337667, 0.10905766, 0.94602233,
            0.3964408, 0.50362575, 0.07761287, 0.9322157, 0.31622592, 0.17759776, 0.6427077,
            0.1279444, 0.15542968, 0.97430724, 0.6300257, 0.08167998, 0.75798357, 0.09109604,
            0.76193047, 0.753834, 0.99397695, 0.34140688, 0.5777924, 0.45099398, 0.34813985,
            0.49516845, 0.39270082, 0.56429654, 0.26018232, 0.8857335, 0.69079584, 0.55985487,
            0.84918076, 0.651287, 0.31415004, 0.78383875, 0.24776831, 0.09454908, 0.72278243,
            0.9236739, 0.3642707, 0.08929764, 0.09322322, 0.8198366, 0.618867, 0.8466656,
            0.10928579, 0.07829133, 0.38427126, 0.9209781, 0.05534032, 0.33815342, 0.21587123,
            0.12900938, 0.838805, 0.70533997, 0.33450192, 0.38096663, 0.80549437, 0.5303596,
            0.28034258, 0.09335517, 0.9028811, 0.78340423, 0.99226147, 0.01493673, 0.46203193,
            0.7521283, 0.6052495, 0.06838121, 0.6306182, 0.68300223, 0.1979319, 0.9812565,
            0.35303903, 0.01351135, 0.13854095, 0.8103337, 0.02116127, 0.74512017, 0.52984565,
            0.99872667, 0.5559971, 0.15128084, 0.7154567, 0.5549817, 0.43051603, 0.23737086,
            0.6562062, 0.28059772, 0.39736098, 0.4673331, 0.00891489, 0.33884785, 0.6193884,
            0.18607458, 0.4431885, 0.01808522, 0.11024449, 0.5957428, 0.257344, 0.57106304,
            0.996507, 0.02719511, 0.34088475, 0.31276718, 0.19508527, 0.51521796, 0.55529255,
            0.534297, 0.4551737, 0.03822044, 0.6844804, 0.538391, 0.19699456, 0.41928288,
            0.12089491, 0.15296015, 0.34004238, 0.08433874, 0.59906757, 0.32895055, 0.40649992,
            0.1499156, 0.2017956,
        ],
    )
    .unwrap();

    let kernel19: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.29841897, 0.9981424, 0.42835027, 0.58305657, 0.8831124, 0.58563495, 0.10433917,
            0.49506864, 0.40216792, 0.66390544, 0.44003266, 0.67188007, 0.731435, 0.22884977,
            0.45354384, 0.29792643, 0.5272041, 0.7485446, 0.28624305, 0.9282255, 0.22695023,
            0.43092483, 0.95730776, 0.9923889, 0.1289603, 0.71256125, 0.9421077, 0.22165331,
            0.8957009, 0.01525365, 0.46406323, 0.38429326, 0.29330772, 0.68809766, 0.82745576,
            0.3258292, 0.9536923, 0.92134255, 0.80696934, 0.17606957, 0.53414553, 0.8541269,
            0.55071187, 0.25444788, 0.6592291, 0.53072673, 0.77232087, 0.41289273, 0.10455144,
            0.6597538, 0.91647804, 0.9571631, 0.5645497, 0.86060405, 0.55495816, 0.99726844,
            0.39086932, 0.13288063, 0.43203548, 0.02057635, 0.44437656, 0.00600106, 0.86474377,
            0.96837336, 0.52825713, 0.5756082, 0.5063528, 0.616231, 0.03237247, 0.7064923,
            0.24617034, 0.19121489, 0.8937895, 0.5221176, 0.920404, 0.45497388, 0.84028614,
            0.69197804, 0.92198044, 0.00114695, 0.6866234, 0.7426373, 0.16886179, 0.28282914,
            0.7157508, 0.9215918, 0.6186801, 0.02047214, 0.46281454, 0.6887593, 0.01173675,
            0.59077984, 0.3787974, 0.13223803, 0.20979705, 0.2962676, 0.82381725, 0.62355626,
            0.19442007, 0.15597425, 0.44047666, 0.02631165, 0.79910344, 0.68305826, 0.13235328,
            0.36176983, 0.98954594, 0.10666531, 0.8560913, 0.24844927, 0.94089866, 0.611323,
            0.2604722, 0.62072504, 0.52674735, 0.04456268, 0.12730101, 0.5831064, 0.7618813,
            0.99088573, 0.3498497, 0.9893213, 0.9229839, 0.968473, 0.3473291, 0.54743403,
            0.01200672, 0.04459461, 0.11107332, 0.79086024, 0.427044, 0.28423595, 0.5638385,
            0.55078715, 0.5209626, 0.9690265, 0.40990627, 0.76069826, 0.19991861, 0.05412404,
            0.96710503, 0.9513363, 0.08358769, 0.18445559, 0.15507828, 0.55250907, 0.7522076,
            0.41979295, 0.90154666, 0.06932273,
        ],
    )
    .unwrap();
    let conv_layer19 = ConvolutionLayer::new(
        kernel19,
        Some(Array::from_shape_vec((2,), vec![0.98834366, 0.9326744]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output19: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            9.653599, 11.970932, 11.976262, 12.55707, 11.74151, 12.873491, 13.123918, 14.376711,
            14.494039, 14.859545, 14.492131, 16.391111, 13.781951, 11.331936, 7.619809, 12.813008,
            12.719395, 15.746718, 16.18992, 15.443215, 16.257347, 15.117197, 17.609245, 17.669807,
            19.067556, 18.468973, 18.161816, 16.243212, 13.653459, 9.666283, 12.155081, 17.22647,
            21.242437, 19.304487, 20.063547, 20.330542, 20.023716, 23.28994, 23.56234, 22.23445,
            23.277283, 22.39913, 22.025831, 18.025726, 12.737234, 12.670627, 17.489155, 20.495647,
            19.89329, 21.851805, 22.366928, 21.580204, 22.458805, 23.233244, 22.421473, 23.09961,
            23.676373, 23.756908, 18.031012, 13.924822, 11.154327, 15.993873, 20.304441, 21.132822,
            20.80197, 20.078438, 21.788366, 21.343586, 22.318151, 22.231983, 22.53213, 20.718279,
            22.232576, 17.426111, 15.15842, 12.297668, 17.137932, 20.793354, 21.621983, 21.696009,
            21.763622, 22.490862, 21.017414, 21.692295, 21.700478, 21.024233, 23.37482, 22.64152,
            17.817335, 13.780861, 12.560373, 17.21185, 20.22192, 21.551693, 21.993866, 23.133257,
            23.12813, 20.79077, 21.927856, 21.618267, 21.827532, 21.81068, 22.35761, 17.548136,
            14.058898, 13.403154, 16.978916, 21.559114, 21.024036, 22.540134, 21.285376, 20.222494,
            21.753527, 20.606853, 20.472252, 20.184322, 21.079926, 22.252243, 18.75529, 14.698747,
            10.983893, 13.768619, 16.56236, 18.657957, 18.620028, 17.3898, 17.677948, 16.880117,
            16.08957, 16.420973, 17.39528, 16.649557, 18.006264, 13.281936, 10.9691515, 8.72452,
            11.392624, 13.365859, 14.029067, 13.518512, 13.372222, 13.319552, 12.331085, 12.161015,
            13.398825, 12.361741, 13.000317, 13.422627, 11.325031, 8.397616, 5.7288623, 10.17917,
            10.978493, 10.976922, 10.405405, 10.973852, 11.811098, 14.03726, 13.706485, 13.5877285,
            13.958527, 13.102817, 13.11938, 11.25928, 8.469572, 8.636173, 14.126234, 14.440353,
            14.06492, 15.240129, 15.654805, 15.820024, 16.31004, 15.893904, 17.105087, 17.723381,
            17.453999, 16.163565, 14.041812, 9.427872, 10.23386, 14.736401, 17.590385, 17.348925,
            19.992464, 19.246449, 17.462181, 18.95891, 20.0446, 20.806345, 21.736807, 22.038172,
            18.610712, 16.882107, 12.1747675, 8.8647785, 13.846589, 18.70333, 17.939875, 18.468208,
            20.264908, 19.37638, 19.830511, 20.328451, 20.37597, 19.307436, 20.856974, 21.22749,
            16.960379, 13.506357, 9.223228, 13.859453, 16.912613, 16.634949, 18.275894, 20.103556,
            20.933329, 19.696386, 19.358973, 20.565851, 20.48791, 20.53184, 18.148844, 15.719823,
            11.774834, 10.557466, 14.206301, 17.539822, 19.51655, 19.931541, 19.42093, 19.955395,
            19.535439, 19.540245, 20.482313, 19.322693, 18.904533, 18.747572, 16.163994, 12.630375,
            9.505994, 14.610369, 18.866413, 19.64409, 19.324394, 20.04204, 21.79361, 19.010838,
            19.64263, 19.271263, 18.498302, 19.111116, 20.892042, 16.012417, 12.802526, 9.737371,
            15.664254, 19.118582, 19.823374, 19.281902, 19.10383, 19.102184, 17.823467, 17.323503,
            18.249727, 19.792408, 18.61091, 19.672838, 15.380043, 13.624627, 8.29297, 12.050858,
            14.236801, 15.844072, 17.38449, 14.433617, 14.875921, 13.853769, 14.208828, 15.771547,
            14.231245, 13.697215, 15.486258, 12.204834, 9.150994, 6.912212, 9.26603, 11.718378,
            11.138415, 13.142873, 11.569096, 11.911381, 11.255274, 11.460386, 10.137049, 10.293786,
            11.887716, 13.516068, 10.131586, 6.745184,
        ],
    )
    .unwrap();
    let current_output19: Array3<f32> = conv_layer19.convolve(&test_input19);

    assert!(
        arr_allclose(&current_output19, &target_output19),
        "{:?} was not equal to {:?}",
        current_output19,
        target_output19
    );

    let test_input20 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.95973784, 0.01301026, 0.94750315, 0.19795854, 0.28899273, 0.23282553, 0.28506085,
            0.8682599, 0.8220057, 0.13914691, 0.97130793, 0.03333057, 0.8087165, 0.8024787,
            0.3590328, 0.3778757, 0.29034188, 0.13700394, 0.39205238, 0.24718882, 0.48470175,
            0.7902731, 0.5366342, 0.15042725, 0.83978635, 0.4692924, 0.90220386, 0.14340296,
            0.15322222, 0.34881374, 0.6232285, 0.83594126, 0.16714397, 0.4264953, 0.04108659,
            0.89079213, 0.67103004, 0.61967033, 0.67488444, 0.6248762, 0.07340664, 0.29599693,
            0.9083485, 0.06401163, 0.25583467, 0.43448448, 0.12822089, 0.16394943, 0.70240456,
            0.7238483, 0.549147, 0.33882853, 0.30244493, 0.7881106, 0.18323863, 0.9491711,
            0.49022144, 0.52859294, 0.44141734, 0.6618432, 0.13727196, 0.67812914, 0.7189277,
            0.41655356, 0.22713542, 0.18293881, 0.19180061, 0.53551257, 0.17122072, 0.2234552,
            0.44359767, 0.71808743, 0.22415204, 0.39959106, 0.2637363, 0.9748111, 0.66883224,
            0.2623765, 0.8298644, 0.47769547, 0.64253336, 0.4279932, 0.05377042, 0.8601327,
            0.49268875, 0.61688894, 0.5893039, 0.61891294, 0.22768961, 0.6413237, 0.64964074,
            0.28283465, 0.42210525, 0.9995373, 0.3990037, 0.3180952, 0.26837257, 0.9196311,
            0.7323518, 0.6665136, 0.3261171, 0.19029295, 0.3486188, 0.6853804, 0.73598146,
            0.53857046, 0.808091, 0.5484634, 0.1735309, 0.08409429, 0.19677189, 0.31993368,
            0.35334954, 0.93418276, 0.7082613, 0.548942, 0.8944676, 0.9037912, 0.09672975,
            0.7584863, 0.50249976, 0.6728813, 0.9159213, 0.34614602, 0.3804167, 0.17313573,
            0.04152302, 0.9053351, 0.13061608, 0.9456902, 0.08379908, 0.9247798, 0.48921642,
            0.9617579, 0.37667143, 0.7197943, 0.53935903, 0.9792834, 0.86110634, 0.8655558,
            0.29825523, 0.10902967, 0.8346855, 0.7259802, 0.21941453, 0.9845792, 0.46687177,
            0.35792756, 0.8629179, 0.5301964, 0.7178425, 0.50557286, 0.14295319, 0.49131492,
            0.69113374, 0.5921124, 0.4342134, 0.9615546, 0.34359774, 0.8039146, 0.11799753,
            0.26661384, 0.15955769, 0.24098068, 0.04284242, 0.72233695, 0.5201091, 0.8670922,
            0.22291587, 0.01988209, 0.19314824, 0.6377711, 0.93071467, 0.23294576, 0.33839074,
            0.21783541, 0.541387, 0.78856933, 0.6345836, 0.9847154, 0.7037668, 0.5997897,
            0.48499247, 0.524876, 0.3821681, 0.09907741, 0.30532846, 0.08845946, 0.5006215,
            0.2398776, 0.6696186, 0.5578283, 0.9853742, 0.30976853, 0.1141604, 0.94015056,
            0.86896497, 0.12097415, 0.7002529, 0.16485341, 0.46633622, 0.67187446, 0.22297226,
            0.20250201, 0.8218346, 0.61939573, 0.53496593, 0.92597115, 0.787276, 0.7033518,
            0.12606671, 0.06126022, 0.68214494, 0.6032527, 0.6562995, 0.49284568, 0.34271526,
            0.9216594, 0.6940483, 0.47624904, 0.2457454, 0.5552098, 0.32579103, 0.48232093,
            0.6059211, 0.6722847, 0.6767117, 0.378767, 0.3613456, 0.7042522, 0.2238173, 0.74746865,
            0.36677414, 0.2613474, 0.28857794, 0.48979157, 0.67423475, 0.899909, 0.27360517,
            0.3954447, 0.2689032, 0.5869422, 0.4054549, 0.7236747, 0.27611768, 0.6796681,
            0.5965492, 0.26442292, 0.72399604, 0.43040073, 0.20080982, 0.28246298, 0.6599278,
            0.91767025, 0.7645698, 0.5936739, 0.36463642, 0.96831554, 0.21878308, 0.11189529,
            0.5395196, 0.29627025, 0.11818971, 0.10945795, 0.6594448, 0.13544263, 0.499514,
            0.4529453, 0.7131112, 0.07966255, 0.29142585, 0.68724895, 0.04232477, 0.13420771,
            0.33155695, 0.18794546, 0.46529654, 0.69078076, 0.02903101, 0.8734327, 0.80222553,
            0.87264, 0.45615637, 0.5333259, 0.2464628, 0.38038793, 0.32190928, 0.21625711,
            0.5803451, 0.77878344, 0.5063043, 0.7617363, 0.08551037, 0.49260572, 0.83634585,
            0.85251176, 0.26562026, 0.11365525, 0.29192793, 0.5136638, 0.52510726, 0.9699456,
            0.38765427, 0.00939824, 0.45361686, 0.995697, 0.92569697, 0.11329727, 0.26731393,
            0.503521, 0.8463833, 0.9085028, 0.3704941, 0.9285037, 0.12043773, 0.67069006,
            0.8701852, 0.46525767, 0.6889376, 0.46818328, 0.5472589, 0.6721221, 0.90702206,
            0.09271611, 0.28051263, 0.18856683, 0.93896073, 0.90126437, 0.45777324, 0.82003325,
            0.74227345, 0.35982916, 0.26917773, 0.20851454, 0.02530834, 0.20598832, 0.9827812,
            0.9133796, 0.15525481, 0.5416497, 0.9737615, 0.05620801, 0.5500161, 0.07101188,
            0.06457912, 0.01951568, 0.7752038, 0.58928204, 0.4893268, 0.37889206, 0.08488933,
            0.6984468, 0.13838367, 0.45322236, 0.2854609, 0.91733086, 0.7673163, 0.47535938,
            0.430336, 0.4033134, 0.22314279, 0.9198305, 0.15463823, 0.52706516, 0.5380625,
            0.67769825, 0.29269645, 0.5224842, 0.9161704, 0.8363249, 0.9655628, 0.6265972,
            0.62550986, 0.10147168, 0.37210664, 0.38499138, 0.57677186, 0.04776173, 0.13979574,
            0.34796357, 0.9293805, 0.02366208, 0.61658883, 0.4602623, 0.80627346, 0.68917644,
            0.03279204, 0.61764413, 0.84899485, 0.07298613, 0.5107428, 0.15994577, 0.23598829,
            0.42557174, 0.54054207, 0.9973023, 0.7787232, 0.34836137, 0.25666964, 0.21393713,
            0.13617612, 0.29511, 0.47935697, 0.6027421, 0.26824012, 0.09325973, 0.9999695,
            0.66342247, 0.30268312, 0.4703405, 0.5264845, 0.41914597, 0.93084306, 0.3860588,
            0.3112818, 0.5403318, 0.7544129, 0.23385784, 0.4532712, 0.01928642, 0.31058535,
            0.9231324, 0.5111338, 0.85251105, 0.22631837, 0.6079196, 0.8465506, 0.15559341,
            0.47655347, 0.9317292, 0.73171294, 0.4252797, 0.8793211, 0.8085952, 0.8205566,
            0.8826353, 0.87073565, 0.9907962, 0.2437348, 0.04408429, 0.9780975, 0.83518285,
            0.442418, 0.9607086, 0.09084356, 0.68804723, 0.78929913, 0.7980087, 0.09648526,
            0.31804043,
        ],
    )
    .unwrap();

    let kernel20: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.9619224, 0.99013287, 0.8503088, 0.7815283, 0.39002457, 0.42641845, 0.6908657,
            0.8910958, 0.29640055, 0.17727828, 0.2089261, 0.49979007, 0.5642379, 0.7030672,
            0.27845028, 0.94389766, 0.20636925, 0.6667202, 0.76393694, 0.48988733, 0.7356281,
            0.5468075, 0.6818526, 0.6987177, 0.40215194, 0.33184996, 0.23738323, 0.42945445,
            0.64908034, 0.5833552, 0.97156674, 0.30805972, 0.8751756, 0.29061684, 0.32266703,
            0.7455838, 0.39886904, 0.45468414, 0.77469295, 0.7965488, 0.7646959, 0.2791718,
            0.26557565, 0.51671654, 0.14463307, 0.49024066, 0.5644179, 0.11350685, 0.04281154,
            0.57114464, 0.39833462, 0.2126663, 0.1499708, 0.73064125, 0.4591814, 0.0285126,
            0.9280576, 0.72670996, 0.34472197, 0.18288209, 0.8307759, 0.43013144, 0.35543966,
            0.7593779, 0.45248675, 0.78150374, 0.98412323, 0.8635111, 0.6667131, 0.5340124,
            0.13950849, 0.5753187, 0.22581473, 0.31055018, 0.3559486, 0.94544613, 0.8794452,
            0.2699716, 0.45676422, 0.20421512, 0.9916458, 0.83325416, 0.89352185, 0.35738185,
            0.944354, 0.84149826, 0.31955966, 0.0488622, 0.17070445, 0.6034462, 0.36290234,
            0.8472129, 0.49671844, 0.19694914, 0.80763394, 0.21147081, 0.22211874, 0.43805566,
            0.43717724, 0.89430046, 0.9283719, 0.8128758, 0.7373128, 0.42566535, 0.44624192,
            0.23623948, 0.8063544, 0.26903114, 0.20805733, 0.03382581, 0.48451242, 0.56668675,
            0.22873266, 0.299916, 0.9879018, 0.10301294, 0.24334253, 0.44374004, 0.6423686,
            0.8110261, 0.78476405, 0.6695578, 0.93565845, 0.371802, 0.9326136, 0.8960472,
            0.2305824, 0.10865664, 0.7400156, 0.52640325, 0.5962613, 0.49422848, 0.8606839,
            0.99988186, 0.56603134, 0.48357183, 0.35112807, 0.57117814, 0.8400437, 0.13524966,
            0.9466828, 0.39311504, 0.9012402, 0.75557137, 0.5037727, 0.4219725, 0.47999805,
            0.22245023, 0.7799652, 0.29572076,
        ],
    )
    .unwrap();
    let conv_layer20 = ConvolutionLayer::new(
        kernel20,
        Some(Array::from_shape_vec((2,), vec![0.7884574, 0.87387353]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output20: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            7.9020963, 10.013231, 11.920942, 11.561897, 11.409399, 12.508881, 12.439877, 13.670319,
            13.622709, 12.524595, 11.38835, 12.687614, 11.358028, 10.936579, 7.530489, 10.258171,
            12.501919, 15.534012, 13.592407, 13.887157, 16.115513, 15.450253, 17.084192, 16.349958,
            16.57108, 17.049889, 17.480581, 15.984631, 13.272896, 10.995033, 12.554573, 15.039597,
            19.639206, 17.636616, 17.891193, 18.24123, 18.388668, 19.22371, 20.91276, 21.01192,
            20.236416, 21.052246, 21.424076, 15.999956, 12.875162, 12.282408, 15.819988, 18.735134,
            17.854145, 17.336536, 18.978294, 18.779634, 19.293957, 20.674376, 20.948917, 23.16209,
            21.877146, 21.082159, 17.814432, 11.655333, 11.678762, 14.976332, 19.34575, 19.416386,
            17.335516, 19.699612, 19.847326, 20.445295, 20.381525, 20.608843, 21.682533, 21.374226,
            19.424952, 16.122206, 13.867237, 11.647457, 14.132616, 19.14448, 18.800251, 18.797083,
            19.267122, 18.578398, 20.106813, 19.647768, 20.901718, 21.26439, 21.653826, 20.28272,
            16.914509, 13.178682, 12.12384, 16.118536, 19.977068, 19.661095, 18.994589, 17.644571,
            18.590864, 19.668348, 20.155733, 19.746685, 20.532757, 21.439135, 20.300438, 18.08783,
            13.4377365, 14.034641, 17.356474, 20.262655, 21.434198, 20.006844, 18.64813, 19.564291,
            20.388182, 20.024317, 21.486343, 21.169096, 22.888746, 21.249834, 18.352602, 13.764257,
            11.344852, 14.782261, 19.17416, 17.373178, 16.442194, 16.097187, 15.832571, 17.500174,
            18.575956, 18.080933, 18.013971, 19.254519, 19.192513, 15.208298, 10.849457, 9.188923,
            11.742052, 13.414276, 13.1260395, 11.871452, 9.83333, 10.8564625, 12.834736, 12.851305,
            15.0112, 14.639715, 14.654831, 13.8237915, 12.393621, 8.405952, 8.975793, 10.646517,
            11.237283, 10.534629, 11.620949, 13.317514, 12.3244295, 12.165417, 11.936917,
            12.285138, 12.9655285, 12.678988, 12.750879, 8.968165, 7.1124063, 12.349086,
            14.2782755, 15.732115, 14.593004, 15.062881, 15.970452, 15.81521, 16.327322, 18.683813,
            17.93455, 19.298374, 17.88388, 18.64223, 13.631893, 10.164666, 12.525961, 16.48506,
            19.155064, 19.736635, 19.319746, 19.699677, 20.095953, 21.280495, 22.662088, 23.902283,
            22.106123, 22.452843, 20.847883, 16.49187, 12.462945, 12.355891, 17.064661, 20.157352,
            19.715286, 18.117655, 19.501638, 20.071226, 21.261646, 22.222916, 22.238516, 22.652908,
            21.646908, 22.355389, 16.852404, 12.958662, 11.904666, 16.85963, 19.552326, 19.62569,
            19.70234, 20.553942, 20.233551, 19.938803, 21.081234, 21.749605, 22.249844, 21.544914,
            22.131231, 16.529, 13.44644, 13.076362, 16.023588, 19.223894, 20.10073, 19.847887,
            19.815348, 19.365486, 20.410215, 20.390587, 21.615795, 21.69127, 21.331905, 22.245478,
            17.102362, 13.044455, 12.803241, 16.207802, 18.905535, 20.206888, 19.07245, 20.130617,
            19.527872, 22.028872, 20.320452, 23.298998, 22.469707, 23.38581, 22.58049, 17.266249,
            12.029115, 13.878616, 17.342758, 21.294693, 21.799475, 21.147352, 21.04651, 20.361725,
            22.447775, 20.850216, 21.968456, 22.631218, 23.039522, 21.690813, 17.035238, 14.257181,
            10.990559, 14.478442, 18.198862, 17.758324, 17.3981, 17.30951, 15.797507, 17.479229,
            18.906683, 19.0703, 18.88185, 18.43837, 17.504862, 14.482351, 12.272877, 9.366662,
            11.4854355, 14.36037, 13.341527, 12.776465, 11.866309, 11.1037855, 12.90318, 12.591528,
            14.561727, 14.422421, 15.7323885, 14.494969, 12.401982, 8.79292,
        ],
    )
    .unwrap();
    let current_output20: Array3<f32> = conv_layer20.convolve(&test_input20);

    assert!(
        arr_allclose(&current_output20, &target_output20),
        "{:?} was not equal to {:?}",
        current_output20,
        target_output20
    );

    let test_input21 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.88842475, 0.46210247, 0.9100606, 0.6943571, 0.28570879, 0.49740204, 0.7628443,
            0.69361484, 0.16655016, 0.26878476, 0.5833351, 0.987483, 0.6433668, 0.26489744,
            0.33358738, 0.00685212, 0.658877, 0.97735417, 0.72935826, 0.9653691, 0.4197044,
            0.03449651, 0.8037367, 0.88689566, 0.19757593, 0.33775258, 0.9949134, 0.35532916,
            0.9893505, 0.08079711, 0.9904894, 0.34009922, 0.9768461, 0.44599372, 0.09269939,
            0.15401787, 0.9979789, 0.43281078, 0.7613341, 0.94856584, 0.74674773, 0.33150923,
            0.81601155, 0.5795955, 0.6268428, 0.08034612, 0.86004764, 0.23814383, 0.23848392,
            0.10764247, 0.15689476, 0.7057333, 0.01841728, 0.17239508, 0.5349574, 0.27755457,
            0.5322748, 0.07772017, 0.11139348, 0.8153644, 0.89346814, 0.08395886, 0.40988755,
            0.9683522, 0.71043, 0.24133632, 0.66086763, 0.45239362, 0.7648658, 0.7839022,
            0.11525997, 0.11204641, 0.9365747, 0.28355595, 0.94687665, 0.03193681, 0.95543647,
            0.31404087, 0.45478263, 0.4682662, 0.14600264, 0.11851353, 0.6869693, 0.8751561,
            0.24598803, 0.51128346, 0.21171108, 0.07832938, 0.5420683, 0.16797651, 0.97511005,
            0.46346098, 0.9251605, 0.8355728, 0.9399698, 0.63095194, 0.01171468, 0.31194556,
            0.8929391, 0.8565048, 0.4575972, 0.12795849, 0.10912379, 0.02952798, 0.10989773,
            0.4077279, 0.05740095, 0.90538734, 0.35906726, 0.558365, 0.3003097, 0.26236704,
            0.63975835, 0.6486522, 0.65862477, 0.799062, 0.69226533, 0.11245026, 0.44999343,
            0.19131283, 0.5685218, 0.58138865, 0.8676397, 0.6949583, 0.9890714, 0.9169408,
            0.6733708, 0.11409238, 0.9313712, 0.8991999, 0.4750676, 0.14831749, 0.6030878,
            0.1869184, 0.89142025, 0.73000854, 0.8760484, 0.10900346, 0.48400247, 0.0823018,
            0.06097801, 0.19118872, 0.33851793, 0.8297556, 0.25460038, 0.6896478, 0.46926925,
            0.9184611, 0.61307687, 0.6560135, 0.2807583, 0.12817004, 0.35788414, 0.73211795,
            0.766394, 0.8459047, 0.6683304, 0.87622136, 0.6872295, 0.33361897, 0.32000798,
            0.79336315, 0.51849383, 0.38584012, 0.69625896, 0.6791682, 0.20234333, 0.6032861,
            0.48042777, 0.29644713, 0.21245298, 0.6937536, 0.08710819, 0.7783868, 0.9167911,
            0.5954896, 0.33385372, 0.6801258, 0.89744276, 0.18934485, 0.0564688, 0.82598114,
            0.98988926, 0.7848688, 0.3775057, 0.835442, 0.3418887, 0.80864924, 0.8285267,
            0.9124181, 0.28085634, 0.48125055, 0.07043128, 0.47305906, 0.21471797, 0.37207896,
            0.10534421, 0.6173871, 0.49574846, 0.8706143, 0.62692714, 0.12505583, 0.32882455,
            0.13899311, 0.3103582, 0.88731766, 0.09477642, 0.6096313, 0.97063476, 0.33909172,
            0.24199934, 0.32436553, 0.50521874, 0.40645203, 0.72868264, 0.1845745, 0.67775714,
            0.80771196, 0.20815027, 0.76091385, 0.4281172, 0.04814293, 0.2477421, 0.7363536,
            0.82568175, 0.23572317, 0.8921248, 0.00548277, 0.49046424, 0.6364155, 0.9520912,
            0.5670339, 0.6343222, 0.43334082, 0.30917186, 0.22897069, 0.4161656, 0.06782987,
            0.68388855, 0.13053188, 0.19831854, 0.2792772, 0.82981783, 0.38844034, 0.6897695,
            0.43391317, 0.23881091, 0.4751435, 0.1526219, 0.7832937, 0.6972274, 0.76765394,
            0.48872954, 0.97543496, 0.8414392, 0.5716796, 0.5746593, 0.22662647, 0.72878736,
            0.8178856, 0.75768614, 0.44170135, 0.74363214, 0.03670884, 0.54763687, 0.20077299,
            0.569372, 0.13181128, 0.1308109, 0.4016911, 0.02235833, 0.55760676, 0.83430797,
            0.360836, 0.5673803, 0.9199618, 0.7916734, 0.33047372, 0.5523309, 0.7768597,
            0.49729654, 0.60879946, 0.85824955, 0.18380235, 0.8484274, 0.9645565, 0.12606913,
            0.62333465, 0.40896285, 0.6054057, 0.72344357, 0.6434178, 0.35723293, 0.93422616,
            0.2303441, 0.89859825, 0.4833327, 0.8840179, 0.7071074, 0.38079956, 0.89847404,
            0.76911914, 0.69664335, 0.9301381, 0.5279102, 0.6375929, 0.41758484, 0.05990019,
            0.05685853, 0.2730421, 0.86265, 0.8684104, 0.48180395, 0.6010754, 0.88915735,
            0.63210744, 0.07892385, 0.7639226, 0.6205975, 0.3002219, 0.89278924, 0.9059564,
            0.22659945, 0.14760193, 0.00599372, 0.30542406, 0.72884977, 0.8716085, 0.50342596,
            0.41313493, 0.8858185, 0.6434107, 0.457201, 0.5369807, 0.17925061, 0.61535144,
            0.64973146, 0.41555944, 0.61887467, 0.17343594, 0.544464, 0.19735774, 0.6933606,
            0.5880696, 0.80442405, 0.22769123, 0.53898126, 0.87782377, 0.3336502, 0.02226985,
            0.09958417, 0.27681005, 0.18543234, 0.21413611, 0.26165754, 0.027802, 0.9319044,
            0.92774296, 0.18005316, 0.81092876, 0.6219011, 0.7795068, 0.727294, 0.5608989,
            0.5227581, 0.16359355, 0.11108088, 0.88981736, 0.20012106, 0.7049294, 0.54065806,
            0.43730915, 0.60061646, 0.7395392, 0.7470405, 0.68801785, 0.95084524, 0.81441253,
            0.09777608, 0.89484024, 0.82783866, 0.06093569, 0.91676915, 0.46885744, 0.43228298,
            0.4377543, 0.16224979, 0.06134897, 0.2022184, 0.07522171, 0.7521909, 0.03596852,
            0.28626588, 0.75235975, 0.64913374, 0.92554736, 0.6520992, 0.83952224, 0.42260578,
            0.20702457, 0.30891684, 0.2664503, 0.9631269, 0.31632707, 0.41035688, 0.83820975,
            0.8525341, 0.94491214, 0.3128124, 0.94421536, 0.29261506, 0.43404636, 0.16094153,
            0.66423815, 0.06268399, 0.9579144, 0.7502819, 0.09143817, 0.5871392, 0.09202226,
            0.05626365, 0.9499455, 0.29447657, 0.79507726, 0.7507363, 0.89040357, 0.25231564,
            0.70364726, 0.9338168, 0.16046774, 0.06850108, 0.14086206, 0.18575045, 0.94590175,
            0.778617, 0.01911113, 0.3645535, 0.18393157, 0.711382, 0.29766196, 0.9409139,
            0.66175574, 0.06250098, 0.8391969, 0.1826374, 0.27238533, 0.66940516, 0.02453929,
            0.21670069, 0.7854602,
        ],
    )
    .unwrap();

    let kernel21: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.2715362, 0.31696305, 0.45880696, 0.12966864, 0.9414358, 0.5301901, 0.6730583,
            0.19911295, 0.61133265, 0.9958221, 0.8324337, 0.81940347, 0.52347237, 0.30397218,
            0.23559988, 0.7169752, 0.83921856, 0.00453156, 0.07645657, 0.6461333, 0.31977177,
            0.44444507, 0.51352835, 0.82848716, 0.12873596, 0.19493581, 0.12292414, 0.52158403,
            0.06434184, 0.2047097, 0.32419515, 0.11837589, 0.95561635, 0.8962471, 0.7274973,
            0.8625563, 0.16951792, 0.89949924, 0.30796447, 0.48415482, 0.50550425, 0.24823008,
            0.4232015, 0.24034186, 0.5031169, 0.2196024, 0.4342684, 0.98074585, 0.94563127,
            0.44097564, 0.03213529, 0.49693355, 0.6025867, 0.2574467, 0.45553604, 0.44379726,
            0.9732424, 0.3627867, 0.2487736, 0.21001962, 0.91017437, 0.39797536, 0.26517463,
            0.41195875, 0.38203195, 0.0038282, 0.68331534, 0.45850393, 0.08282983, 0.7426654,
            0.7270585, 0.7993262, 0.18561168, 0.73794276, 0.13075382, 0.92822397, 0.64137435,
            0.43831322, 0.28829068, 0.4976225, 0.2610342, 0.17956546, 0.9744765, 0.5678443,
            0.12135573, 0.63540924, 0.03319374, 0.29163483, 0.8615789, 0.13130435, 0.4782706,
            0.47632742, 0.84865195, 0.28834382, 0.99329984, 0.23911464, 0.05297824, 0.39004716,
            0.4614755, 0.71394044, 0.36967713, 0.72813416, 0.32832128, 0.7320835, 0.8497422,
            0.4687296, 0.5392427, 0.0656543, 0.10209152, 0.1913664, 0.26282084, 0.36334252,
            0.24959058, 0.68387175, 0.02750501, 0.24431834, 0.15333544, 0.79784447, 0.98453826,
            0.3191993, 0.7073291, 0.6451119, 0.6700582, 0.6492628, 0.6315665, 0.00915827,
            0.5234909, 0.88483644, 0.7887491, 0.08833914, 0.5141419, 0.07875764, 0.22806701,
            0.7883233, 0.30477428, 0.2533327, 0.6694263, 0.43796757, 0.97122884, 0.6450341,
            0.5453457, 0.6860607, 0.9949823, 0.46345225, 0.65992147, 0.9109329, 0.5078866,
            0.35286993, 0.81354123, 0.47349572,
        ],
    )
    .unwrap();
    let conv_layer21 = ConvolutionLayer::new(
        kernel21,
        Some(Array::from_shape_vec((2,), vec![0.69897413, 0.5385581]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output21: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            7.878766, 10.961874, 13.748438, 13.446981, 13.428904, 13.236549, 12.744696, 12.648388,
            12.410685, 12.844624, 11.129166, 12.0926285, 12.574146, 11.267672, 8.342943, 9.520294,
            13.802324, 16.206795, 17.49077, 18.932499, 15.793455, 14.056322, 14.122879, 14.708702,
            14.283506, 16.189194, 16.253214, 16.416904, 15.604704, 10.887903, 12.323265, 15.82308,
            19.983393, 20.26175, 18.82074, 17.398474, 17.042515, 17.94732, 18.258966, 18.646652,
            17.3578, 18.819239, 19.947186, 16.123413, 12.377975, 12.521978, 16.843418, 18.967295,
            18.506199, 18.99732, 17.82609, 17.795092, 18.343386, 17.145948, 16.757904, 16.804096,
            16.703453, 15.926859, 13.868513, 10.56135, 10.929071, 14.580898, 19.57659, 19.003792,
            18.746042, 17.778196, 16.738543, 16.596813, 17.721365, 18.150908, 16.07841, 16.5002,
            16.668522, 14.457542, 11.23311, 10.182091, 16.275677, 19.235386, 20.80184, 19.014153,
            18.470911, 18.302284, 17.25859, 15.183651, 17.40339, 16.76688, 15.350306, 16.549074,
            12.660208, 9.011229, 11.905596, 15.9513645, 21.280739, 20.766426, 21.271074, 21.687109,
            20.56269, 18.79247, 17.658146, 19.434135, 16.517557, 16.937286, 15.413847, 12.286562,
            10.472237, 11.554291, 15.905056, 20.147224, 20.13075, 19.869411, 19.998775, 20.678045,
            19.812794, 17.64436, 18.464397, 17.609938, 17.222258, 16.553392, 13.988899, 9.295511,
            8.782026, 12.358803, 16.02194, 17.47816, 16.571884, 16.242489, 17.017532, 14.60318,
            13.5708275, 15.120884, 14.162334, 13.384134, 13.601711, 9.400381, 9.242186, 8.169569,
            9.388666, 13.154741, 12.337872, 12.840864, 12.2082615, 12.232189, 12.146505, 12.143171,
            11.502634, 12.26733, 10.573584, 11.033438, 8.887777, 7.732777, 9.835103, 12.034976,
            14.957579, 13.581724, 14.504845, 13.931747, 12.969384, 12.54427, 12.77775, 13.138311,
            12.836043, 13.678649, 13.308923, 11.3488, 6.997244, 11.574261, 14.632394, 15.629468,
            15.209437, 16.221231, 14.093537, 14.096699, 14.169836, 13.488558, 13.727095, 15.890315,
            15.0374, 16.532637, 13.913697, 9.53797, 11.98648, 17.800955, 21.322865, 19.328419,
            21.158676, 18.078674, 16.936289, 17.018967, 17.41038, 17.974277, 18.185905, 19.980145,
            21.595469, 17.58156, 12.676368, 13.504055, 16.39396, 19.241274, 20.105873, 18.679514,
            18.604166, 19.706827, 18.096638, 17.032057, 18.443558, 17.717707, 17.800316, 18.906462,
            16.080173, 11.229687, 13.896216, 17.651264, 20.743109, 19.493368, 18.46579, 19.567633,
            19.778135, 18.724205, 19.66293, 17.272316, 16.77506, 18.152075, 15.756972, 14.842423,
            11.84858, 14.453149, 16.214983, 21.014786, 22.082752, 18.499773, 18.28905, 19.296099,
            17.270012, 17.787636, 17.359343, 15.72267, 16.224281, 17.22101, 12.74654, 9.062185,
            13.779835, 17.076159, 22.085506, 22.792461, 22.406017, 19.80357, 21.63876, 20.687101,
            19.77258, 18.011454, 18.090626, 16.875092, 16.421854, 14.038704, 10.211036, 12.911797,
            17.035671, 21.161467, 22.151213, 22.264795, 21.195917, 21.500359, 19.641764, 19.547308,
            19.0407, 18.656914, 15.928166, 16.679232, 12.450945, 9.94533, 9.794563, 12.771461,
            16.021751, 17.251463, 17.259264, 16.217936, 16.791214, 15.651063, 15.380367, 14.402566,
            15.4478445, 14.978391, 15.446257, 12.083917, 8.015765, 7.3490286, 8.831822, 11.351863,
            12.231256, 12.267832, 11.319555, 10.701451, 11.330159, 9.469272, 10.796877, 10.590314,
            9.445245, 10.451964, 8.396335, 5.520086,
        ],
    )
    .unwrap();
    let current_output21: Array3<f32> = conv_layer21.convolve(&test_input21);

    assert!(
        arr_allclose(&current_output21, &target_output21),
        "{:?} was not equal to {:?}",
        current_output21,
        target_output21
    );

    let test_input22 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.93777996, 0.29683718, 0.08466158, 0.00917824, 0.36412132, 0.31364414, 0.89281446,
            0.2942369, 0.58694243, 0.14618948, 0.6854037, 0.9551381, 0.21801536, 0.02948874,
            0.7533694, 0.6179016, 0.0048431, 0.8363674, 0.7436905, 0.43101177, 0.47684282,
            0.8383103, 0.19812581, 0.05256698, 0.0566386, 0.72115874, 0.5015921, 0.30938643,
            0.0141753, 0.52415645, 0.96125233, 0.78953046, 0.92893124, 0.80651444, 0.80715597,
            0.2586318, 0.7037131, 0.19224383, 0.6862902, 0.58040166, 0.43242833, 0.34644595,
            0.54378766, 0.4958622, 0.6951301, 0.64524394, 0.73673743, 0.73902684, 0.3842309,
            0.29721686, 0.4160744, 0.6445482, 0.6938951, 0.5561245, 0.6222151, 0.75789964,
            0.8944672, 0.92868453, 0.969901, 0.12573825, 0.04893699, 0.9834889, 0.1309708,
            0.10405056, 0.8907584, 0.19249535, 0.7266609, 0.97847944, 0.88732064, 0.04145219,
            0.40886414, 0.94225925, 0.48782048, 0.3212815, 0.33589965, 0.548731, 0.39472353,
            0.20935446, 0.45881256, 0.878493, 0.11820386, 0.33547178, 0.7895801, 0.6146396,
            0.540371, 0.75543076, 0.9328607, 0.7910178, 0.23345572, 0.08010992, 0.78839546,
            0.5435443, 0.8130077, 0.84049743, 0.16837756, 0.35681823, 0.9842876, 0.7681288,
            0.33871782, 0.3631438, 0.8542315, 0.69573396, 0.04040196, 0.5103013, 0.87327087,
            0.37753972, 0.5957757, 0.19604516, 0.4733552, 0.8233244, 0.9322211, 0.9590118,
            0.8555658, 0.8988257, 0.69483554, 0.25473273, 0.5802638, 0.46147576, 0.8721091,
            0.29316396, 0.5244579, 0.3030269, 0.43613002, 0.26899648, 0.55013156, 0.377008,
            0.41173777, 0.36448047, 0.6758455, 0.53783196, 0.5878724, 0.99191517, 0.95134264,
            0.49309427, 0.87526673, 0.6049057, 0.9610754, 0.25857434, 0.15807904, 0.8105548,
            0.5614543, 0.523342, 0.00024235, 0.24716882, 0.62018555, 0.20580722, 0.5964632,
            0.4590641, 0.42482692, 0.4591073, 0.28503576, 0.02397736, 0.7026854, 0.38717398,
            0.7226435, 0.05888641, 0.19813369, 0.2862437, 0.86936975, 0.98584664, 0.33910662,
            0.04178984, 0.8388797, 0.8752055, 0.19628692, 0.32806987, 0.19625323, 0.48324484,
            0.26547596, 0.29169068, 0.34818614, 0.54155624, 0.55841756, 0.43203035, 0.90635383,
            0.6221619, 0.13312028, 0.58438164, 0.24158852, 0.59230626, 0.80972457, 0.78276193,
            0.18394487, 0.59019595, 0.94054115, 0.44074106, 0.6780788, 0.5855126, 0.8341198,
            0.0958912, 0.42005202, 0.5426904, 0.47856295, 0.6827206, 0.02972909, 0.85674536,
            0.7115263, 0.7810133, 0.7028763, 0.61693937, 0.9954068, 0.53743315, 0.6575606,
            0.96492666, 0.31929258, 0.02934249, 0.562458, 0.09922413, 0.8669238, 0.3993404,
            0.07765451, 0.7353419, 0.00198996, 0.446601, 0.49630404, 0.79839313, 0.58093804,
            0.21345796, 0.7230826, 0.4849385, 0.820553, 0.6282394, 0.20790926, 0.17480347,
            0.10601443, 0.8150346, 0.12723699, 0.27046126, 0.28842458, 0.7203788, 0.6991658,
            0.2606844, 0.5244236, 0.32585683, 0.7152744, 0.68926454, 0.38133958, 0.8642892,
            0.5063956, 0.5213885, 0.59597003, 0.8505795, 0.77488744, 0.32738405, 0.52149975,
            0.34216303, 0.22714303, 0.76833695, 0.36691627, 0.14223123, 0.67387354, 0.09267096,
            0.4985312, 0.5844687, 0.7644656, 0.28446305, 0.3201185, 0.2696341, 0.8578446,
            0.09514732, 0.59979403, 0.5093849, 0.71366805, 0.8897497, 0.5639982, 0.4865683,
            0.57541674, 0.6326081, 0.5130441, 0.49034655, 0.7037209, 0.33208346, 0.63787574,
            0.6291706, 0.47421247, 0.23486345, 0.869952, 0.65361416, 0.03662743, 0.51462924,
            0.9196911, 0.8793221, 0.78186774, 0.48471546, 0.5383869, 0.62534815, 0.3553714,
            0.9968118, 0.49688724, 0.37583, 0.19825909, 0.93685853, 0.68677646, 0.24576978,
            0.36799955, 0.66436833, 0.40309098, 0.40307763, 0.6084176, 0.90556717, 0.6977219,
            0.19649448, 0.12604196, 0.43395323, 0.05938564, 0.06919543, 0.6597403, 0.9080266,
            0.5624922, 0.28784844, 0.02659295, 0.47776845, 0.761984, 0.79841346, 0.79470664,
            0.02110602, 0.5436528, 0.7113907, 0.18104874, 0.24870853, 0.57747316, 0.61245716,
            0.03752139, 0.94574445, 0.4681282, 0.969797, 0.12823386, 0.15993103, 0.42355734,
            0.72048515, 0.48144373, 0.858121, 0.33813378, 0.9778505, 0.46431798, 0.22258297,
            0.6278271, 0.25811204, 0.72843254, 0.27373013, 0.27433896, 0.732491, 0.686285,
            0.9107763, 0.52486306, 0.02864541, 0.6327045, 0.38749784, 0.44100302, 0.78058934,
            0.14124234, 0.28628784, 0.76789916, 0.37555936, 0.43971175, 0.04331319, 0.09780997,
            0.40862006, 0.70528007, 0.09185711, 0.823536, 0.81429756, 0.07302681, 0.6152849,
            0.9356227, 0.77982754, 0.72116077, 0.7105842, 0.4034548, 0.80509216, 0.09783126,
            0.21926212, 0.13207655, 0.7015808, 0.17238653, 0.18460116, 0.5575821, 0.5780929,
            0.04024655, 0.60567653, 0.67101526, 0.11163998, 0.9730741, 0.7957075, 0.13753681,
            0.4249914, 0.959029, 0.64616, 0.01944306, 0.0451069, 0.60988927, 0.5702975, 0.9154141,
            0.298369, 0.47126326, 0.56598395, 0.57679987, 0.28650796, 0.35120928, 0.22292198,
            0.76072216, 0.83723956, 0.61290085, 0.14372927, 0.35133615, 0.2495688, 0.98542094,
            0.44534236, 0.26395977, 0.6413618, 0.29018158, 0.7026515, 0.46130356, 0.83116454,
            0.38838807, 0.7658825, 0.2515203, 0.15498321, 0.32756808, 0.10193888, 0.37098822,
            0.16565025, 0.6440687, 0.39290613, 0.8382721, 0.4127133, 0.66124403, 0.8694313,
            0.91799986, 0.7149846, 0.17257373, 0.72377336, 0.43520793, 0.32025692, 0.2293873,
            0.20685975, 0.5618886, 0.03298171, 0.04516815, 0.28889108, 0.37819353, 0.35941374,
            0.22646557, 0.4865611, 0.06850646, 0.36713555, 0.97507524, 0.9856017, 0.13691914,
            0.25587377,
        ],
    )
    .unwrap();

    let kernel22: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.23198135, 0.63168263, 0.90634483, 0.62659276, 0.00830113, 0.57375854, 0.66081995,
            0.4511592, 0.7095235, 0.3701531, 0.44504768, 0.49891138, 0.54966915, 0.5332531,
            0.02767666, 0.48693478, 0.61392415, 0.8851657, 0.26826328, 0.40765005, 0.27840444,
            0.89372283, 0.997754, 0.46338457, 0.78445923, 0.582613, 0.74148726, 0.58712804,
            0.25544515, 0.38590935, 0.6811402, 0.50827444, 0.666266, 0.23000365, 0.408603,
            0.913767, 0.06065572, 0.15407899, 0.6195248, 0.8449633, 0.7626016, 0.18244016,
            0.17815381, 0.26175067, 0.04169152, 0.30446777, 0.9487898, 0.73767346, 0.88644,
            0.420784, 0.0778392, 0.8826608, 0.6492047, 0.38854632,
        ],
    )
    .unwrap();
    let conv_layer22 = ConvolutionLayer::new(
        kernel22,
        Some(Array::from_shape_vec((2,), vec![0.68384963, 0.6266061]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output22: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            3.4036627, 5.225511, 5.2481384, 5.5953603, 4.69137, 4.5783753, 4.916117, 6.134972,
            5.809784, 4.1274943, 5.300465, 6.2505507, 7.096333, 7.8695235, 7.9680085, 6.834593,
            7.215128, 6.662538, 7.363949, 4.601278, 6.9443307, 8.49662, 8.868747, 8.912622,
            9.330721, 7.988975, 7.1007257, 7.630343, 6.9356713, 4.9772625, 6.250484, 8.959747,
            8.864063, 8.391109, 9.162275, 8.794023, 7.7365417, 7.946498, 7.9581184, 5.556936,
            6.2736588, 9.275627, 9.934554, 10.189237, 7.898916, 7.5941343, 7.454686, 9.304574,
            8.2462845, 5.9713793, 5.739055, 7.2133174, 8.313969, 8.48605, 8.708914, 8.754094,
            8.667733, 9.298676, 8.522463, 5.992627, 6.337197, 7.5647883, 7.851653, 6.6816325,
            7.671346, 8.40252, 8.232644, 8.365442, 8.082798, 5.756468, 5.1932383, 7.135797,
            6.892966, 7.7746396, 7.985215, 8.339163, 9.603044, 8.815908, 6.959618, 4.1121464,
            6.508759, 9.216023, 8.366766, 8.21771, 7.339553, 7.613868, 8.561967, 7.9759016,
            6.9053483, 3.8550274, 5.7797294, 9.349921, 9.067838, 8.606719, 7.7298427, 8.924635,
            8.254442, 8.369322, 6.7589912, 4.001899, 7.29687, 10.252028, 10.573445, 8.729506,
            7.881919, 8.315186, 8.033479, 7.983762, 6.723391, 4.653335, 5.7669845, 8.260747,
            8.172433, 9.472294, 8.250912, 8.647422, 7.6028385, 8.106926, 7.79199, 5.6524506,
            6.9356766, 9.607529, 9.510675, 9.56367, 8.161475, 8.403067, 8.05795, 8.815348,
            7.6848316, 5.011811, 5.6248055, 8.022557, 7.8573904, 7.26759, 6.6203504, 7.990389,
            7.8867307, 8.35805, 7.8991876, 4.4651766, 4.054552, 5.6788006, 5.4682007, 4.6906147,
            4.1685667, 5.276879, 5.5926147, 5.2061677, 4.725326, 3.1786005, 3.2778916, 4.0541234,
            3.591536, 4.8883367, 4.659993, 3.9392629, 3.8390656, 5.5373335, 5.271379, 3.9989095,
            4.83322, 5.869032, 5.6120987, 6.21198, 6.6142507, 6.237586, 6.304083, 6.6496267,
            6.859289, 4.3522, 5.0867643, 8.254613, 8.554389, 7.1906104, 7.5720778, 6.9564595,
            6.829578, 5.86057, 6.0147634, 4.525384, 5.593621, 8.19519, 8.383026, 8.428156,
            8.765426, 7.4706354, 6.475364, 6.8487906, 6.8862677, 5.38111, 5.1636186, 7.4863205,
            8.328547, 9.2268715, 7.6347857, 7.2384095, 7.2228513, 8.45138, 6.9691486, 5.1368103,
            5.4728055, 7.6419597, 7.666063, 8.198209, 7.7630463, 7.8090515, 8.163062, 8.452783,
            7.691678, 5.7217045, 4.514324, 6.5846567, 6.9670944, 5.558552, 6.2554545, 7.075084,
            6.992918, 8.210412, 7.507957, 5.0800023, 5.5301547, 6.7788787, 6.6981325, 6.783814,
            7.3624606, 7.7069273, 7.7962193, 7.481013, 6.438415, 4.3656464, 4.6480613, 7.0578027,
            7.4126563, 7.418009, 6.6839805, 7.198046, 8.079818, 7.3933835, 6.334031, 3.68085,
            5.4322543, 8.158231, 8.738866, 8.260219, 6.3868837, 7.409434, 8.0782, 7.720945,
            6.2759285, 3.455203, 6.3665457, 8.908703, 8.473396, 7.90006, 7.368061, 7.109311,
            6.6220293, 6.990663, 5.845111, 4.2184467, 5.4482822, 8.037383, 7.7979746, 8.129912,
            7.479809, 7.5567813, 7.203459, 7.99918, 7.138411, 5.5450516, 5.48841, 8.243886,
            8.144251, 8.269034, 7.2313676, 7.523256, 6.1747947, 6.8678885, 6.283414, 4.5702477,
            4.800033, 7.342187, 7.6008883, 7.341228, 6.3439445, 7.523735, 7.809066, 8.129163,
            7.430818, 4.505602, 3.6869612, 5.488192, 5.3191476, 4.494812, 4.05958, 4.8023643,
            5.1616826, 5.007969, 4.5229545, 3.2588015,
        ],
    )
    .unwrap();
    let current_output22: Array3<f32> = conv_layer22.convolve(&test_input22);

    assert!(
        arr_allclose(&current_output22, &target_output22),
        "{:?} was not equal to {:?}",
        current_output22,
        target_output22
    );

    let test_input23 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.54694176, 0.02779119, 0.5851739, 0.89240646, 0.86535263, 0.20996386, 0.13090512,
            0.7281471, 0.39318708, 0.32672238, 0.6848633, 0.84961617, 0.45679867, 0.6759397,
            0.64456964, 0.96701485, 0.16086549, 0.7087405, 0.8894942, 0.6475722, 0.18771772,
            0.2012408, 0.94878227, 0.58967286, 0.80090123, 0.5799347, 0.9178668, 0.16573429,
            0.58338785, 0.47667617, 0.9532117, 0.21564776, 0.89133877, 0.17446654, 0.0107795,
            0.29889566, 0.39913234, 0.5302894, 0.07816543, 0.7402852, 0.98573536, 0.30748606,
            0.993621, 0.03758357, 0.13146874, 0.86146384, 0.6949514, 0.24558839, 0.7706656,
            0.63164335, 0.81027585, 0.4823058, 0.00178706, 0.4582198, 0.65619093, 0.28412482,
            0.03629474, 0.45011836, 0.35812908, 0.02914437, 0.6919308, 0.10555214, 0.27197847,
            0.08190992, 0.74310327, 0.79646134, 0.6624408, 0.15210663, 0.20802912, 0.5044609,
            0.86376214, 0.9537763, 0.6020873, 0.8303515, 0.9588753, 0.73197967, 0.43450552,
            0.6544757, 0.13750179, 0.45277232, 0.91661334, 0.7614271, 0.42497006, 0.14067934,
            0.44368562, 0.79865277, 0.64449096, 0.92738414, 0.8958137, 0.12830848, 0.04963119,
            0.81917155, 0.42274445, 0.05446685, 0.04101894, 0.09930792, 0.52868897, 0.25766373,
            0.46413782, 0.83290285, 0.2857464, 0.93483084, 0.7527259, 0.6627151, 0.9741788,
            0.8654456, 0.03159403, 0.08091403, 0.14496519, 0.9354205, 0.9959894, 0.7941408,
            0.7423276, 0.02799125, 0.03848875, 0.8054729, 0.99117136, 0.6498168, 0.32092866,
            0.3983662, 0.14606105, 0.5199574, 0.4899074, 0.5360965, 0.44993454, 0.03084684,
            0.408017, 0.5713909, 0.7360495, 0.6618847, 0.9357826, 0.8706936, 0.21162367,
            0.21231653, 0.5704002, 0.7295462, 0.39067075, 0.23692593, 0.02214848, 0.4187255,
            0.4807955, 0.39574632, 0.6238521, 0.27060798, 0.93228406, 0.65184224, 0.71227604,
            0.09648224, 0.52886575, 0.38637865, 0.5918471, 0.01740899, 0.7394339, 0.56132907,
            0.19255765, 0.89828086, 0.18568946, 0.6458292, 0.9000991, 0.14083895, 0.19123401,
            0.29393503, 0.9709682, 0.8210748, 0.37299708, 0.6932929, 0.78315556, 0.7116838,
            0.9060589, 0.3958118, 0.9729085, 0.37787062, 0.3110578, 0.51860094, 0.82105917,
            0.47715545, 0.8672759, 0.86623365, 0.29922554, 0.03071198, 0.03382622, 0.45532396,
            0.62365896, 0.149902, 0.42382213, 0.6566605, 0.45536265, 0.42575222, 0.9792835,
            0.01637395, 0.56597984, 0.7201858, 0.13000993, 0.38580757, 0.46124813, 0.7345686,
            0.45498174, 0.01468375, 0.3311825, 0.68482727, 0.04436485, 0.5904201, 0.9714122,
            0.5436191, 0.94970685, 0.9165496, 0.8299819, 0.68421304, 0.89789516, 0.18899626,
            0.59009004, 0.9988615, 0.02270102, 0.8618434, 0.749954, 0.4278886, 0.6528449,
            0.2109633, 0.6254018, 0.8017509, 0.25951192, 0.02546183, 0.02745248, 0.64143604,
            0.7372767, 0.22952433, 0.6979411, 0.6756809, 0.7017341, 0.918334, 0.03686747,
            0.21967116, 0.65583056, 0.16345957, 0.50405574, 0.5254386, 0.2864706, 0.8577092,
            0.17987564, 0.12798376, 0.37675846, 0.04420354, 0.97041535, 0.407479, 0.07644754,
            0.14767134, 0.6243532, 0.6770185, 0.19173194, 0.46982294, 0.02457761, 0.7269523,
            0.23975594, 0.19219191, 0.3308745, 0.396583, 0.8623231, 0.48967764, 0.19221619,
            0.08402257, 0.7331613, 0.19351119, 0.31468204, 0.7701771, 0.68409836, 0.40743572,
            0.9474348, 0.16978115, 0.98625356, 0.6862598, 0.11779778, 0.5906839, 0.22131853,
            0.04202804, 0.6265308, 0.98268986, 0.6135814, 0.59731364, 0.4896969, 0.5199412,
            0.21510182, 0.6619162, 0.8715136, 0.57183194, 0.2885029, 0.50771165, 0.901779,
            0.08790161, 0.4924265, 0.9705775, 0.63548344, 0.45100802, 0.03424489, 0.7871616,
            0.08637597, 0.78139436, 0.56886005, 0.40288508, 0.55354595, 0.3848688, 0.6487766,
            0.70381683, 0.5216492, 0.7941249, 0.47117358, 0.61789876, 0.6924839, 0.95235467,
            0.99155945, 0.7086247, 0.33689418, 0.1660726, 0.68587416, 0.47262585, 0.45400557,
            0.4621445, 0.33963647, 0.7927198, 0.7496024, 0.530577, 0.519493, 0.91085595, 0.0421344,
            0.1856097, 0.162838, 0.59682316, 0.94973904, 0.45783094, 0.93284744, 0.55421734,
            0.4387137, 0.05644235, 0.44071785, 0.14814438, 0.5569182, 0.20264524, 0.04074387,
            0.6096802, 0.4809522, 0.47096238, 0.00810335, 0.2299158, 0.21848392, 0.7324421,
            0.72079855, 0.6820497, 0.7327517, 0.33685237, 0.93032444, 0.38904786, 0.7066437,
            0.6656503, 0.841237, 0.41910258, 0.5914259, 0.9108226, 0.53551847, 0.4931909,
            0.5435749, 0.68504053, 0.3623532, 0.7924024, 0.75572896, 0.3925273, 0.03436404,
            0.22152406, 0.7389564, 0.649227, 0.3867441, 0.334363, 0.5530898, 0.5252634, 0.77226716,
            0.5538213, 0.6835575, 0.3882179, 0.8170877, 0.00781578, 0.97707474, 0.9940746,
            0.7451846, 0.52904606, 0.30411443, 0.59167516, 0.80317616, 0.43357348, 0.64922994,
            0.6601235, 0.907485, 0.53241575, 0.6945486, 0.67047435, 0.7195878, 0.9020445,
            0.9518084, 0.787326, 0.96140546, 0.327034, 0.41490155, 0.72119236, 0.09215528,
            0.57506335, 0.42119923, 0.03004104, 0.17358404, 0.00080285, 0.28787526, 0.6447292,
            0.906, 0.16794387, 0.5467595, 0.75012404, 0.8576224, 0.77786934, 0.33486333,
            0.88640976, 0.47692633, 0.7414227, 0.04009474, 0.542522, 0.35029164, 0.63763183,
            0.29794613, 0.03641145, 0.16722608, 0.12909189, 0.1589417, 0.5954703, 0.85711455,
            0.24522811, 0.974773, 0.8507247, 0.67588323, 0.83975345, 0.863551, 0.1023455,
            0.51589406, 0.85847044, 0.86474276, 0.8149961, 0.38785052, 0.7663677, 0.9410913,
            0.08583226, 0.8406605, 0.71259856, 0.20553346, 0.24283217, 0.57682234, 0.47941732,
        ],
    )
    .unwrap();

    let kernel23: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.926685, 0.39005476, 0.54092985, 0.88133335, 0.0324995, 0.59161955, 0.22166131,
            0.7692697, 0.01657799, 0.10074908, 0.5621936, 0.00591142, 0.45705855, 0.40678144,
            0.6293653, 0.4260665, 0.48859268, 0.9232842, 0.2502391, 0.80427086, 0.03818879,
            0.36219996, 0.17138262, 0.42277342, 0.94081557, 0.7445628, 0.21179068, 0.71635485,
            0.83644694, 0.19754058, 0.82449114, 0.42324457, 0.26319242, 0.7948271, 0.72855157,
            0.42772555, 0.89472646, 0.9749447, 0.95646167, 0.6503069, 0.15980154, 0.62844396,
            0.6528909, 0.6028544, 0.13638273, 0.39407018, 0.06674533, 0.83398765, 0.7112734,
            0.9988898, 0.45113885, 0.37628287, 0.12467484, 0.23401077,
        ],
    )
    .unwrap();
    let conv_layer23 = ConvolutionLayer::new(
        kernel23,
        Some(Array::from_shape_vec((2,), vec![0.5302998, 0.03754441]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output23: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            2.4167323, 5.1989594, 5.119542, 5.683233, 5.713458, 5.47017, 5.328597, 5.8313546,
            6.322307, 4.2117662, 4.1075006, 6.620964, 7.4046082, 7.440506, 7.417649, 7.5003276,
            8.66716, 7.8386803, 8.069203, 5.681361, 4.388794, 5.8200655, 6.4374137, 6.7167497,
            6.362482, 7.312042, 6.761071, 7.9839516, 6.7296486, 5.462246, 4.031698, 6.204629,
            5.0215783, 6.222052, 6.2015567, 7.1847787, 7.2054887, 6.713975, 6.874557, 5.082922,
            4.256733, 7.7432847, 6.009913, 6.950119, 6.838842, 6.9613733, 6.539677, 7.037789,
            6.5313864, 4.6299815, 4.704898, 7.1779513, 6.755822, 7.004277, 6.7905927, 7.3916397,
            7.451342, 6.7088757, 6.5305533, 5.2782307, 4.433797, 6.7662635, 6.926085, 6.993009,
            7.2430177, 8.107669, 6.725691, 6.8492665, 6.6843147, 5.5521975, 4.1528807, 7.333252,
            5.965205, 6.67086, 6.8209195, 7.753338, 7.7144766, 7.330205, 7.378894, 4.840382,
            3.914763, 7.78286, 7.3601985, 7.20916, 7.1266637, 7.1844873, 8.575455, 6.7509217,
            6.8301473, 5.7953777, 4.1200027, 6.439404, 6.718571, 5.485984, 5.2983923, 6.4882298,
            6.1027966, 7.0225754, 6.6665096, 4.9967036, 4.960036, 6.2249556, 8.105386, 6.9087415,
            5.65408, 6.9268622, 7.3857484, 6.895585, 5.894264, 4.464489, 3.7144527, 6.9759974,
            6.6600237, 5.9993443, 6.3333936, 6.0311303, 6.6597195, 6.5041723, 7.3844295, 4.715099,
            5.6482143, 8.147048, 7.2308297, 6.565304, 6.269704, 7.2915173, 6.868614, 7.415746,
            7.3468394, 5.804065, 4.375082, 6.848407, 7.7214484, 5.662032, 6.3056436, 7.191572,
            6.1476974, 5.991409, 6.995072, 5.0677996, 3.490181, 5.175309, 4.6029143, 4.6176324,
            4.49312, 4.6858068, 4.411679, 4.0684423, 3.589706, 3.3605976, 2.4460428, 5.00763,
            4.850246, 5.928168, 6.0879707, 4.886424, 5.650795, 5.7285857, 6.5992765, 4.8781323,
            4.003482, 7.0265465, 7.92134, 8.64395, 9.391701, 8.40701, 8.831668, 9.730699, 9.043762,
            6.1412387, 3.799093, 8.060718, 7.479819, 7.8067365, 6.8152375, 8.410767, 9.159021,
            9.047455, 8.83297, 6.3335247, 4.8979363, 6.8673162, 6.2545953, 6.918777, 6.7544518,
            8.0903015, 8.295822, 8.394504, 6.4380302, 5.486563, 3.723043, 6.8542657, 6.513106,
            7.3142776, 6.779638, 7.471066, 7.8794913, 7.6399493, 7.2362657, 5.399744, 5.4817243,
            8.029902, 7.439882, 7.015545, 8.083152, 9.527186, 8.139803, 7.1796713, 6.4166784,
            6.078889, 5.171989, 8.507046, 8.148523, 8.253768, 9.129005, 9.392653, 8.2216835,
            8.71852, 7.3826013, 5.037485, 5.5787745, 7.8840933, 7.7772465, 7.0746837, 8.025695,
            9.539539, 8.364634, 8.268183, 8.438295, 6.128445, 4.2793036, 7.345534, 7.1188946,
            7.973894, 7.2189107, 7.949224, 7.7893987, 9.289823, 9.100349, 6.227124, 3.8805616,
            7.6433077, 8.088138, 7.591785, 6.8805947, 7.976576, 8.107198, 7.703898, 7.0850625,
            4.7506404, 4.2126336, 7.8368473, 8.343869, 6.7182155, 5.5026784, 6.756792, 7.735109,
            7.5232506, 7.1211653, 5.059648, 4.0933976, 7.5907946, 8.003025, 6.6678557, 6.1723204,
            8.115207, 8.006984, 8.256562, 6.267867, 5.354143, 5.4104857, 8.246334, 8.015139,
            6.6546364, 6.660026, 7.427925, 8.158954, 7.955659, 7.9996643, 6.003587, 5.122323,
            7.9235415, 7.196234, 7.1483803, 7.5266585, 8.0242605, 7.79172, 8.1178255, 7.653593,
            6.0897083, 4.035434, 6.854839, 6.9286427, 5.3461795, 5.5915704, 6.6995935, 5.680225,
            5.063731, 4.833868, 4.0958834,
        ],
    )
    .unwrap();
    let current_output23: Array3<f32> = conv_layer23.convolve(&test_input23);

    assert!(
        arr_allclose(&current_output23, &target_output23),
        "{:?} was not equal to {:?}",
        current_output23,
        target_output23
    );

    let test_input24 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.8939974, 0.16035181, 0.69940186, 0.7832372, 0.22348203, 0.9558617, 0.08868469,
            0.38749498, 0.14952931, 0.13567366, 0.07900955, 0.4838307, 0.8551138, 0.88709897,
            0.36363718, 0.20012486, 0.18496908, 0.26352006, 0.21221249, 0.04832328, 0.45603734,
            0.48977068, 0.9727279, 0.2223024, 0.7580914, 0.9952911, 0.78135294, 0.34888557,
            0.42161968, 0.88537115, 0.24929681, 0.24824439, 0.75166476, 0.51153195, 0.5740834,
            0.31640235, 0.7000697, 0.9271626, 0.3866544, 0.90997946, 0.52299017, 0.48876184,
            0.43697715, 0.4668421, 0.8870456, 0.13939072, 0.15193757, 0.10377176, 0.03825287,
            0.83194524, 0.71169674, 0.12412303, 0.22000751, 0.65762943, 0.80387026, 0.9246838,
            0.2840905, 0.03209783, 0.19625777, 0.11980431, 0.30807668, 0.13390501, 0.05043373,
            0.12723272, 0.9824148, 0.44856635, 0.2624294, 0.00958934, 0.0995127, 0.08031525,
            0.38621363, 0.66721714, 0.17361915, 0.21235856, 0.99523526, 0.6581009, 0.6043816,
            0.38974792, 0.8524115, 0.36282185, 0.0062347, 0.9864116, 0.53632265, 0.25642252,
            0.35544556, 0.8767314, 0.7978388, 0.9968594, 0.93126136, 0.6872969, 0.01807762,
            0.53289115, 0.29115057, 0.09607173, 0.9291924, 0.7955641, 0.685791, 0.24262014,
            0.7705071, 0.86541873, 0.17621124, 0.6904003, 0.34976122, 0.21581873, 0.5532616,
            0.95970744, 0.55223054, 0.16051039, 0.01258456, 0.97428215, 0.09648368, 0.16584113,
            0.13684596, 0.98106205, 0.68078685, 0.0038069, 0.82000685, 0.7718611, 0.00677892,
            0.48767114, 0.70951277, 0.4362493, 0.9016004, 0.7881427, 0.20579426, 0.11782064,
            0.05957514, 0.8304564, 0.02350398, 0.7684956, 0.91710156, 0.85411555, 0.02124477,
            0.11364035, 0.54948294, 0.02591292, 0.42192397, 0.86921203, 0.4866433, 0.9635667,
            0.5469399, 0.37939194, 0.2165768, 0.38010216, 0.95164126, 0.97265726, 0.8991906,
            0.6288754, 0.94870436, 0.30023637, 0.71587545, 0.308687, 0.1237447, 0.70287865,
            0.5642258, 0.4909772, 0.00513179, 0.96346223, 0.72805625, 0.97035193, 0.34751764,
            0.9530135, 0.07550302, 0.14497681, 0.5457807, 0.43179563, 0.24281646, 0.7374898,
            0.5303815, 0.89710975, 0.02905989, 0.84309703, 0.25471458, 0.8896496, 0.04810897,
            0.92559075, 0.809669, 0.03910594, 0.50459677, 0.14540058, 0.90726244, 0.52693003,
            0.8414026, 0.11982161, 0.10823907, 0.26861846, 0.60190606, 0.6963788, 0.25325528,
            0.13881885, 0.0617022, 0.97593206, 0.5218702, 0.79595083, 0.7466225, 0.8505226,
            0.9156915, 0.42966273, 0.338509, 0.5958763, 0.01035187, 0.3031956, 0.8194214,
            0.8856615, 0.05187115, 0.5123032, 0.23396358, 0.25060338, 0.22599821, 0.35538375,
            0.73213947, 0.68476427, 0.43052003, 0.84957284, 0.67671156, 0.2562911, 0.9386545,
            0.7209084, 0.43928608, 0.6592098, 0.19666669, 0.6909486, 0.61787504, 0.46187317,
            0.15833755, 0.8886515, 0.6841967, 0.06233076, 0.41375995, 0.10668167, 0.36822248,
            0.15206665, 0.46758506, 0.04919559, 0.6929648, 0.85146296, 0.93492836, 0.8471453,
            0.49949893, 0.96549, 0.10857984, 0.04954484, 0.8648635, 0.3216597, 0.5967798,
            0.24502176, 0.40264118, 0.7135809, 0.9563036, 0.99361944, 0.27493003, 0.8091006,
            0.03882129, 0.4241894, 0.21886946, 0.60990226, 0.74957037, 0.0567609, 0.6618832,
            0.31648433, 0.07057995, 0.7937507, 0.35538703, 0.16586034, 0.53550744, 0.9107666,
            0.08248742, 0.7804362, 0.07774146, 0.28810686, 0.5908287, 0.07081332, 0.24666145,
            0.5222477, 0.15884496, 0.7280006, 0.171798, 0.16601218, 0.21720299, 0.75876254,
            0.40750048, 0.2797197, 0.32153466, 0.24065089, 0.1429008, 0.90698326, 0.4561631,
            0.12540661, 0.1332323, 0.0730514, 0.16514674, 0.6010551, 0.20042138, 0.79326254,
            0.81028926, 0.61555564, 0.21495369, 0.6555247, 0.59598464, 0.20266142, 0.51127625,
            0.8523459, 0.5993377, 0.7477862, 0.39690518, 0.5696813, 0.87416846, 0.9011878,
            0.6916412, 0.62494177, 0.6454708, 0.32460627, 0.70959914, 0.92651147, 0.9414587,
            0.6630958, 0.21866481, 0.0734322, 0.37875828, 0.2656954, 0.8068955, 0.4726575,
            0.6983828, 0.07320249, 0.12168032, 0.6426804, 0.9129043, 0.84286946, 0.43912458,
            0.860546, 0.60123307, 0.0920186, 0.14726785, 0.7902299, 0.24951272, 0.5177399,
            0.33639956, 0.39910504, 0.26826426, 0.1295481, 0.04226355, 0.36311296, 0.33253834,
            0.03372582, 0.6151039, 0.16333707, 0.35070628, 0.6325487, 0.45462114, 0.8023284,
            0.8320421, 0.9793079, 0.34594545, 0.48682922, 0.875736, 0.59496605, 0.21009445,
            0.00543618, 0.68560296, 0.04975929, 0.45436794, 0.49572426, 0.80676097, 0.268819,
            0.4114992, 0.7848971, 0.6777965, 0.17057472, 0.70026565, 0.8685083, 0.7508676,
            0.9457111, 0.24649319, 0.9665724, 0.85440516, 0.35102448, 0.07823556, 0.7180487,
            0.8317649, 0.6794208, 0.5517275, 0.10098601, 0.03686264, 0.8578678, 0.12133782,
            0.2815227, 0.23224549, 0.50588506, 0.8644135, 0.02310899, 0.45685568, 0.40417364,
            0.2598548, 0.09913059, 0.7969972, 0.9800414, 0.2510396, 0.11597095, 0.72586274,
            0.09967189, 0.29483116, 0.22645572, 0.16055934, 0.43114743, 0.90784466, 0.96178347,
            0.6382897, 0.534928, 0.6883946, 0.5840903, 0.75128937, 0.66844714, 0.66343355,
            0.46953654, 0.46234563, 0.26003668, 0.7742914, 0.328285, 0.83035487, 0.49730703,
            0.99242496, 0.83261126, 0.8848362, 0.11227968, 0.83485615, 0.38707262, 0.42852715,
            0.3326272, 0.9234643, 0.7350134, 0.24397685, 0.79674083, 0.95016545, 0.21724485,
            0.86324733, 0.1932244, 0.5176914, 0.32076064, 0.9673775, 0.00598922, 0.3920287,
            0.24141203, 0.8279213, 0.6946018, 0.75072336, 0.9753633, 0.24372894, 0.49899355,
            0.31899843, 0.4939616,
        ],
    )
    .unwrap();

    let kernel24: Array4<f32> = Array::from_shape_vec(
        (2, 3, 3, 3),
        vec![
            0.11416891, 0.68334943, 0.5965326, 0.12978615, 0.10638801, 0.11160661, 0.80415183,
            0.28193727, 0.09670109, 0.17522074, 0.30331546, 0.39188403, 0.9932483, 0.44458252,
            0.5604396, 0.07845373, 0.09437273, 0.2022228, 0.30105925, 0.18510874, 0.5031573,
            0.87208086, 0.6317367, 0.9767708, 0.21871181, 0.7000181, 0.39591292, 0.73465174,
            0.00274565, 0.9079947, 0.22369012, 0.68718666, 0.65592414, 0.6682944, 0.578825,
            0.5572757, 0.17275229, 0.35462692, 0.07000257, 0.3533166, 0.616583, 0.30442452,
            0.5472081, 0.2751976, 0.77393323, 0.43991742, 0.05888736, 0.2155859, 0.3237903,
            0.42484936, 0.8007856, 0.16511486, 0.9651604, 0.6095338,
        ],
    )
    .unwrap();
    let conv_layer24 = ConvolutionLayer::new(
        kernel24,
        Some(Array::from_shape_vec((2,), vec![0.780079, 0.213527]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output24: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            3.4148273, 4.543052, 5.332307, 5.392886, 5.8052893, 4.51819, 4.6876917, 4.386852,
            5.471284, 3.545807, 4.9252462, 6.2352586, 7.385867, 6.6020536, 6.6254845, 6.8976407,
            6.570875, 5.949967, 5.9848022, 4.4325585, 4.1881814, 5.959978, 6.4988685, 6.102445,
            6.039266, 5.8393044, 6.5817394, 6.384511, 5.6137657, 3.7567315, 3.9041061, 6.4636364,
            5.768094, 5.326398, 6.097808, 6.3371353, 5.979643, 5.4875154, 5.54533, 3.642476,
            4.0488577, 5.7227793, 5.998184, 5.870002, 6.448381, 6.6435027, 6.508619, 5.590465,
            5.5317492, 3.6628718, 4.5887103, 5.8749676, 6.2448115, 6.5587926, 6.7136073, 6.31311,
            4.9570303, 4.153741, 4.623764, 3.8888865, 4.8691516, 6.5732203, 6.752637, 6.8797975,
            7.3506393, 7.1848054, 5.3210278, 6.164992, 5.7983184, 4.6453886, 4.4715986, 5.2370725,
            6.6190133, 6.6569924, 6.7164025, 6.024912, 6.3250966, 6.521871, 6.500047, 4.535229,
            3.7508602, 4.703705, 4.9372263, 5.2477064, 6.597692, 7.109641, 6.7963405, 7.1751723,
            6.8494444, 4.7550774, 3.1198735, 4.648215, 4.5672874, 5.563159, 6.729765, 7.7354946,
            7.26119, 7.253201, 6.688268, 5.206628, 3.53051, 4.567757, 4.8361635, 5.45403, 7.606109,
            7.25237, 6.54021, 7.107068, 6.6518292, 4.744048, 4.850519, 6.4278536, 6.1684904,
            6.026002, 6.65437, 6.5487614, 5.800299, 5.4108443, 6.674329, 4.311709, 4.541973,
            7.4046254, 6.188052, 6.042767, 5.5967317, 5.5517087, 5.5135975, 5.7759795, 6.1301446,
            4.3608193, 4.4959774, 6.643034, 6.404454, 6.4994617, 5.6943555, 6.3117733, 5.9447784,
            6.2935495, 5.2550583, 4.4970717, 3.5898247, 4.4445567, 4.38321, 5.208615, 5.7323375,
            5.182481, 5.1100993, 4.5524883, 4.521201, 3.2593174, 4.337585, 4.643644, 6.0428762,
            5.9097033, 5.726296, 4.548816, 4.1167216, 4.1135626, 4.7720814, 2.711078, 4.5254173,
            7.301984, 7.646868, 6.2175097, 7.69794, 6.3869095, 6.7286005, 5.9000325, 5.511807,
            4.20488, 4.1580215, 6.9139466, 6.258316, 6.3567734, 6.1826696, 6.959504, 6.86892,
            5.767074, 5.7205725, 3.5712755, 3.8708055, 6.40331, 6.2500124, 6.8026924, 6.2810707,
            6.508788, 6.7396836, 6.1758404, 6.291155, 3.6428516, 4.295937, 6.426951, 5.8362956,
            6.935055, 7.2427516, 6.079021, 5.4832377, 4.395225, 5.7078137, 2.8572426, 4.361689,
            5.5711536, 6.304504, 7.238176, 6.7196984, 7.433997, 4.553378, 4.1154127, 5.0165997,
            2.917942, 4.6480246, 6.315176, 6.0497017, 7.141505, 8.090352, 6.900779, 5.542289,
            5.908558, 4.9679875, 3.8910172, 4.254518, 5.1634173, 5.377713, 7.0076103, 6.2575006,
            7.1535554, 7.2580695, 7.5831566, 7.1426535, 3.8898997, 3.4894772, 4.915543, 5.2266855,
            5.701911, 6.8127112, 8.303445, 7.2310367, 8.100031, 7.5659833, 5.1267247, 3.87761,
            4.0163684, 4.9721913, 5.331641, 8.148896, 7.9409227, 7.16209, 7.322193, 7.1877875,
            5.4038734, 4.0643744, 4.4840846, 5.14155, 6.2999, 7.0962305, 7.563335, 7.1542625,
            6.078997, 6.5901103, 4.2228017, 4.712463, 6.353228, 6.325273, 6.102732, 6.466239,
            5.804881, 6.204312, 5.3912396, 6.7794056, 3.4612238, 4.9378233, 7.05794, 6.496545,
            5.48201, 5.3800535, 5.7091928, 5.182754, 5.936054, 6.4763203, 3.5607126, 4.8966994,
            6.693237, 6.168176, 6.8345323, 6.654815, 6.83456, 6.689677, 6.129557, 6.3763356,
            3.8870513, 2.6111794, 3.3676686, 3.6233056, 4.400947, 4.3350024, 4.936356, 4.151341,
            4.0190363, 4.344709, 2.115738,
        ],
    )
    .unwrap();
    let current_output24: Array3<f32> = conv_layer24.convolve(&test_input24);

    assert!(
        arr_allclose(&current_output24, &target_output24),
        "{:?} was not equal to {:?}",
        current_output24,
        target_output24
    );

    let test_input25 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.68177587, 0.20005976, 0.5214844, 0.5637177, 0.8187329, 0.34419012, 0.70609355,
            0.46725455, 0.23119006, 0.96067435, 0.29916614, 0.6806969, 0.91396964, 0.972841,
            0.01715484, 0.04093061, 0.4275515, 0.19486532, 0.25447014, 0.08197373, 0.6507138,
            0.21445233, 0.11806071, 0.17637333, 0.32952574, 0.5958368, 0.17714995, 0.7740049,
            0.6388251, 0.25830767, 0.21258484, 0.3401532, 0.96206266, 0.6204497, 0.28326756,
            0.20731905, 0.8391098, 0.63256073, 0.05410179, 0.97274446, 0.7486978, 0.12974854,
            0.7944709, 0.53723675, 0.69576323, 0.82454914, 0.37664893, 0.6722372, 0.50744605,
            0.7913009, 0.78958917, 0.6451747, 0.35058063, 0.22394986, 0.14626299, 0.05523287,
            0.4686973, 0.7351389, 0.07301666, 0.27983865, 0.10655332, 0.97564507, 0.05932388,
            0.77344525, 0.61317027, 0.08217912, 0.553476, 0.21154444, 0.19400315, 0.16894332,
            0.9486215, 0.92018247, 0.89767647, 0.5222088, 0.21455717, 0.203828, 0.13832045,
            0.5881519, 0.75384825, 0.9633764, 0.5959824, 0.758624, 0.01639629, 0.3016201,
            0.17905368, 0.19411111, 0.82684654, 0.2860684, 0.04715753, 0.06193527, 0.6444675,
            0.31424382, 0.10932652, 0.5231733, 0.44769424, 0.39186087, 0.02075461, 0.10706459,
            0.5791381, 0.45745206, 0.44355088, 0.519928, 0.01996619, 0.71309346, 0.68690145,
            0.39505485, 0.5469934, 0.31554794, 0.39265913, 0.6052618, 0.9284058, 0.1213429,
            0.38917127, 0.7799773, 0.825869, 0.88367033, 0.57404125, 0.85618263, 0.4407754,
            0.633255, 0.7577091, 0.73792094, 0.23396462, 0.3459607, 0.14433429, 0.5666275,
            0.9557201, 0.85192674, 0.6193624, 0.9293787, 0.02097251, 0.23979846, 0.07907034,
            0.9563302, 0.01872301, 0.41537428, 0.45995143, 0.64512044, 0.85995775, 0.10583407,
            0.4484315, 0.9160312, 0.5678417, 0.57392234, 0.26174, 0.10541193, 0.6379088,
            0.31216502, 0.87573344, 0.15632313, 0.7373654, 0.12863557, 0.9590727, 0.2825182,
            0.79587996, 0.8191361, 0.9381195, 0.53403527, 0.79628325, 0.62593824, 0.2113896,
            0.1876398, 0.29817143, 0.6925418, 0.1792817, 0.2641736, 0.43096247, 0.76093376,
            0.6251491, 0.6965461, 0.04901551, 0.06003402, 0.6987717, 0.12188532, 0.06863046,
            0.9816463, 0.75263584, 0.66786885, 0.6430677, 0.56340057, 0.73104405, 0.65803695,
            0.07880943, 0.23246141, 0.7858138, 0.55886114, 0.4816245, 0.7489411, 0.64294606,
            0.7781154, 0.66253483, 0.9903388, 0.41137746, 0.4890013, 0.06506247, 0.9972559,
            0.8323405, 0.18129697, 0.49030396, 0.48294267, 0.12433387, 0.9647698, 0.7292857,
            0.73773444, 0.3909372, 0.92350286, 0.25497472, 0.13691516, 0.34584802, 0.5884459,
            0.20412357, 0.00624331, 0.56834316, 0.22074686, 0.69736785, 0.08598603, 0.05624962,
            0.29992157, 0.25001067, 0.6889985, 0.89269227, 0.30140767, 0.6338539, 0.948173,
            0.464108, 0.89087915, 0.31388247, 0.5700806, 0.76289177, 0.00432913, 0.9234758,
            0.9616415, 0.29734898, 0.811496, 0.8376677, 0.406034, 0.9758267, 0.03124781, 0.5678819,
            0.12168682, 0.8672895, 0.7089132, 0.81502956, 0.45569643, 0.9420309, 0.03257992,
            0.41169244, 0.10524429, 0.29636487, 0.230716, 0.89597744, 0.23406821, 0.6527877,
            0.3581413, 0.6885466, 0.9535316, 0.8442464, 0.40710646, 0.16538836, 0.6326036,
            0.68527246, 0.31145656, 0.49300048, 0.49084947, 0.02828005, 0.88413817, 0.08669137,
            0.14747888, 0.9037477, 0.6970686, 0.30263218, 0.00271136, 0.49293855, 0.9998127,
            0.98342794, 0.9118095, 0.9264461, 0.04954946, 0.40840417, 0.46344218, 0.787193,
            0.20486033, 0.4029006, 0.7686151, 0.24171825, 0.36729267, 0.19857672, 0.32654667,
            0.36346474, 0.17108533, 0.3027954, 0.36422956, 0.58195865, 0.58513415, 0.7725577,
            0.8838584, 0.80932313, 0.89565295, 0.16141163, 0.06084506, 0.5492495, 0.60231775,
            0.91577756, 0.12382696, 0.294304, 0.36349937, 0.7948714, 0.14176327, 0.49541315,
            0.2934778, 0.37438837, 0.7306092, 0.28533515, 0.10216843, 0.55541974, 0.4650447,
            0.17332368, 0.3212567, 0.36790222, 0.11517226, 0.08391169, 0.66567504, 0.3817901,
            0.47639692, 0.81930286, 0.32803875, 0.5654139, 0.37452427, 0.6643417, 0.24304809,
            0.06236777, 0.7733252, 0.78207755, 0.61082655, 0.947744, 0.08051699, 0.94621384,
            0.00787854, 0.84173137, 0.1944808, 0.13019027, 0.66277754, 0.09286012, 0.58464366,
            0.6512211, 0.7080163, 0.70387626, 0.44558695, 0.44260016, 0.697838, 0.32629654,
            0.2740555, 0.99696946, 0.17646311, 0.37098762, 0.8761452, 0.69403934, 0.21528777,
            0.5237107, 0.44565287, 0.19037104, 0.8381286, 0.70450526, 0.7929086, 0.45777786,
            0.96684873, 0.48885155, 0.15208961, 0.8550647, 0.11583171, 0.56539786, 0.6370797,
            0.2444331, 0.26558962, 0.7020013, 0.31950995, 0.00088664, 0.4422912, 0.82152086,
            0.05462804, 0.8638695, 0.92018557, 0.43966386, 0.13879521, 0.6324256, 0.47845423,
            0.52424467, 0.8988874, 0.34291574, 0.5377849, 0.7919196, 0.69536626, 0.72673947,
            0.63617104, 0.1036236, 0.5688153, 0.642465, 0.68493664, 0.6256276, 0.5914831, 0.841703,
            0.26191136, 0.63586736, 0.14973171, 0.17741989, 0.8462637, 0.51744187, 0.89845973,
            0.44348246, 0.2674213, 0.5524051, 0.4584158, 0.05020873, 0.9414409, 0.87631005,
            0.8967645, 0.9048843, 0.6688897, 0.28862262, 0.01719667, 0.89464474, 0.738402,
            0.43135417, 0.36634243, 0.99305737, 0.5723982, 0.33335868, 0.6317803, 0.86594313,
            0.16760358, 0.08334628, 0.14621608, 0.6169529, 0.5971739, 0.95570713, 0.19301598,
            0.05311463, 0.8926391, 0.06703918, 0.3840044, 0.12217854, 0.11021607, 0.05716072,
            0.03542557, 0.46326014, 0.9456335, 0.8012088, 0.9099846, 0.31587508, 0.9948361,
        ],
    )
    .unwrap();

    let kernel25: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.19569385, 0.6932092, 0.287212, 0.22239834, 0.91989446, 0.645167, 0.16384327,
            0.26697785, 0.34233773, 0.9711869, 0.1736736, 0.49766174, 0.11606233, 0.20744501,
            0.47700465, 0.49665624, 0.9865482, 0.67733943, 0.48572266, 0.94583005, 0.3003492,
            0.8352311, 0.80740196, 0.39818338, 0.8049802, 0.3352269, 0.8549322, 0.32960874,
            0.01231102, 0.21975358, 0.79986304, 0.06471063, 0.77274996, 0.8312853, 0.7702817,
            0.82208914, 0.11399209, 0.04418208, 0.41363552, 0.37213323, 0.05123908, 0.16918235,
            0.56118464, 0.31676802, 0.91666114, 0.99523085, 0.02213015, 0.558943, 0.3857257,
            0.9998762, 0.5093269, 0.49142754, 0.34928933, 0.6983236, 0.63120776, 0.7523395,
            0.96101004, 0.9997972, 0.42995888, 0.86614877, 0.0841737, 0.895856, 0.11358444,
            0.10170663, 0.68170774, 0.69930184, 0.31476194, 0.37262207, 0.11822087, 0.5850524,
            0.7072854, 0.35515, 0.20403187, 0.682487, 0.44291237, 0.2778266, 0.69825464, 0.9029227,
            0.6240293, 0.41573936, 0.16815847, 0.33923522, 0.80277765, 0.07096831, 0.8554102,
            0.7722144, 0.53853285, 0.94955045, 0.5328812, 0.73666346, 0.11740076, 0.37460858,
            0.674916, 0.9220868, 0.9811295, 0.38428995, 0.8472775, 0.5904251, 0.4929124,
            0.49100837, 0.11250915, 0.43514693, 0.49978712, 0.58982396, 0.32562396, 0.08288938,
            0.12515384, 0.60863686, 0.49698648, 0.2545693, 0.17941345, 0.24435802, 0.9257646,
            0.3601743, 0.51685953, 0.14790155, 0.31631762, 0.6813218, 0.86361974, 0.8700462,
            0.5406228, 0.00816071, 0.81253463, 0.8402446, 0.16182604, 0.9968952, 0.57455206,
            0.71637905, 0.8596117, 0.21274436, 0.5098158, 0.02886825, 0.21751188, 0.23436014,
            0.3830526, 0.6327846, 0.27748674, 0.84223384, 0.9325366, 0.0989435, 0.6051626,
            0.08400947, 0.49678063, 0.97340894, 0.8396681, 0.3482415, 0.10386568, 0.7454953,
            0.40149435, 0.4452185,
        ],
    )
    .unwrap();
    let conv_layer25 = ConvolutionLayer::new(
        kernel25,
        Some(Array::from_shape_vec((2,), vec![0.8714838, 0.44752908]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output25: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            6.7690115, 8.383747, 9.516836, 10.735297, 11.02332, 10.199942, 10.544151, 11.616915,
            8.064314, 6.066939, 10.15304, 11.318178, 16.29104, 15.4238615, 16.428192, 16.101433,
            17.16286, 16.498955, 12.63445, 9.342808, 12.185073, 15.20638, 17.645733, 19.319832,
            20.419964, 20.030476, 18.67218, 20.597836, 15.431134, 11.048029, 11.711622, 15.00827,
            16.792059, 19.838718, 19.936123, 18.62894, 18.13786, 20.154148, 13.553419, 10.965017,
            11.79386, 14.482496, 18.949673, 19.26997, 20.250587, 17.775822, 18.702438, 19.563118,
            13.992409, 10.219941, 13.776046, 16.84034, 20.575855, 21.582626, 19.520138, 19.653553,
            18.159206, 20.544746, 13.388383, 10.564051, 13.851855, 17.514439, 21.282578, 21.58416,
            18.945107, 17.852451, 19.897942, 17.212814, 13.062413, 10.009751, 12.154169, 17.116798,
            21.453388, 18.63113, 19.19625, 16.575987, 17.719395, 14.892917, 11.690745, 9.468936,
            13.067565, 16.531425, 22.350101, 18.648666, 19.567822, 18.705044, 17.14175, 17.439178,
            12.392252, 9.778266, 13.72721, 17.371078, 21.477394, 21.249516, 20.035713, 20.526215,
            20.071625, 19.063625, 14.066981, 10.860017, 12.842079, 18.438087, 21.807262, 20.939812,
            20.655197, 20.583649, 22.212254, 21.068089, 15.880894, 10.844294, 10.813361, 17.032677,
            20.571854, 19.286808, 20.646137, 20.743206, 20.573761, 19.905804, 14.469526, 11.222337,
            9.794309, 16.054527, 18.750172, 18.637455, 21.016567, 22.923378, 21.834068, 21.493969,
            15.55193, 11.503248, 8.290217, 12.845223, 16.669205, 16.413012, 17.601738, 19.13076,
            16.81333, 15.309758, 12.028924, 9.252559, 5.6685495, 8.244759, 10.382374, 10.953767,
            11.778996, 13.432448, 12.444517, 12.032615, 8.047577, 6.91922, 8.604803, 10.545064,
            11.737465, 10.145288, 11.984159, 11.754926, 12.671166, 12.087688, 10.065018, 6.626133,
            10.672366, 11.702954, 13.319875, 15.179277, 16.09059, 14.082252, 15.564036, 15.017642,
            11.950195, 7.487458, 13.688133, 16.494518, 17.916262, 19.780884, 19.56587, 20.504396,
            20.19427, 20.220406, 16.845959, 10.661733, 13.526836, 16.813799, 18.287096, 19.933422,
            19.419449, 19.30483, 17.99036, 18.697819, 15.5361805, 9.718406, 13.726347, 15.786627,
            17.057745, 19.034382, 20.236732, 19.355228, 19.04257, 18.744955, 15.198787, 10.162013,
            14.728645, 18.2124, 20.990461, 20.686022, 19.138222, 18.84131, 16.752565, 18.446342,
            14.71187, 9.846413, 16.110872, 18.019516, 19.726479, 19.954834, 18.776358, 18.64409,
            18.085705, 18.382618, 13.97558, 8.746808, 16.398357, 18.889357, 19.957975, 19.411785,
            18.973238, 16.112833, 16.377161, 15.97248, 12.621019, 8.704916, 16.255018, 17.864328,
            20.293516, 19.212116, 18.986732, 17.915321, 17.57047, 17.094322, 13.171959, 8.891302,
            15.748715, 18.049667, 20.729807, 19.97658, 20.591722, 19.009254, 18.143755, 18.22138,
            14.279397, 10.298798, 14.86678, 17.203379, 20.68968, 20.660254, 21.12762, 21.40601,
            20.977442, 19.596092, 15.145637, 10.470989, 13.591634, 15.476291, 20.50859, 20.931334,
            21.544489, 21.687317, 20.004389, 20.043278, 14.595821, 11.479269, 12.159902, 15.867981,
            18.885235, 19.95796, 20.859488, 21.647806, 21.79608, 21.04165, 15.1455765, 12.095568,
            9.147135, 11.764696, 14.207276, 17.243536, 17.669691, 18.819317, 18.785503, 16.901169,
            12.39741, 9.029515, 6.6998024, 9.167199, 10.106593, 11.62832, 11.881163, 12.650122,
            13.724703, 12.120308, 10.089398, 7.4395037,
        ],
    )
    .unwrap();
    let current_output25: Array3<f32> = conv_layer25.convolve(&test_input25);

    assert!(
        arr_allclose(&current_output25, &target_output25),
        "{:?} was not equal to {:?}",
        current_output25,
        target_output25
    );

    let test_input26 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.90387195, 0.46964037, 0.4844109, 0.88147926, 0.5946748, 0.58768094, 0.34565842,
            0.46486276, 0.8322659, 0.64309967, 0.46776876, 0.2263038, 0.70366824, 0.7749035,
            0.9106096, 0.48822477, 0.5702429, 0.10668962, 0.92969257, 0.00275485, 0.9503608,
            0.14900696, 0.5455553, 0.00645077, 0.21402211, 0.7504094, 0.01176434, 0.07800543,
            0.0516187, 0.36804476, 0.8195282, 0.7427081, 0.185258, 0.2418856, 0.5231299,
            0.23739757, 0.92642605, 0.8063814, 0.09321253, 0.3954864, 0.27779007, 0.6142842,
            0.71764106, 0.33038312, 0.9766592, 0.42897722, 0.94963986, 0.37697607, 0.8851262,
            0.73109215, 0.6303855, 0.24837622, 0.21866089, 0.6886716, 0.69469833, 0.0114934,
            0.7045316, 0.35201788, 0.0989068, 0.9038667, 0.51265216, 0.926821, 0.7685541,
            0.4955361, 0.48527932, 0.09102922, 0.6430718, 0.16351804, 0.3052067, 0.49957812,
            0.3116739, 0.2785308, 0.13845451, 0.5386763, 0.85340834, 0.9765559, 0.3653472,
            0.02803171, 0.6471354, 0.8093628, 0.38585195, 0.5898562, 0.17813227, 0.76870936,
            0.8990035, 0.4354284, 0.15628383, 0.1745854, 0.86026084, 0.93176335, 0.5679988,
            0.47061768, 0.53949803, 0.05189181, 0.07629808, 0.8465009, 0.5065825, 0.7161806,
            0.02412173, 0.9533139, 0.94789124, 0.11517583, 0.85233843, 0.73321646, 0.07861274,
            0.33750752, 0.5816211, 0.64147437, 0.7184982, 0.897314, 0.09359702, 0.19160785,
            0.85125345, 0.8526771, 0.4098685, 0.5046985, 0.18144442, 0.47525635, 0.98244303,
            0.1424162, 0.9882022, 0.06972428, 0.20421812, 0.5577621, 0.30822515, 0.39205092,
            0.06246058, 0.02439791, 0.42704046, 0.32884195, 0.18523273, 0.6523331, 0.8833122,
            0.53135425, 0.2849727, 0.68437326, 0.4664868, 0.6945481, 0.27290356, 0.9941263,
            0.01063524, 0.06917533, 0.19982047, 0.2942452, 0.41777328, 0.90395254, 0.4888085,
            0.9895415, 0.5478458, 0.52514094, 0.7139765, 0.96795374, 0.703604, 0.11441413,
            0.22741623, 0.14197119, 0.14224136, 0.00554162, 0.08584995, 0.08854763, 0.55170393,
            0.34441712, 0.01855595, 0.5601068, 0.56593883, 0.16720486, 0.75972295, 0.4493232,
            0.38319588, 0.7179427, 0.19173315, 0.267287, 0.5663951, 0.07816565, 0.67903227,
            0.00826331, 0.5425498, 0.89380723, 0.11534049, 0.7132138, 0.4683366, 0.42596257,
            0.4862424, 0.93492687, 0.6817369, 0.0525712, 0.28192636, 0.4604141, 0.96248484,
            0.43289438, 0.34953818, 0.6902671, 0.5126539, 0.69908696, 0.2879344, 0.06127732,
            0.7361598, 0.8519083, 0.04873959, 0.88632005, 0.55267817, 0.35348675, 0.68609756,
            0.07016034, 0.602, 0.6732832, 0.82135326, 0.18075775, 0.37878716, 0.62920415,
            0.3706305, 0.32302734, 0.90577847, 0.54883826, 0.5766481, 0.9347623, 0.2624883,
            0.27476153, 0.09443506, 0.74253213, 0.01185389, 0.23280993, 0.17598268, 0.19381721,
            0.65946394, 0.6743594, 0.9255945, 0.8947401, 0.9869322, 0.08145659, 0.03987844,
            0.7629663, 0.2965461, 0.38589397, 0.86821306, 0.9996797, 0.77658385, 0.97871965,
            0.12471338, 0.48183945, 0.7989542, 0.61783546, 0.94045246, 0.71905494, 0.43614203,
            0.11011575, 0.34765512, 0.39178115, 0.7308709, 0.34274808, 0.35493043, 0.8328545,
            0.06045034, 0.49653238, 0.29012534, 0.55789274, 0.5755102, 0.4569207, 0.2188389,
            0.51010305, 0.9529406, 0.6924317, 0.91676563, 0.5358466, 0.6751086, 0.5230349,
            0.9687458, 0.5856843, 0.700519, 0.4472085, 0.44401753, 0.76227057, 0.18282856,
            0.360823, 0.06306251, 0.769097, 0.11797103, 0.5069124, 0.8386977, 0.9353965, 0.9456902,
            0.21557523, 0.28468877, 0.00299157, 0.94424677, 0.2590096, 0.12880772, 0.50224614,
            0.6319564, 0.05983794, 0.21579173, 0.9091785, 0.77259356, 0.9772731, 0.90224165,
            0.5264099, 0.47108477, 0.0492401, 0.25460967, 0.99656236, 0.5070151, 0.28755966,
            0.36141592, 0.02703854, 0.16006812, 0.7001516, 0.30561775, 0.8973991, 0.57343286,
            0.7367476, 0.2606863, 0.61278397, 0.9649247, 0.26253387, 0.27807143, 0.7962459,
            0.67275447, 0.6407772, 0.12578371, 0.84160686, 0.3605408, 0.96801484, 0.1393529,
            0.72915196, 0.9006433, 0.49849266, 0.5104628, 0.89867175, 0.955501, 0.59073764,
            0.86861897, 0.9176197, 0.5717296, 0.86013335, 0.39986315, 0.29667476, 0.9421052,
            0.89406526, 0.92121494, 0.05097519, 0.08086525, 0.9667328, 0.5984821, 0.37690058,
            0.47047687, 0.24334699, 0.9472316, 0.71601814, 0.6616385, 0.90634656, 0.49495855,
            0.28245237, 0.41918305, 0.27396587, 0.42253864, 0.94620466, 0.04238893, 0.61110425,
            0.9539543, 0.3999544, 0.66795814, 0.7064477, 0.99121827, 0.9024756, 0.85239345,
            0.70719117, 0.7763093, 0.10098496, 0.23122132, 0.86239356, 0.34863842, 0.10337279,
            0.44741336, 0.02051973, 0.33192208, 0.76970786, 0.37064746, 0.27677527, 0.4141578,
            0.34976023, 0.20377244, 0.15038556, 0.63522565, 0.39588144, 0.29719463, 0.5822416,
            0.3832173, 0.7443069, 0.31255615, 0.26080993, 0.93509567, 0.7061453, 0.4803283,
            0.33021635, 0.13239637, 0.35350803, 0.38336864, 0.51017934, 0.6332842, 0.07322941,
            0.8859752, 0.41102257, 0.2794688, 0.9154152, 0.2293425, 0.81592786, 0.0093977,
            0.63983893, 0.7104612, 0.8665582, 0.9376581, 0.35742825, 0.6020712, 0.42087105,
            0.6417253, 0.08560265, 0.02744765, 0.39207277, 0.21459882, 0.11062973, 0.87420404,
            0.69151706, 0.1787167, 0.85303366, 0.8576095, 0.5125019, 0.4814232, 0.3410254,
            0.1897166, 0.5530291, 0.8993465, 0.99207646, 0.31536198, 0.46590054, 0.01530014,
            0.69832444, 0.990704, 0.02463103, 0.01077096, 0.6721973, 0.6676321, 0.73046064,
            0.7690768, 0.53152925, 0.06813734, 0.47991776, 0.8400259, 0.13388659, 0.6923757,
            0.56391525,
        ],
    )
    .unwrap();

    let kernel26: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.5064835, 0.98023206, 0.8316277, 0.45037648, 0.8744264, 0.3228065, 0.77707547,
            0.65587145, 0.15356176, 0.8831219, 0.18077046, 0.81715685, 0.01058917, 0.54235333,
            0.9747539, 0.5249456, 0.14190416, 0.90132594, 0.29823583, 0.59148335, 0.5194669,
            0.74204314, 0.11199604, 0.32003468, 0.50086904, 0.22239625, 0.97291625, 0.86974585,
            0.49535275, 0.5424355, 0.10466193, 0.10202583, 0.25952706, 0.6287949, 0.5330766,
            0.2682298, 0.508476, 0.1925287, 0.09730922, 0.31764308, 0.14314991, 0.9460035,
            0.65402883, 0.71126366, 0.9785876, 0.32067546, 0.7039669, 0.7371736, 0.90192676,
            0.7503396, 0.9941749, 0.78996, 0.61614865, 0.35973564, 0.96392447, 0.5901891,
            0.06196258, 0.83785075, 0.37142363, 0.79140055, 0.07532936, 0.9428474, 0.43666556,
            0.02624486, 0.4253642, 0.78015715, 0.85766184, 0.7146162, 0.33209485, 0.80531436,
            0.9730212, 0.6855751, 0.69086134, 0.61613715, 0.67111015, 0.12122969, 0.50159,
            0.74436355, 0.7383121, 0.23079261, 0.04572792, 0.19533794, 0.4925117, 0.6131918,
            0.44526327, 0.20337714, 0.781168, 0.7058163, 0.46196786, 0.01862379, 0.90610075,
            0.8073715, 0.7148674, 0.5032462, 0.5038819, 0.85626405, 0.24466415, 0.09893908,
            0.05245275, 0.11470018, 0.90349656, 0.31138107, 0.8247195, 0.01722594, 0.5932752,
            0.7054897, 0.5784551, 0.26923984, 0.6289111, 0.11725764, 0.40164033, 0.6951812,
            0.8073887, 0.6793183, 0.7176144, 0.50780314, 0.9401547, 0.35663, 0.00467546,
            0.84130347, 0.34600323, 0.40760243, 0.47107708, 0.98480684, 0.13988449, 0.4022033,
            0.558168, 0.8453326, 0.42742896, 0.4576909, 0.8307157, 0.04634837, 0.39555076,
            0.60654116, 0.9779148, 0.3486375, 0.18171401, 0.93737435, 0.01817268, 0.31007424,
            0.4095396, 0.5559114, 0.20362668, 0.3899614, 0.26285827, 0.9031745, 0.95724046,
            0.52430856, 0.5576659, 0.6577067,
        ],
    )
    .unwrap();
    let conv_layer26 = ConvolutionLayer::new(
        kernel26,
        Some(Array::from_shape_vec((2,), vec![0.7514403, 0.533389]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output26: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            7.195673, 10.628537, 12.766504, 12.742041, 11.990261, 12.2943735, 13.438121, 13.263811,
            10.504466, 7.7617817, 11.180954, 14.28883, 17.839453, 15.911364, 15.022921, 17.282726,
            15.881008, 17.37373, 13.117737, 11.1914425, 14.48039, 19.946138, 22.700916, 21.388685,
            21.300735, 21.281912, 21.562342, 22.049139, 18.433313, 15.39149, 13.011787, 18.183199,
            21.32859, 20.96984, 23.291265, 22.496033, 22.048372, 23.780394, 18.623125, 13.808216,
            14.416148, 18.63173, 24.034565, 23.138592, 22.252829, 22.726448, 21.912699, 23.177547,
            16.54043, 13.177999, 13.16263, 19.025156, 22.792984, 22.015848, 24.219107, 23.25188,
            24.016508, 23.288662, 18.075415, 13.62507, 11.748453, 15.21367, 20.770771, 22.113705,
            24.188314, 23.84951, 23.340399, 24.9779, 16.768969, 13.609935, 13.613592, 17.879015,
            22.20779, 22.57813, 21.528982, 20.638586, 21.534204, 21.820257, 15.662336, 12.883686,
            14.020554, 19.08456, 23.258621, 22.754517, 22.10997, 21.630539, 20.890215, 22.212944,
            14.804373, 13.085741, 13.027283, 17.386656, 20.479315, 21.106422, 21.475954, 22.159653,
            22.42836, 21.61906, 15.740659, 13.932566, 14.360701, 20.577366, 21.569664, 20.948154,
            20.5784, 21.758276, 21.29758, 21.518541, 15.924424, 12.764275, 16.283098, 20.317902,
            21.452805, 22.180185, 18.756536, 19.379633, 18.84096, 20.80657, 15.7196455, 13.045437,
            14.6740885, 21.368607, 22.410238, 21.808502, 20.819733, 20.155699, 19.703869,
            21.137032, 15.232192, 13.578839, 12.372064, 16.826015, 18.561079, 18.573954, 17.250748,
            15.670571, 16.154484, 16.479559, 11.445272, 9.718671, 7.7575827, 10.894474, 11.89901,
            13.015094, 11.2741375, 11.397026, 11.846173, 11.709565, 8.211169, 7.702855, 6.709029,
            9.596893, 11.965407, 10.887584, 11.133079, 11.164574, 11.243199, 11.311681, 9.578949,
            8.014617, 9.044883, 11.453673, 16.516928, 14.952285, 14.11535, 14.707216, 13.427455,
            15.660931, 12.344559, 10.422042, 12.113528, 15.695236, 18.960463, 18.087427, 18.314716,
            18.648077, 18.381287, 18.706173, 18.159101, 13.426386, 10.987967, 15.49459, 18.412268,
            19.559813, 18.787062, 19.603613, 20.725721, 20.270237, 18.258924, 13.348696, 11.486692,
            16.262877, 20.265451, 19.59245, 21.514814, 20.26721, 20.056498, 19.031778, 16.213972,
            13.408745, 12.414701, 14.837867, 18.016394, 19.863592, 19.824535, 20.567822, 20.948933,
            20.267998, 16.66527, 11.188734, 9.7518635, 13.659144, 17.737017, 20.42118, 20.19711,
            20.526104, 21.404713, 20.502117, 15.714654, 13.627985, 10.839195, 13.768323, 19.25762,
            18.794605, 20.042877, 19.429993, 19.436813, 19.381151, 16.253393, 12.355951, 11.498798,
            14.48584, 19.534863, 19.681408, 20.65966, 19.894083, 17.770205, 19.652618, 15.029688,
            13.747341, 11.244066, 15.411884, 18.261713, 17.614567, 18.746506, 18.70643, 18.929964,
            18.470154, 16.651577, 12.922964, 11.662319, 15.925017, 19.563381, 19.598276, 18.93281,
            19.506468, 17.335022, 19.010336, 15.510496, 13.350893, 13.262964, 16.62787, 20.411808,
            18.788881, 17.154568, 17.026524, 17.10976, 18.66113, 14.37466, 11.202766, 12.59565,
            17.540848, 20.075237, 19.690332, 17.338753, 17.591797, 16.959492, 18.749504, 15.99591,
            13.600609, 9.703378, 12.415135, 16.956656, 15.939212, 14.966779, 13.767766, 14.762804,
            14.932179, 11.839523, 9.803649, 7.812746, 10.135057, 11.133978, 12.491107, 10.828741,
            10.830891, 9.771803, 10.6357155, 9.177252, 7.496341,
        ],
    )
    .unwrap();
    let current_output26: Array3<f32> = conv_layer26.convolve(&test_input26);

    assert!(
        arr_allclose(&current_output26, &target_output26),
        "{:?} was not equal to {:?}",
        current_output26,
        target_output26
    );

    let test_input27 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.94846255, 0.6964576, 0.96843016, 0.66096354, 0.17514281, 0.83987904, 0.40466377,
            0.13681252, 0.5367513, 0.5569262, 0.5836484, 0.26183346, 0.24014333, 0.45519072,
            0.36609647, 0.66722494, 0.40931305, 0.7678357, 0.71030915, 0.8799919, 0.10468024,
            0.23255506, 0.38094538, 0.4090506, 0.59137547, 0.6625547, 0.6464879, 0.59517515,
            0.5136288, 0.05843278, 0.51399225, 0.38453335, 0.6970278, 0.5047524, 0.06902273,
            0.09784848, 0.3510309, 0.9961713, 0.6529659, 0.4457503, 0.25736928, 0.9593906,
            0.07333596, 0.80891675, 0.5196752, 0.25790986, 0.9833442, 0.63378453, 0.69324833,
            0.7669788, 0.6144302, 0.8679245, 0.25625056, 0.35837704, 0.59633005, 0.8309169,
            0.23309404, 0.65488356, 0.26520997, 0.34644812, 0.87685895, 0.5645692, 0.50217426,
            0.967748, 0.969097, 0.00554681, 0.48245648, 0.05388465, 0.2207341, 0.9374606,
            0.7587759, 0.9855095, 0.38765016, 0.7075585, 0.35234872, 0.86497676, 0.36315936,
            0.05972259, 0.400054, 0.3090082, 0.1404125, 0.32328948, 0.77128536, 0.7420292,
            0.0151671, 0.3440802, 0.36001205, 0.32235637, 0.1375511, 0.39828563, 0.7305659,
            0.7766764, 0.86437464, 0.9027017, 0.4454178, 0.34967113, 0.75469947, 0.3584414,
            0.8001929, 0.2543982, 0.72871476, 0.9618047, 0.34620103, 0.9426159, 0.50686455,
            0.6152326, 0.12266664, 0.559009, 0.21047816, 0.16580608, 0.2582814, 0.15493484,
            0.20253018, 0.21612453, 0.5038661, 0.91294247, 0.8080103, 0.838882, 0.7180022,
            0.20993726, 0.58702785, 0.5285052, 0.00845493, 0.9090709, 0.63151246, 0.8139426,
            0.25651568, 0.02755868, 0.03389508, 0.30576277, 0.37300143, 0.13004215, 0.608248,
            0.16874252, 0.27251562, 0.19374174, 0.22429508, 0.5501398, 0.49685606, 0.46965292,
            0.11797722, 0.7302286, 0.38946074, 0.3407683, 0.72125804, 0.86716634, 0.98185354,
            0.15272117, 0.02051388, 0.27791747, 0.7587074, 0.23504323, 0.02695821, 0.39229694,
            0.15247433, 0.48075756, 0.7610872, 0.22628488, 0.9413573, 0.30246893, 0.01136111,
            0.9598438, 0.8383011, 0.9723616, 0.47197652, 0.94492614, 0.21735138, 0.31927556,
            0.39669687, 0.05186762, 0.79388624, 0.17953911, 0.6036967, 0.9663948, 0.48956135,
            0.4727555, 0.41221553, 0.17531991, 0.84556717, 0.04869543, 0.81426054, 0.8781844,
            0.956683, 0.51194495, 0.7431968, 0.02038087, 0.00589341, 0.4704734, 0.10196105,
            0.4856146, 0.2972315, 0.14647067, 0.2117447, 0.8261646, 0.95831466, 0.9185463,
            0.98925644, 0.5729306, 0.1967555, 0.33214343, 0.24979122, 0.6015046, 0.26777977,
            0.9183129, 0.25964326, 0.38164377, 0.45220876, 0.09959481, 0.9193449, 0.8044326,
            0.44542107, 0.30965453, 0.42501828, 0.6194622, 0.89371026, 0.08402323, 0.5293358,
            0.816318, 0.57557297, 0.08988074, 0.9184309, 0.84704405, 0.9194768, 0.4946111,
            0.24117838, 0.97676104, 0.9935074, 0.9232175, 0.5854387, 0.3386878, 0.5352726,
            0.08310746, 0.6829108, 0.66831505, 0.7869529, 0.42882872, 0.84581494, 0.11308007,
            0.07337865, 0.02265424, 0.6603618, 0.6904631, 0.47793466, 0.58312225, 0.33399308,
            0.1441583, 0.03236333, 0.31139955, 0.23037143, 0.23011816, 0.81936634, 0.9375789,
            0.1625122, 0.11950397, 0.71464306, 0.6463952, 0.5489697, 0.8545862, 0.9213473,
            0.52128464, 0.1224625, 0.6615045, 0.7931158, 0.4731851, 0.48125225, 0.4718432,
            0.33050996, 0.32576007, 0.4363914, 0.01891187, 0.8601632, 0.02397078, 0.53442717,
            0.5216071, 0.40344155, 0.063399, 0.19041517, 0.02668436, 0.07788111, 0.15599571,
            0.4338736, 0.8760362, 0.9668574, 0.7971797, 0.13885641, 0.52926344, 0.32682723,
            0.9537846, 0.6078623, 0.27223235, 0.09553351, 0.8403314, 0.12087691, 0.60492355,
            0.03379478, 0.13423896, 0.23765405, 0.31380126, 0.70387655, 0.79063565, 0.92111635,
            0.65776235, 0.38434002, 0.7584332, 0.2882407, 0.711263, 0.61748165, 0.1864088,
            0.6243588, 0.20176977, 0.02156927, 0.06738149, 0.8982146, 0.2390027, 0.07549326,
            0.65994954, 0.01747457, 0.12387726, 0.06532437, 0.08151705, 0.19784369, 0.64356047,
            0.42640674, 0.68663126, 0.22805685, 0.023332, 0.59032553, 0.8226498, 0.7051767,
            0.62274987, 0.63475907, 0.7238778, 0.5970565, 0.88734704, 0.07542202, 0.71210676,
            0.6989102, 0.5070594, 0.12374777, 0.22591083, 0.26892266, 0.7791601, 0.76115644,
            0.91088, 0.5503317, 0.9804811, 0.03202334, 0.46311814, 0.09919641, 0.26757732,
            0.28902137, 0.7140448, 0.5040979, 0.37557426, 0.5246399, 0.66929567, 0.7025585,
            0.66615474, 0.30578545, 0.35601366, 0.7942114, 0.20677379, 0.15500914, 0.7926027,
            0.29064912, 0.8273933, 0.99714524, 0.5301375, 0.63807166, 0.15588701, 0.53650105,
            0.883448, 0.28218988, 0.3352366, 0.1015854, 0.21515913, 0.0677837, 0.46811357,
            0.2523892, 0.1536621, 0.3143135, 0.53114694, 0.79320407, 0.75357485, 0.07968733,
            0.6287965, 0.2200977, 0.590361, 0.8816608, 0.92466223, 0.23308377, 0.7569012,
            0.1372336, 0.72369504, 0.01938523, 0.989562, 0.82807124, 0.978318, 0.90013695,
            0.10934412, 0.31143916, 0.60268074, 0.89117837, 0.27851093, 0.29225165, 0.16005383,
            0.7666568, 0.8990756, 0.45873183, 0.03297786, 0.4354277, 0.20520075, 0.67032087,
            0.70261323, 0.62342596, 0.4962149, 0.4153414, 0.5587902, 0.40878415, 0.5055576,
            0.81622064, 0.5339488, 0.6388459, 0.304105, 0.82015866, 0.2952592, 0.71163654,
            0.9769518, 0.13750617, 0.10509957, 0.6421733, 0.01179794, 0.86186355, 0.06657688,
            0.22622024, 0.97906446, 0.01797699, 0.04377225, 0.15706603, 0.6343292, 0.5594078,
            0.11903284, 0.8178364, 0.9288911, 0.15461008, 0.9943553, 0.8165832, 0.13425252,
            0.9562293, 0.17169783,
        ],
    )
    .unwrap();

    let kernel27: Array4<f32> = Array::from_shape_vec(
        (2, 3, 5, 5),
        vec![
            0.05023352, 0.6767696, 0.66343135, 0.32775852, 0.14548539, 0.66260463, 0.9435393,
            0.56790006, 0.22986317, 0.76032287, 0.8746105, 0.2665503, 0.82373565, 0.28121006,
            0.29389632, 0.3074064, 0.40319064, 0.29072547, 0.22278658, 0.21566778, 0.04191615,
            0.35444143, 0.594935, 0.5280909, 0.6227668, 0.9995037, 0.34129518, 0.07482269,
            0.9538717, 0.57593834, 0.6352265, 0.32445627, 0.25140822, 0.93379414, 0.82740843,
            0.18509477, 0.6084598, 0.7941346, 0.13568091, 0.81633985, 0.7832342, 0.7269978,
            0.7938294, 0.24875638, 0.53098685, 0.97634184, 0.3654985, 0.6197924, 0.1958822,
            0.91466755, 0.82326293, 0.05417962, 0.2876998, 0.34076488, 0.22490515, 0.34424198,
            0.8024984, 0.86761755, 0.2457382, 0.94153976, 0.42271057, 0.8497308, 0.13301279,
            0.01450239, 0.12739219, 0.2980205, 0.1089614, 0.4534563, 0.20752071, 0.44084755,
            0.32884085, 0.78595555, 0.29699826, 0.8696194, 0.87364227, 0.1825079, 0.8653281,
            0.11152316, 0.10165259, 0.30172202, 0.5634873, 0.79023945, 0.12142149, 0.89489484,
            0.32732126, 0.16754848, 0.14866899, 0.72059697, 0.48512897, 0.1768624, 0.36138168,
            0.34082386, 0.24096294, 0.5398071, 0.52981263, 0.8495612, 0.45151472, 0.01440341,
            0.92154115, 0.32281688, 0.9658324, 0.11643393, 0.02498931, 0.74842566, 0.71275234,
            0.38320434, 0.3124743, 0.99616134, 0.10025226, 0.60567856, 0.8189058, 0.44458553,
            0.2570787, 0.15552202, 0.5807619, 0.05135555, 0.30162072, 0.84052527, 0.06775604,
            0.61146617, 0.77579254, 0.7554349, 0.9041999, 0.5885413, 0.43739402, 0.9121548,
            0.704337, 0.71699256, 0.41252124, 0.49857914, 0.77542007, 0.62377745, 0.58095855,
            0.35906684, 0.62711567, 0.6132724, 0.54546535, 0.83928454, 0.8303008, 0.1890054,
            0.23060308, 0.5893513, 0.16549692, 0.61116034, 0.2488159, 0.99599046, 0.39940432,
            0.11897708, 0.15867555, 0.76753354,
        ],
    )
    .unwrap();
    let conv_layer27 = ConvolutionLayer::new(
        kernel27,
        Some(Array::from_shape_vec((2,), vec![0.31943667, 0.56480473]).unwrap()),
        1,
        Padding::Same,
    );
    let target_output27: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            6.303744, 9.192273, 11.046744, 11.038114, 11.254127, 11.205315, 10.934401, 9.826911,
            7.6808267, 5.732746, 10.481937, 14.398206, 16.03173, 16.603495, 15.634847, 14.490316,
            14.927575, 13.663696, 9.891783, 8.013654, 11.733046, 16.047106, 19.76907, 20.691408,
            19.421091, 18.562265, 17.075895, 16.55658, 12.979985, 10.054241, 10.869138, 15.902926,
            18.297825, 19.242836, 20.185972, 19.45977, 17.612772, 19.150942, 13.472294, 10.6537,
            10.392477, 16.892267, 19.311407, 20.11174, 20.349863, 20.283405, 19.14287, 17.17384,
            13.972246, 11.337697, 11.869018, 17.279655, 21.019314, 21.875116, 19.742754, 19.91862,
            18.02325, 17.362034, 14.437984, 11.2208, 11.46146, 16.935339, 21.058748, 19.829334,
            20.672295, 20.010923, 19.655954, 19.760042, 15.012251, 10.459686, 12.516581, 17.71222,
            20.370003, 19.940594, 20.040226, 20.458908, 19.375652, 17.721588, 12.985662, 9.0429325,
            12.564553, 17.485752, 20.443933, 20.721642, 18.838753, 19.435299, 17.45782, 15.530447,
            12.142993, 10.328388, 12.2529125, 16.978165, 19.765205, 20.617094, 20.022926,
            18.834908, 18.011755, 16.927206, 14.228962, 11.032912, 10.911092, 16.35068, 19.900682,
            20.018309, 18.925133, 19.290602, 16.83317, 15.484712, 12.918531, 9.285494, 12.165201,
            15.008027, 18.426996, 19.409271, 17.394966, 18.041496, 16.938324, 16.425268,
            12.3483715, 9.5655155, 11.403267, 15.1235895, 17.314482, 20.341614, 18.894735,
            18.090637, 17.41417, 17.054749, 12.30658, 10.560176, 7.8365345, 11.547875, 13.450567,
            13.569932, 13.314742, 13.533141, 12.92632, 12.066973, 8.829449, 6.67612, 6.527518,
            8.908968, 9.884411, 10.491672, 10.479602, 9.688914, 10.380079, 8.720163, 6.3418946,
            6.49089, 6.5404425, 9.491807, 10.830951, 11.173583, 11.00549, 11.36268, 10.236654,
            9.578959, 8.356506, 6.0987663, 9.74148, 13.58766, 15.195816, 16.071177, 15.777491,
            13.744869, 13.198488, 12.547473, 10.930957, 7.9941764, 10.413912, 15.127568, 19.35615,
            19.754494, 19.028955, 20.177387, 18.470013, 18.506819, 14.145158, 9.620457, 11.339057,
            14.332184, 18.735615, 20.937136, 19.931767, 18.654919, 18.252844, 17.065626,
            13.4020195, 10.503394, 10.427044, 16.64893, 20.801115, 19.975592, 19.675035, 20.251806,
            18.67513, 17.871832, 15.736034, 11.354185, 12.631458, 16.59154, 21.576136, 21.59296,
            20.894335, 21.08449, 18.395643, 19.25048, 14.300741, 10.1295, 11.41516, 15.435354,
            20.046968, 20.54487, 21.04074, 20.990498, 19.178095, 17.519384, 13.979834, 10.34372,
            12.107864, 16.838654, 20.574963, 19.951496, 19.34655, 19.096977, 16.61396, 17.587297,
            14.842418, 9.75899, 13.080872, 16.8347, 21.934265, 18.663042, 19.39524, 19.61953,
            18.798231, 17.968075, 14.771796, 11.757223, 11.943324, 16.027508, 19.464369, 19.202036,
            19.797981, 18.951517, 18.359005, 17.850582, 13.622463, 10.549841, 10.704935, 15.482787,
            20.599588, 19.663633, 18.830711, 18.489914, 16.919195, 16.481794, 13.634688, 10.234731,
            11.48481, 15.025107, 19.06655, 19.51905, 18.767012, 17.6079, 17.813288, 17.607718,
            13.720046, 10.682373, 10.692663, 14.305928, 17.433332, 19.3332, 18.697905, 17.560118,
            18.211624, 16.983343, 14.190973, 9.715766, 8.430788, 11.062859, 13.75786, 13.708817,
            15.630961, 13.35989, 12.658098, 12.269616, 9.226757, 7.978139, 6.071607, 9.590241,
            11.610346, 10.619384, 11.067726, 11.208961, 10.004572, 9.869914, 7.4073086, 5.5721507,
        ],
    )
    .unwrap();
    let current_output27: Array3<f32> = conv_layer27.convolve(&test_input27);

    assert!(
        arr_allclose(&current_output27, &target_output27),
        "{:?} was not equal to {:?}",
        current_output27,
        target_output27
    );
}
